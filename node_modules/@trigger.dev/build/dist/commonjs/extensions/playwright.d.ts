import type { BuildContext, BuildExtension } from "@trigger.dev/core/v3/build";
import type { BuildManifest, BuildTarget } from "@trigger.dev/core/v3";
type PlaywrightBrowser = "chromium" | "firefox" | "webkit";
interface PlaywrightExtensionOptions {
    /**
     * Browsers to install. Select only needed browsers to optimize build time and size.
     * @default ["chromium"]
     */
    browsers?: PlaywrightBrowser[];
    /**
     * Run the browsers in headless mode (Recommended)
     * @default true
     */
    headless?: boolean;
    /**
     * Playwright version override. If not provided, we will try to detect the version automatically.
     */
    version?: string;
}
/**
 * Installs Playwright browsers and dependencies for your Trigger.dev deployments.
 *
 * @param options - Configuration options for the Playwright extension.
 * @param options.browsers Browsers to install. Accepts an array of strings. Default: `["chromium"]`
 * @param options.headless Whether to run browsers in headless mode. Default: `true`
 * @param options.version Playwright version to use for browser installation. When not set, will automatically detect the version (recommended). Default: `undefined`
 *
 */
export declare function playwright(options?: PlaywrightExtensionOptions): PlaywrightExtension;
/**
 * Background:
 *
 * Running `npx playwright install --with-deps` normally will install the browsers and the dependencies.
 * However, this is not possible in a build context, because we don't have sudo access.
 *
 * So we need to install the dependencies manually and then download and install the browsers.
 * This has a few challenges:
 * 1. We don't want to download all browsers, only the ones we need with it's dependencies
 *    The less dependencies we have to install, the faster the build, and the smaller the image.
 * 2. We need to know where to download the browsers from
 *    while we can hardcode the download url it might change over time (as it has in the past)
 *    so we need to download the browser info first and then parse the output to get the download url.
 *
 * Note: While this looks like we are downloading & installing a lot of stuff, it's actually not that bad
 *       since running `npx playwright install --with-deps` will result in the same amount of downloads.
 */
declare class PlaywrightExtension implements BuildExtension {
    readonly name = "PlaywrightExtension";
    private moduleExternals;
    private readonly options;
    constructor({ browsers, headless, version, }?: PlaywrightExtensionOptions);
    externalsForTarget(target: BuildTarget): string[];
    onBuildComplete(context: BuildContext, manifest: BuildManifest): void;
}
export {};
