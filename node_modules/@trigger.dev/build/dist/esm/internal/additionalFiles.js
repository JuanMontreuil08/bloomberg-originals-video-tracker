import { copyFile, mkdir } from "node:fs/promises";
import { dirname, join, posix, relative } from "node:path";
import { glob } from "tinyglobby";
export async function addAdditionalFilesToBuild(source, options, context, manifest) {
    // Copy any static assets to the destination
    const staticAssets = await findStaticAssetFiles(options.files ?? [], manifest.outputPath, {
        cwd: context.workingDir,
    });
    for (const { assets, matcher } of staticAssets) {
        if (assets.length === 0) {
            context.logger.warn(`[${source}] No files found for matcher`, matcher);
        }
        else {
            context.logger.debug(`[${source}] Found ${assets.length} files for matcher`, matcher);
        }
    }
    await copyStaticAssets(staticAssets, source, context);
}
async function findStaticAssetFiles(matchers, destinationPath, options) {
    const result = [];
    for (const matcher of matchers) {
        const assets = await findStaticAssetsForMatcher(matcher, destinationPath, options);
        result.push({ matcher, assets });
    }
    return result;
}
async function findStaticAssetsForMatcher(matcher, destinationPath, options) {
    const result = [];
    const files = await glob({
        patterns: [matcher],
        cwd: options?.cwd,
        ignore: options?.ignore ?? [],
        onlyFiles: true,
        absolute: true,
    });
    let matches = 0;
    for (const file of files) {
        matches++;
        const pathInsideDestinationDir = relative(options?.cwd ?? process.cwd(), file)
            .split(posix.sep)
            .filter((p) => p !== "..")
            .join(posix.sep);
        const relativeDestinationPath = join(destinationPath, pathInsideDestinationDir);
        result.push({
            source: file,
            destination: relativeDestinationPath,
        });
    }
    return result;
}
async function copyStaticAssets(staticAssetFiles, sourceName, context) {
    for (const { assets } of staticAssetFiles) {
        for (const { source, destination } of assets) {
            await mkdir(dirname(destination), { recursive: true });
            context.logger.debug(`[${sourceName}] Copying ${source} to ${destination}`);
            await copyFile(source, destination);
        }
    }
}
//# sourceMappingURL=additionalFiles.js.map