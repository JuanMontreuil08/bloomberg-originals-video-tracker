"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpReply = exports.getTextBody = void 0;
exports.getJsonBody = getJsonBody;
exports.getRandomPortNumber = getRandomPortNumber;
const getTextBody = (req) => new Promise((resolve) => {
    let body = "";
    req.on("readable", () => {
        const chunk = req.read();
        if (chunk) {
            body += chunk;
        }
    });
    req.on("end", () => {
        resolve(body);
    });
});
exports.getTextBody = getTextBody;
async function getJsonBody(req) {
    return new Promise((resolve, reject) => {
        let body = "";
        req.on("data", (chunk) => {
            body += chunk.toString();
        });
        req.on("end", () => {
            resolve(safeJsonParse(body));
        });
    });
}
function safeJsonParse(text) {
    if (!text) {
        return null;
    }
    try {
        return JSON.parse(text);
    }
    catch (error) {
        console.error("Failed to parse JSON", { error, text });
        return null;
    }
}
class HttpReply {
    response;
    constructor(response) {
        this.response = response;
    }
    empty(status) {
        if (this.hasReplied) {
            return;
        }
        return this.response.writeHead(status ?? 200).end();
    }
    text(text, status, contentType) {
        if (this.hasReplied) {
            return;
        }
        return this.response
            .writeHead(status ?? 200, { "Content-Type": contentType || "text/plain" })
            .end(text.endsWith("\n") ? text : `${text}\n`);
    }
    json(value, pretty, status) {
        if (this.hasReplied) {
            return;
        }
        return this.text(JSON.stringify(value, undefined, pretty ? 2 : undefined), status ?? 200, "application/json");
    }
    get hasReplied() {
        return this.response.headersSent;
    }
}
exports.HttpReply = HttpReply;
function getRandomInteger(min, max) {
    const intMin = Math.ceil(min);
    const intMax = Math.floor(max);
    return Math.floor(Math.random() * (intMax - intMin + 1)) + intMin;
}
function getRandomPortNumber() {
    return getRandomInteger(8000, 9999);
}
//# sourceMappingURL=http.js.map