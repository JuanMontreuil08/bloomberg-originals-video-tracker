"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const flags_js_1 = require("./flags.js");
(0, vitest_1.describe)("dedupFlags", () => {
    (0, vitest_1.it)("should keep single flags unchanged", () => {
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)("--verbose")).toBe("--verbose");
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)("-v")).toBe("-v");
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)("--debug=true")).toBe("--debug=true");
    });
    (0, vitest_1.it)("should preserve multiple different flags", () => {
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)("--quiet --verbose")).toBe("--quiet --verbose");
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)("-v -q --log=debug")).toBe("-v -q --log=debug");
    });
    (0, vitest_1.it)("should use last value when flags are duplicated", () => {
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)("--debug=false --debug=true")).toBe("--debug=true");
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)("--log=info --log=warn --log=error")).toBe("--log=error");
    });
    (0, vitest_1.it)("should treat underscores as hyphens", () => {
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)("--debug_level=info")).toBe("--debug-level=info");
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)("--debug_level=info --debug-level=warn")).toBe("--debug-level=warn");
    });
    (0, vitest_1.it)("should handle mix of flags with and without values", () => {
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)("--debug=false -v --debug=true")).toBe("-v --debug=true");
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)("-v --quiet -v")).toBe("--quiet -v");
    });
    // Edge cases
    (0, vitest_1.it)("should handle empty string", () => {
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)("")).toBe("");
    });
    (0, vitest_1.it)("should handle multiple spaces between flags", () => {
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)("--debug=false    --verbose   --debug=true")).toBe("--verbose --debug=true");
    });
    (0, vitest_1.it)("should handle flags with empty values", () => {
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)("--path= --path=foo")).toBe("--path=foo");
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)("--path=foo --path=")).toBe("--path=");
    });
    (0, vitest_1.it)("should preserve values containing equals signs", () => {
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)("--url=http://example.com?foo=bar")).toBe("--url=http://example.com?foo=bar");
    });
    (0, vitest_1.it)("should handle flags with special characters", () => {
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)("--path=/usr/local --path=/home/user")).toBe("--path=/home/user");
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)('--name="John Doe" --name="Jane Doe"')).toBe('--name="Jane Doe"');
    });
    (0, vitest_1.it)("should handle multiple flag variants", () => {
        const input = "--env=dev -v --env=prod --quiet -v --env=staging";
        (0, vitest_1.expect)((0, flags_js_1.dedupFlags)(input)).toBe("--quiet -v --env=staging");
    });
});
//# sourceMappingURL=flags.test.js.map