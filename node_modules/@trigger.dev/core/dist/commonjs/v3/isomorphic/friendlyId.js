"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdGenerator = exports.AttemptId = exports.BulkActionId = exports.BatchId = exports.WaitpointId = exports.SnapshotId = exports.RunId = exports.QueueId = exports.CheckpointId = exports.BackgroundWorkerId = exports.IdUtil = void 0;
exports.generateFriendlyId = generateFriendlyId;
exports.generateInternalId = generateInternalId;
exports.toFriendlyId = toFriendlyId;
exports.fromFriendlyId = fromFriendlyId;
const nanoid_1 = require("nanoid");
const cuid_1 = __importDefault(require("@bugsnag/cuid"));
const idGenerator = (0, nanoid_1.customAlphabet)("123456789abcdefghijkmnopqrstuvwxyz", 21);
function generateFriendlyId(prefix, size) {
    return `${prefix}_${idGenerator(size)}`;
}
function generateInternalId() {
    return (0, cuid_1.default)();
}
/** Convert an internal ID to a friendly ID */
function toFriendlyId(entityName, internalId) {
    if (!entityName) {
        throw new Error("Entity name cannot be empty");
    }
    if (!internalId) {
        throw new Error("Internal ID cannot be empty");
    }
    if (internalId.startsWith(`${entityName}_`)) {
        return internalId;
    }
    return `${entityName}_${internalId}`;
}
/** Convert a friendly ID to an internal ID */
function fromFriendlyId(friendlyId, expectedEntityName) {
    if (!friendlyId) {
        throw new Error("Friendly ID cannot be empty");
    }
    const parts = friendlyId.split("_");
    if (parts.length !== 2) {
        throw new Error("Invalid friendly ID format");
    }
    const [entityName, internalId] = parts;
    if (!entityName) {
        throw new Error("Entity name cannot be empty");
    }
    if (!internalId) {
        throw new Error("Internal ID cannot be empty");
    }
    if (expectedEntityName && entityName !== expectedEntityName) {
        throw new Error(`Invalid entity name: ${entityName}`);
    }
    return internalId;
}
class IdUtil {
    entityName;
    constructor(entityName) {
        this.entityName = entityName;
    }
    generate() {
        const internalId = generateInternalId();
        return {
            id: internalId,
            friendlyId: this.toFriendlyId(internalId),
        };
    }
    toFriendlyId(internalId) {
        return toFriendlyId(this.entityName, internalId);
    }
    fromFriendlyId(friendlyId) {
        return fromFriendlyId(friendlyId);
    }
    /** Will convert friendlyIds, and will leave ids as they are */
    toId(value) {
        if (value.startsWith(`${this.entityName}_`)) {
            return fromFriendlyId(value);
        }
        return value;
    }
}
exports.IdUtil = IdUtil;
exports.BackgroundWorkerId = new IdUtil("worker");
exports.CheckpointId = new IdUtil("checkpoint");
exports.QueueId = new IdUtil("queue");
exports.RunId = new IdUtil("run");
exports.SnapshotId = new IdUtil("snapshot");
exports.WaitpointId = new IdUtil("waitpoint");
exports.BatchId = new IdUtil("batch");
exports.BulkActionId = new IdUtil("bulk");
exports.AttemptId = new IdUtil("attempt");
class IdGenerator {
    alphabet;
    length;
    prefix;
    constructor({ alphabet, length, prefix }) {
        this.alphabet = alphabet;
        this.length = length;
        this.prefix = prefix;
    }
    generate() {
        return `${this.prefix}${(0, nanoid_1.customAlphabet)(this.alphabet, this.length)()}`;
    }
}
exports.IdGenerator = IdGenerator;
//# sourceMappingURL=friendlyId.js.map