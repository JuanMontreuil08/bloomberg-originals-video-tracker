import { Span, SpanOptions } from "@opentelemetry/api";
import { Logger } from "@opentelemetry/api-logs";
import { TriggerTracer } from "../tracer.js";
import { Prettify } from "../types/utils.js";
export type LogLevel = "none" | "error" | "warn" | "info" | "debug" | "log";
export declare const logLevels: Array<LogLevel>;
export type TaskLoggerConfig = {
    logger: Logger;
    tracer: TriggerTracer;
    level: LogLevel;
    maxAttributeCount?: number;
};
export type TraceOptions = Prettify<SpanOptions & {
    icon?: string;
}>;
export interface TaskLogger {
    debug(message: string, properties?: Record<string, unknown>): void;
    log(message: string, properties?: Record<string, unknown>): void;
    info(message: string, properties?: Record<string, unknown>): void;
    warn(message: string, properties?: Record<string, unknown>): void;
    error(message: string, properties?: Record<string, unknown>): void;
    trace<T>(name: string, fn: (span: Span) => Promise<T>, options?: TraceOptions): Promise<T>;
    startSpan(name: string, options?: TraceOptions): Span;
}
export declare class OtelTaskLogger implements TaskLogger {
    #private;
    private readonly _config;
    private readonly _level;
    constructor(_config: TaskLoggerConfig);
    debug(message: string, properties?: Record<string, unknown>): void;
    log(message: string, properties?: Record<string, unknown>): void;
    info(message: string, properties?: Record<string, unknown>): void;
    warn(message: string, properties?: Record<string, unknown>): void;
    error(message: string, properties?: Record<string, unknown>): void;
    trace<T>(name: string, fn: (span: Span) => Promise<T>, options?: TraceOptions): Promise<T>;
    startSpan(name: string, options?: TraceOptions): Span;
}
export declare class NoopTaskLogger implements TaskLogger {
    debug(): void;
    log(): void;
    info(): void;
    warn(): void;
    error(): void;
    trace<T>(name: string, fn: (span: Span) => Promise<T>): Promise<T>;
    startSpan(): Span;
}
