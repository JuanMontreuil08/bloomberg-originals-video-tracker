import { WorkerApiConnectRequestBody, WorkerApiDequeueRequestBody, WorkerApiHeartbeatRequestBody, WorkerApiRunAttemptCompleteRequestBody, WorkerApiRunAttemptStartRequestBody, WorkerApiRunHeartbeatRequestBody, WorkerApiDebugLogBody, WorkerApiSuspendRunRequestBody } from "./schemas.js";
import { SupervisorClientCommonOptions } from "./types.js";
type SupervisorHttpClientOptions = SupervisorClientCommonOptions;
export declare class SupervisorHttpClient {
    private readonly apiUrl;
    private readonly workerToken;
    private readonly instanceName;
    private readonly defaultHeaders;
    private readonly sendRunDebugLogs;
    private readonly logger;
    constructor(opts: SupervisorHttpClientOptions);
    connect(body: WorkerApiConnectRequestBody): Promise<import("../../zodfetch.js").ApiResult<{
        ok: true;
        workerGroup: {
            type: string;
            name: string;
        };
    }>>;
    dequeue(body: WorkerApiDequeueRequestBody): Promise<import("../../zodfetch.js").ApiResult<{
        version: "1";
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
        };
        organization: {
            id: string;
        };
        project: {
            id: string;
        };
        deployment: {
            id?: string | undefined;
            friendlyId?: string | undefined;
            imagePlatform?: string | undefined;
        };
        run: {
            id: string;
            isTest: boolean;
            machine: {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            };
            traceContext: Record<string, unknown>;
            friendlyId: string;
            attemptNumber: number;
            masterQueue: string;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        };
        completedWaitpoints: {
            type: import("../../index.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }[];
        dequeuedAt: Date;
        backgroundWorker: {
            id: string;
            version: string;
            friendlyId: string;
        };
        checkpoint?: {
            type: import("../../index.js").CheckpointTypeEnum;
            id: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        } | undefined;
        image?: string | undefined;
        placementTags?: {
            key: string;
            values?: string[] | undefined;
        }[] | undefined;
    }[]>>;
    /** @deprecated Not currently used */
    dequeueFromVersion(deploymentId: string, maxRunCount?: number, runnerId?: string): Promise<import("../../zodfetch.js").ApiResult<{
        version: "1";
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
        };
        organization: {
            id: string;
        };
        project: {
            id: string;
        };
        deployment: {
            id?: string | undefined;
            friendlyId?: string | undefined;
            imagePlatform?: string | undefined;
        };
        run: {
            id: string;
            isTest: boolean;
            machine: {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            };
            traceContext: Record<string, unknown>;
            friendlyId: string;
            attemptNumber: number;
            masterQueue: string;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        };
        completedWaitpoints: {
            type: import("../../index.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }[];
        dequeuedAt: Date;
        backgroundWorker: {
            id: string;
            version: string;
            friendlyId: string;
        };
        checkpoint?: {
            type: import("../../index.js").CheckpointTypeEnum;
            id: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        } | undefined;
        image?: string | undefined;
        placementTags?: {
            key: string;
            values?: string[] | undefined;
        }[] | undefined;
    }[]>>;
    heartbeatWorker(body: WorkerApiHeartbeatRequestBody): Promise<import("../../zodfetch.js").ApiResult<{
        ok: true;
    }>>;
    heartbeatRun(runId: string, snapshotId: string, body: WorkerApiRunHeartbeatRequestBody, runnerId?: string): Promise<import("../../zodfetch.js").ApiResult<{
        ok: true;
    }>>;
    startRunAttempt(runId: string, snapshotId: string, body: WorkerApiRunAttemptStartRequestBody, runnerId?: string): Promise<import("../../zodfetch.js").ApiResult<{
        run: {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        };
    } & {
        execution: {
            task: {
                id: string;
                filePath: string;
            } & {
                [k: string]: unknown;
            };
            queue: {
                name: string;
                id: string;
            };
            environment: {
                type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                id: string;
                slug: string;
                branchName?: string | undefined;
                git?: {
                    dirty?: boolean | undefined;
                    source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                    provider?: string | undefined;
                    ghUsername?: string | undefined;
                    ghUserAvatarUrl?: string | undefined;
                    commitAuthorName?: string | undefined;
                    commitMessage?: string | undefined;
                    commitRef?: string | undefined;
                    commitSha?: string | undefined;
                    remoteUrl?: string | undefined;
                    pullRequestNumber?: number | undefined;
                    pullRequestTitle?: string | undefined;
                    pullRequestState?: "open" | "closed" | "merged" | undefined;
                } | undefined;
            };
            organization: {
                name: string;
                id: string;
                slug: string;
            };
            project: {
                name: string;
                id: string;
                slug: string;
                ref: string;
            };
            machine: {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            };
            attempt: {
                number: number;
                startedAt: Date;
            } & {
                [k: string]: unknown;
            };
            run: {
                payload: string;
                id: string;
                payloadType: string;
                tags: string[];
                isTest: boolean;
                createdAt: Date;
                startedAt: Date;
                metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
                idempotencyKey?: string | undefined;
                maxAttempts?: number | undefined;
                version?: string | undefined;
                maxDuration?: number | undefined;
                priority?: number | undefined;
                baseCostInCents?: number | undefined;
                parentTaskRunId?: string | undefined;
                rootTaskRunId?: string | undefined;
                durationMs?: number | undefined;
                costInCents?: number | undefined;
                region?: string | undefined;
            } & {
                traceContext?: Record<string, unknown> | undefined;
            };
            batch?: {
                id: string;
            } | undefined;
            deployment?: {
                id: string;
                version: string;
                shortCode: string;
                runtime: string;
                runtimeVersion: string;
                git?: {
                    dirty?: boolean | undefined;
                    source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                    provider?: string | undefined;
                    ghUsername?: string | undefined;
                    ghUserAvatarUrl?: string | undefined;
                    commitAuthorName?: string | undefined;
                    commitMessage?: string | undefined;
                    commitRef?: string | undefined;
                    commitSha?: string | undefined;
                    remoteUrl?: string | undefined;
                    pullRequestNumber?: number | undefined;
                    pullRequestTitle?: string | undefined;
                    pullRequestState?: "open" | "closed" | "merged" | undefined;
                } | undefined;
            } | undefined;
        };
    } & {
        envVars: Record<string, string>;
    }>>;
    completeRunAttempt(runId: string, snapshotId: string, body: WorkerApiRunAttemptCompleteRequestBody, runnerId?: string): Promise<import("../../zodfetch.js").ApiResult<{
        result: {
            attemptStatus: "RUN_FINISHED" | "RUN_PENDING_CANCEL" | "RETRY_QUEUED" | "RETRY_IMMEDIATELY";
        } & {
            run: {
                status: import("../../index.js").TaskRunStatus;
                id: string;
                friendlyId: string;
                attemptNumber?: number | null | undefined;
            };
            snapshot: {
                id: string;
                createdAt: Date;
                description: string;
                friendlyId: string;
                executionStatus: import("../../index.js").TaskRunExecutionStatus;
            };
        };
    }>>;
    getLatestSnapshot(runId: string, runnerId?: string): Promise<import("../../zodfetch.js").ApiResult<{
        execution: {
            version: "1";
            run: {
                status: import("../../index.js").TaskRunStatus;
                id: string;
                friendlyId: string;
                attemptNumber?: number | null | undefined;
            };
            snapshot: {
                id: string;
                createdAt: Date;
                description: string;
                friendlyId: string;
                executionStatus: import("../../index.js").TaskRunExecutionStatus;
            };
            completedWaitpoints: {
                type: import("../../index.js").WaitpointType;
                id: string;
                friendlyId: string;
                completedAt: Date;
                outputIsError: boolean;
                idempotencyKey?: string | undefined;
                output?: string | undefined;
                outputType?: string | undefined;
                index?: number | undefined;
                completedByTaskRun?: {
                    id: string;
                    friendlyId: string;
                    batch?: {
                        id: string;
                        friendlyId: string;
                    } | undefined;
                } | undefined;
                completedAfter?: Date | undefined;
                completedByBatch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            }[];
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
            checkpoint?: {
                type: import("../../index.js").CheckpointTypeEnum;
                id: string;
                friendlyId: string;
                location: string;
                imageRef?: string | null | undefined;
                reason?: string | null | undefined;
            } | undefined;
        };
    }>>;
    getSnapshotsSince(runId: string, snapshotId: string, runnerId?: string): Promise<import("../../zodfetch.js").ApiResult<{
        snapshots: {
            version: "1";
            run: {
                status: import("../../index.js").TaskRunStatus;
                id: string;
                friendlyId: string;
                attemptNumber?: number | null | undefined;
            };
            snapshot: {
                id: string;
                createdAt: Date;
                description: string;
                friendlyId: string;
                executionStatus: import("../../index.js").TaskRunExecutionStatus;
            };
            completedWaitpoints: {
                type: import("../../index.js").WaitpointType;
                id: string;
                friendlyId: string;
                completedAt: Date;
                outputIsError: boolean;
                idempotencyKey?: string | undefined;
                output?: string | undefined;
                outputType?: string | undefined;
                index?: number | undefined;
                completedByTaskRun?: {
                    id: string;
                    friendlyId: string;
                    batch?: {
                        id: string;
                        friendlyId: string;
                    } | undefined;
                } | undefined;
                completedAfter?: Date | undefined;
                completedByBatch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            }[];
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
            checkpoint?: {
                type: import("../../index.js").CheckpointTypeEnum;
                id: string;
                friendlyId: string;
                location: string;
                imageRef?: string | null | undefined;
                reason?: string | null | undefined;
            } | undefined;
        }[];
    }>>;
    sendDebugLog(runId: string, body: WorkerApiDebugLogBody, runnerId?: string): Promise<void>;
    continueRunExecution(runId: string, snapshotId: string, runnerId?: string): Promise<import("../../zodfetch.js").ApiResult<{
        run: {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        };
    }>>;
    submitSuspendCompletion({ runId, snapshotId, runnerId, body, }: {
        runId: string;
        snapshotId: string;
        runnerId?: string;
        body: WorkerApiSuspendRunRequestBody;
    }): Promise<import("../../zodfetch.js").ApiResult<{
        ok: true;
    }>>;
    private runnerIdHeader;
}
export {};
