"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SupervisorHttpClient = void 0;
const zod_1 = require("zod");
const schemas_js_1 = require("./schemas.js");
const util_js_1 = require("./util.js");
const zodfetch_js_1 = require("../../zodfetch.js");
const util_js_2 = require("../util.js");
const consts_js_1 = require("../consts.js");
const structuredLogger_js_1 = require("../../utils/structuredLogger.js");
class SupervisorHttpClient {
    apiUrl;
    workerToken;
    instanceName;
    defaultHeaders;
    sendRunDebugLogs;
    logger = new structuredLogger_js_1.SimpleStructuredLogger("supervisor-http-client");
    constructor(opts) {
        this.apiUrl = opts.apiUrl.replace(/\/$/, "");
        this.workerToken = opts.workerToken;
        this.instanceName = opts.instanceName;
        this.defaultHeaders = (0, util_js_1.getDefaultWorkerHeaders)(opts);
        this.sendRunDebugLogs = opts.sendRunDebugLogs ?? false;
        if (!this.apiUrl) {
            throw new Error("apiURL is required and needs to be a non-empty string");
        }
        if (!this.workerToken) {
            throw new Error("workerToken is required and needs to be a non-empty string");
        }
        if (!this.instanceName) {
            throw new Error("instanceName is required and needs to be a non-empty string");
        }
    }
    async connect(body) {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkerApiConnectResponseBody, `${this.apiUrl}/engine/v1/worker-actions/connect`, {
            method: "POST",
            headers: {
                ...this.defaultHeaders,
                "Content-Type": "application/json",
            },
            body: JSON.stringify(body),
        });
    }
    async dequeue(body) {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkerApiDequeueResponseBody, `${this.apiUrl}/engine/v1/worker-actions/dequeue`, {
            method: "POST",
            headers: {
                ...this.defaultHeaders,
                "Content-Type": "application/json",
            },
            body: JSON.stringify(body),
        });
    }
    /** @deprecated Not currently used */
    async dequeueFromVersion(deploymentId, maxRunCount = 1, runnerId) {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkerApiDequeueResponseBody, `${this.apiUrl}/engine/v1/worker-actions/deployments/${deploymentId}/dequeue?maxRunCount=${maxRunCount}`, {
            headers: {
                ...this.defaultHeaders,
                ...this.runnerIdHeader(runnerId),
            },
        });
    }
    async heartbeatWorker(body) {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkerApiHeartbeatResponseBody, `${this.apiUrl}/engine/v1/worker-actions/heartbeat`, {
            method: "POST",
            headers: {
                ...this.defaultHeaders,
                "Content-Type": "application/json",
            },
            body: JSON.stringify(body),
        });
    }
    async heartbeatRun(runId, snapshotId, body, runnerId) {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkerApiRunHeartbeatResponseBody, `${this.apiUrl}/engine/v1/worker-actions/runs/${runId}/snapshots/${snapshotId}/heartbeat`, {
            method: "POST",
            headers: {
                ...this.defaultHeaders,
                ...this.runnerIdHeader(runnerId),
                "Content-Type": "application/json",
            },
            body: JSON.stringify(body),
        });
    }
    async startRunAttempt(runId, snapshotId, body, runnerId) {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkerApiRunAttemptStartResponseBody, `${this.apiUrl}/engine/v1/worker-actions/runs/${runId}/snapshots/${snapshotId}/attempts/start`, {
            method: "POST",
            headers: {
                ...this.defaultHeaders,
                ...this.runnerIdHeader(runnerId),
            },
            body: JSON.stringify(body),
        });
    }
    async completeRunAttempt(runId, snapshotId, body, runnerId) {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkerApiRunAttemptCompleteResponseBody, `${this.apiUrl}/engine/v1/worker-actions/runs/${runId}/snapshots/${snapshotId}/attempts/complete`, {
            method: "POST",
            headers: {
                ...this.defaultHeaders,
                ...this.runnerIdHeader(runnerId),
            },
            body: JSON.stringify(body),
        });
    }
    async getLatestSnapshot(runId, runnerId) {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkerApiRunLatestSnapshotResponseBody, `${this.apiUrl}/engine/v1/worker-actions/runs/${runId}/snapshots/latest`, {
            method: "GET",
            headers: {
                ...this.defaultHeaders,
                ...this.runnerIdHeader(runnerId),
            },
        });
    }
    async getSnapshotsSince(runId, snapshotId, runnerId) {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkerApiRunSnapshotsSinceResponseBody, `${this.apiUrl}/engine/v1/worker-actions/runs/${runId}/snapshots/since/${snapshotId}`, {
            method: "GET",
            headers: {
                ...this.defaultHeaders,
                ...this.runnerIdHeader(runnerId),
            },
        });
    }
    async sendDebugLog(runId, body, runnerId) {
        if (!this.sendRunDebugLogs) {
            return;
        }
        try {
            const res = await (0, zodfetch_js_1.wrapZodFetch)(zod_1.z.unknown(), `${this.apiUrl}/engine/v1/worker-actions/runs/${runId}/logs/debug`, {
                method: "POST",
                headers: {
                    ...this.defaultHeaders,
                    ...this.runnerIdHeader(runnerId),
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(body),
            });
            if (!res.success) {
                this.logger.error("Failed to send debug log", { error: res.error });
            }
        }
        catch (error) {
            this.logger.error("Failed to send debug log (caught error)", { error });
        }
    }
    async continueRunExecution(runId, snapshotId, runnerId) {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkerApiContinueRunExecutionRequestBody, `${this.apiUrl}/engine/v1/worker-actions/runs/${runId}/snapshots/${snapshotId}/continue`, {
            method: "GET",
            headers: {
                ...this.defaultHeaders,
                ...this.runnerIdHeader(runnerId),
            },
        });
    }
    async submitSuspendCompletion({ runId, snapshotId, runnerId, body, }) {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkerApiSuspendRunResponseBody, `${this.apiUrl}/engine/v1/worker-actions/runs/${runId}/snapshots/${snapshotId}/suspend`, {
            method: "POST",
            headers: {
                ...this.defaultHeaders,
                ...this.runnerIdHeader(runnerId),
                "Content-Type": "application/json",
            },
            body: JSON.stringify(body),
        });
    }
    runnerIdHeader(runnerId) {
        return (0, util_js_2.createHeaders)({
            [consts_js_1.WORKER_HEADERS.RUNNER_ID]: runnerId,
        });
    }
}
exports.SupervisorHttpClient = SupervisorHttpClient;
//# sourceMappingURL=http.js.map