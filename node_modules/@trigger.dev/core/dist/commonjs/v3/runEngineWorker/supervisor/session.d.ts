import { SupervisorHttpClient } from "./http.js";
import { PreDequeueFn, PreSkipFn, SupervisorClientCommonOptions } from "./types.js";
import { WorkerEvents } from "./events.js";
import EventEmitter from "events";
type SupervisorSessionOptions = SupervisorClientCommonOptions & {
    queueConsumerEnabled?: boolean;
    runNotificationsEnabled?: boolean;
    heartbeatIntervalSeconds: number;
    dequeueIntervalMs: number;
    dequeueIdleIntervalMs: number;
    preDequeue?: PreDequeueFn;
    preSkip?: PreSkipFn;
    maxRunCount?: number;
    maxConsumerCount?: number;
    sendRunDebugLogs?: boolean;
};
export declare class SupervisorSession extends EventEmitter<WorkerEvents> {
    private opts;
    readonly httpClient: SupervisorHttpClient;
    private readonly logger;
    private readonly runNotificationsEnabled;
    private runNotificationsSocket?;
    private readonly queueConsumerEnabled;
    private readonly queueConsumers;
    private readonly heartbeat;
    constructor(opts: SupervisorSessionOptions);
    private onDequeue;
    subscribeToRunNotifications(runFriendlyIds: string[]): void;
    unsubscribeFromRunNotifications(runFriendlyIds: string[]): void;
    private createRunNotificationsSocket;
    start(): Promise<void>;
    stop(): Promise<void>;
    private getHeartbeatBody;
}
export {};
