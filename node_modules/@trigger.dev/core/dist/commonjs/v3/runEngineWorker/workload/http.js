"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkloadHttpClient = void 0;
const zod_1 = require("zod");
const schemas_js_1 = require("./schemas.js");
const util_js_1 = require("./util.js");
const zodfetch_js_1 = require("../../zodfetch.js");
class WorkloadHttpClient {
    opts;
    apiUrl;
    runnerId;
    deploymentId;
    constructor(opts) {
        this.opts = opts;
        this.apiUrl = opts.workerApiUrl.replace(/\/$/, "");
        this.deploymentId = opts.deploymentId;
        this.runnerId = opts.runnerId;
        if (!this.apiUrl) {
            throw new Error("apiURL is required and needs to be a non-empty string");
        }
        if (!this.deploymentId) {
            throw new Error("deploymentId is required and needs to be a non-empty string");
        }
    }
    updateApiUrl(apiUrl) {
        this.apiUrl = apiUrl.replace(/\/$/, "");
    }
    updateRunnerId(runnerId) {
        this.runnerId = runnerId;
    }
    defaultHeaders() {
        return (0, util_js_1.getDefaultWorkloadHeaders)({
            ...this.opts,
            runnerId: this.runnerId,
        });
    }
    async heartbeatRun(runId, snapshotId, body) {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkloadHeartbeatResponseBody, `${this.apiUrl}/api/v1/workload-actions/runs/${runId}/snapshots/${snapshotId}/heartbeat`, {
            method: "POST",
            headers: {
                ...this.defaultHeaders(),
                "Content-Type": "application/json",
            },
            body: JSON.stringify(body ?? {}),
        });
    }
    async suspendRun(runId, snapshotId) {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkloadSuspendRunResponseBody, `${this.apiUrl}/api/v1/workload-actions/runs/${runId}/snapshots/${snapshotId}/suspend`, {
            method: "GET",
            headers: {
                ...this.defaultHeaders(),
            },
        });
    }
    async continueRunExecution(runId, snapshotId) {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkloadContinueRunExecutionResponseBody, `${this.apiUrl}/api/v1/workload-actions/runs/${runId}/snapshots/${snapshotId}/continue`, {
            method: "GET",
            headers: {
                ...this.defaultHeaders(),
            },
        });
    }
    async startRunAttempt(runId, snapshotId, body) {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkloadRunAttemptStartResponseBody, `${this.apiUrl}/api/v1/workload-actions/runs/${runId}/snapshots/${snapshotId}/attempts/start`, {
            method: "POST",
            headers: {
                ...this.defaultHeaders(),
            },
            body: JSON.stringify(body),
        });
    }
    async completeRunAttempt(runId, snapshotId, body) {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkloadRunAttemptCompleteResponseBody, `${this.apiUrl}/api/v1/workload-actions/runs/${runId}/snapshots/${snapshotId}/attempts/complete`, {
            method: "POST",
            headers: {
                ...this.defaultHeaders(),
            },
            body: JSON.stringify(body),
        });
    }
    async getRunExecutionData(runId) {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkloadRunLatestSnapshotResponseBody, `${this.apiUrl}/api/v1/workload-actions/runs/${runId}/snapshots/latest`, {
            method: "GET",
            headers: {
                ...this.defaultHeaders(),
            },
        });
    }
    async getSnapshotsSince(runId, snapshotId) {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkloadRunSnapshotsSinceResponseBody, `${this.apiUrl}/api/v1/workload-actions/runs/${runId}/snapshots/since/${snapshotId}`, {
            method: "GET",
            headers: {
                ...this.defaultHeaders(),
            },
        });
    }
    async sendDebugLog(runId, body) {
        try {
            const res = await (0, zodfetch_js_1.wrapZodFetch)(zod_1.z.unknown(), `${this.apiUrl}/api/v1/workload-actions/runs/${runId}/logs/debug`, {
                method: "POST",
                headers: {
                    ...this.defaultHeaders(),
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(body),
            });
            if (!res.success) {
                console.error("Failed to send debug log", res);
            }
        }
        catch (error) {
            console.error("Failed to send debug log", { error });
        }
    }
    /** @deprecated Not currently used */
    async dequeue() {
        return (0, zodfetch_js_1.wrapZodFetch)(schemas_js_1.WorkloadDequeueFromVersionResponseBody, `${this.apiUrl}/api/v1/workload-actions/deployments/${this.deploymentId}/dequeue`, {
            method: "GET",
            headers: {
                ...this.defaultHeaders(),
            },
        });
    }
}
exports.WorkloadHttpClient = WorkloadHttpClient;
//# sourceMappingURL=http.js.map