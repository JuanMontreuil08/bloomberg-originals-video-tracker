import { BatchTaskRunExecutionResult, CompletedWaitpoint, TaskRunContext, TaskRunExecutionResult, WaitpointTokenResult } from "../schemas/index.js";
import { ExecutorToWorkerProcessConnection } from "../zodIpc.js";
import { RuntimeManager } from "./manager.js";
export declare class SharedRuntimeManager implements RuntimeManager {
    private ipc;
    private showLogs;
    /** Maps a resolver ID to a resolver function */
    private readonly resolversById;
    /** Stores waitpoints that arrive before their resolvers have been created */
    private readonly waitpointsByResolverId;
    private _preventMultipleWaits;
    constructor(ipc: ExecutorToWorkerProcessConnection, showLogs: boolean);
    reset(): void;
    disable(): void;
    waitForTask(params: {
        id: string;
        ctx: TaskRunContext;
    }): Promise<TaskRunExecutionResult>;
    waitForBatch(params: {
        id: string;
        runCount: number;
        ctx: TaskRunContext;
    }): Promise<BatchTaskRunExecutionResult>;
    waitForWaitpoint({ waitpointFriendlyId, finishDate, }: {
        waitpointFriendlyId: string;
        finishDate?: Date;
    }): Promise<WaitpointTokenResult>;
    resolveWaitpoints(waitpoints: CompletedWaitpoint[]): Promise<void>;
    private resolverIdFromWaitpoint;
    private resolveWaitpoint;
    private resolvePendingWaitpoints;
    private setSuspendable;
    private suspendable;
    private waitpointToTaskRunExecutionResult;
    private waitpointForDebugLog;
    private debugLog;
    private log;
    private get status();
}
