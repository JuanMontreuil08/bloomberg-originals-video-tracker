import z from "zod";
export declare const CheckpointServiceSuspendRequestBody: z.ZodObject<{
    type: z.ZodEnum<[import("./runEngine.js").CheckpointTypeEnum]>;
    runId: z.ZodString;
    snapshotId: z.ZodString;
    runnerId: z.ZodString;
    projectRef: z.ZodString;
    deploymentVersion: z.ZodString;
    reason: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: import("./runEngine.js").CheckpointTypeEnum;
    runId: string;
    projectRef: string;
    deploymentVersion: string;
    snapshotId: string;
    runnerId: string;
    reason?: string | undefined;
}, {
    type: import("./runEngine.js").CheckpointTypeEnum;
    runId: string;
    projectRef: string;
    deploymentVersion: string;
    snapshotId: string;
    runnerId: string;
    reason?: string | undefined;
}>;
export type CheckpointServiceSuspendRequestBody = z.infer<typeof CheckpointServiceSuspendRequestBody>;
export type CheckpointServiceSuspendRequestBodyInput = z.input<typeof CheckpointServiceSuspendRequestBody>;
export declare const CheckpointServiceSuspendResponseBody: z.ZodObject<{
    ok: z.ZodLiteral<true>;
}, "strip", z.ZodTypeAny, {
    ok: true;
}, {
    ok: true;
}>;
export type CheckpointServiceSuspendResponseBody = z.infer<typeof CheckpointServiceSuspendResponseBody>;
export declare const CheckpointServiceRestoreRequestBody: z.ZodObject<{
    version: z.ZodLiteral<"1">;
    environment: z.ZodObject<{
        id: z.ZodString;
        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
    }, "strip", z.ZodTypeAny, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
    }, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
    }>;
    organization: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
    project: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
    deployment: z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        friendlyId: z.ZodOptional<z.ZodString>;
        imagePlatform: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id?: string | undefined;
        friendlyId?: string | undefined;
        imagePlatform?: string | undefined;
    }, {
        id?: string | undefined;
        friendlyId?: string | undefined;
        imagePlatform?: string | undefined;
    }>;
    run: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        isTest: z.ZodBoolean;
        machine: z.ZodObject<{
            name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
            cpu: z.ZodNumber;
            memory: z.ZodNumber;
            centsPerMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        }, {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        }>;
        attemptNumber: z.ZodNumber;
        masterQueue: z.ZodString;
        traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        isTest: boolean;
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        traceContext: Record<string, unknown>;
        friendlyId: string;
        attemptNumber: number;
        masterQueue: string;
    }, {
        id: string;
        isTest: boolean;
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        traceContext: Record<string, unknown>;
        friendlyId: string;
        attemptNumber: number;
        masterQueue: string;
    }>;
    snapshot: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        executionStatus: z.ZodEnum<[import("./runEngine.js").TaskRunExecutionStatus]>;
        description: z.ZodString;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: import("./runEngine.js").TaskRunExecutionStatus;
    }, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: import("./runEngine.js").TaskRunExecutionStatus;
    }>;
    checkpoint: z.ZodObject<{
        id: z.ZodString;
        type: z.ZodEnum<[import("./runEngine.js").CheckpointTypeEnum]>;
        location: z.ZodString;
        imageRef: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: import("./runEngine.js").CheckpointTypeEnum;
        id: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    }, {
        type: import("./runEngine.js").CheckpointTypeEnum;
        id: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    }>;
    completedWaitpoints: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        index: z.ZodOptional<z.ZodNumber>;
        friendlyId: z.ZodString;
        type: z.ZodEnum<[import("./runEngine.js").WaitpointType]>;
        completedAt: z.ZodDate;
        idempotencyKey: z.ZodOptional<z.ZodString>;
        completedByTaskRun: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
            batch: z.ZodOptional<z.ZodObject<{
                id: z.ZodString;
                friendlyId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                friendlyId: string;
            }, {
                id: string;
                friendlyId: string;
            }>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }, {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }>>;
        completedAfter: z.ZodOptional<z.ZodDate>;
        completedByBatch: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            friendlyId: string;
        }, {
            id: string;
            friendlyId: string;
        }>>;
        output: z.ZodOptional<z.ZodString>;
        outputType: z.ZodOptional<z.ZodString>;
        outputIsError: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        type: import("./runEngine.js").WaitpointType;
        id: string;
        friendlyId: string;
        completedAt: Date;
        outputIsError: boolean;
        idempotencyKey?: string | undefined;
        output?: string | undefined;
        outputType?: string | undefined;
        index?: number | undefined;
        completedByTaskRun?: {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        } | undefined;
        completedAfter?: Date | undefined;
        completedByBatch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    }, {
        type: import("./runEngine.js").WaitpointType;
        id: string;
        friendlyId: string;
        completedAt: Date;
        outputIsError: boolean;
        idempotencyKey?: string | undefined;
        output?: string | undefined;
        outputType?: string | undefined;
        index?: number | undefined;
        completedByTaskRun?: {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        } | undefined;
        completedAfter?: Date | undefined;
        completedByBatch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    }>, "many">;
    dequeuedAt: z.ZodDate;
    image: z.ZodOptional<z.ZodString>;
    backgroundWorker: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        version: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        version: string;
        friendlyId: string;
    }, {
        id: string;
        version: string;
        friendlyId: string;
    }>;
    placementTags: z.ZodOptional<z.ZodArray<z.ZodObject<{
        key: z.ZodString;
        values: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        key: string;
        values?: string[] | undefined;
    }, {
        key: string;
        values?: string[] | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    version: "1";
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
    };
    organization: {
        id: string;
    };
    project: {
        id: string;
    };
    deployment: {
        id?: string | undefined;
        friendlyId?: string | undefined;
        imagePlatform?: string | undefined;
    };
    run: {
        id: string;
        isTest: boolean;
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        traceContext: Record<string, unknown>;
        friendlyId: string;
        attemptNumber: number;
        masterQueue: string;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: import("./runEngine.js").TaskRunExecutionStatus;
    };
    checkpoint: {
        type: import("./runEngine.js").CheckpointTypeEnum;
        id: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    };
    completedWaitpoints: {
        type: import("./runEngine.js").WaitpointType;
        id: string;
        friendlyId: string;
        completedAt: Date;
        outputIsError: boolean;
        idempotencyKey?: string | undefined;
        output?: string | undefined;
        outputType?: string | undefined;
        index?: number | undefined;
        completedByTaskRun?: {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        } | undefined;
        completedAfter?: Date | undefined;
        completedByBatch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    }[];
    dequeuedAt: Date;
    backgroundWorker: {
        id: string;
        version: string;
        friendlyId: string;
    };
    image?: string | undefined;
    placementTags?: {
        key: string;
        values?: string[] | undefined;
    }[] | undefined;
}, {
    version: "1";
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
    };
    organization: {
        id: string;
    };
    project: {
        id: string;
    };
    deployment: {
        id?: string | undefined;
        friendlyId?: string | undefined;
        imagePlatform?: string | undefined;
    };
    run: {
        id: string;
        isTest: boolean;
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        traceContext: Record<string, unknown>;
        friendlyId: string;
        attemptNumber: number;
        masterQueue: string;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: import("./runEngine.js").TaskRunExecutionStatus;
    };
    checkpoint: {
        type: import("./runEngine.js").CheckpointTypeEnum;
        id: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    };
    completedWaitpoints: {
        type: import("./runEngine.js").WaitpointType;
        id: string;
        friendlyId: string;
        completedAt: Date;
        outputIsError: boolean;
        idempotencyKey?: string | undefined;
        output?: string | undefined;
        outputType?: string | undefined;
        index?: number | undefined;
        completedByTaskRun?: {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        } | undefined;
        completedAfter?: Date | undefined;
        completedByBatch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    }[];
    dequeuedAt: Date;
    backgroundWorker: {
        id: string;
        version: string;
        friendlyId: string;
    };
    image?: string | undefined;
    placementTags?: {
        key: string;
        values?: string[] | undefined;
    }[] | undefined;
}>;
export type CheckpointServiceRestoreRequestBody = z.infer<typeof CheckpointServiceRestoreRequestBody>;
export type CheckpointServiceRestoreRequestBodyInput = z.input<typeof CheckpointServiceRestoreRequestBody>;
