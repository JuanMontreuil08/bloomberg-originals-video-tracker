import { z } from "zod";
export type Enum<T extends string> = {
    [K in T]: K;
};
export declare const RunMetadataUpdateOperation: z.ZodObject<{
    type: z.ZodLiteral<"update">;
    value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    value: Record<string, unknown>;
    type: "update";
}, {
    value: Record<string, unknown>;
    type: "update";
}>;
export type RunMetadataUpdateOperation = z.infer<typeof RunMetadataUpdateOperation>;
export declare const RunMetadataSetKeyOperation: z.ZodObject<{
    type: z.ZodLiteral<"set">;
    key: z.ZodString;
    value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
}, "strip", z.ZodTypeAny, {
    value: import("../../schemas/json.js").DeserializedJson;
    type: "set";
    key: string;
}, {
    value: import("../../schemas/json.js").DeserializedJson;
    type: "set";
    key: string;
}>;
export type RunMetadataSetKeyOperation = z.infer<typeof RunMetadataSetKeyOperation>;
export declare const RunMetadataDeleteKeyOperation: z.ZodObject<{
    type: z.ZodLiteral<"delete">;
    key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "delete";
    key: string;
}, {
    type: "delete";
    key: string;
}>;
export type RunMetadataDeleteKeyOperation = z.infer<typeof RunMetadataDeleteKeyOperation>;
export declare const RunMetadataAppendKeyOperation: z.ZodObject<{
    type: z.ZodLiteral<"append">;
    key: z.ZodString;
    value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
}, "strip", z.ZodTypeAny, {
    value: import("../../schemas/json.js").DeserializedJson;
    type: "append";
    key: string;
}, {
    value: import("../../schemas/json.js").DeserializedJson;
    type: "append";
    key: string;
}>;
export type RunMetadataAppendKeyOperation = z.infer<typeof RunMetadataAppendKeyOperation>;
export declare const RunMetadataRemoveFromKeyOperation: z.ZodObject<{
    type: z.ZodLiteral<"remove">;
    key: z.ZodString;
    value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
}, "strip", z.ZodTypeAny, {
    value: import("../../schemas/json.js").DeserializedJson;
    type: "remove";
    key: string;
}, {
    value: import("../../schemas/json.js").DeserializedJson;
    type: "remove";
    key: string;
}>;
export type RunMetadataRemoveFromKeyOperation = z.infer<typeof RunMetadataRemoveFromKeyOperation>;
export declare const RunMetadataIncrementKeyOperation: z.ZodObject<{
    type: z.ZodLiteral<"increment">;
    key: z.ZodString;
    value: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    value: number;
    type: "increment";
    key: string;
}, {
    value: number;
    type: "increment";
    key: string;
}>;
export type RunMetadataIncrementKeyOperation = z.infer<typeof RunMetadataIncrementKeyOperation>;
export declare const RunMetadataChangeOperation: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"update">;
    value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    value: Record<string, unknown>;
    type: "update";
}, {
    value: Record<string, unknown>;
    type: "update";
}>, z.ZodObject<{
    type: z.ZodLiteral<"set">;
    key: z.ZodString;
    value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
}, "strip", z.ZodTypeAny, {
    value: import("../../schemas/json.js").DeserializedJson;
    type: "set";
    key: string;
}, {
    value: import("../../schemas/json.js").DeserializedJson;
    type: "set";
    key: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"delete">;
    key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "delete";
    key: string;
}, {
    type: "delete";
    key: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"append">;
    key: z.ZodString;
    value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
}, "strip", z.ZodTypeAny, {
    value: import("../../schemas/json.js").DeserializedJson;
    type: "append";
    key: string;
}, {
    value: import("../../schemas/json.js").DeserializedJson;
    type: "append";
    key: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"remove">;
    key: z.ZodString;
    value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
}, "strip", z.ZodTypeAny, {
    value: import("../../schemas/json.js").DeserializedJson;
    type: "remove";
    key: string;
}, {
    value: import("../../schemas/json.js").DeserializedJson;
    type: "remove";
    key: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"increment">;
    key: z.ZodString;
    value: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    value: number;
    type: "increment";
    key: string;
}, {
    value: number;
    type: "increment";
    key: string;
}>]>;
export type RunMetadataChangeOperation = z.infer<typeof RunMetadataChangeOperation>;
export declare const FlushedRunMetadata: z.ZodObject<{
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>>>;
    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"update">;
        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        value: Record<string, unknown>;
        type: "update";
    }, {
        value: Record<string, unknown>;
        type: "update";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"set">;
        key: z.ZodString;
        value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
    }, "strip", z.ZodTypeAny, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    }, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"delete">;
        key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "delete";
        key: string;
    }, {
        type: "delete";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"append">;
        key: z.ZodString;
        value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
    }, "strip", z.ZodTypeAny, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    }, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"remove">;
        key: z.ZodString;
        value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
    }, "strip", z.ZodTypeAny, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    }, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"increment">;
        key: z.ZodString;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "increment";
        key: string;
    }, {
        value: number;
        type: "increment";
        key: string;
    }>]>, "many">>;
    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"update">;
        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        value: Record<string, unknown>;
        type: "update";
    }, {
        value: Record<string, unknown>;
        type: "update";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"set">;
        key: z.ZodString;
        value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
    }, "strip", z.ZodTypeAny, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    }, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"delete">;
        key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "delete";
        key: string;
    }, {
        type: "delete";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"append">;
        key: z.ZodString;
        value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
    }, "strip", z.ZodTypeAny, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    }, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"remove">;
        key: z.ZodString;
        value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
    }, "strip", z.ZodTypeAny, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    }, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"increment">;
        key: z.ZodString;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "increment";
        key: string;
    }, {
        value: number;
        type: "increment";
        key: string;
    }>]>, "many">>;
    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"update">;
        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        value: Record<string, unknown>;
        type: "update";
    }, {
        value: Record<string, unknown>;
        type: "update";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"set">;
        key: z.ZodString;
        value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
    }, "strip", z.ZodTypeAny, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    }, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"delete">;
        key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "delete";
        key: string;
    }, {
        type: "delete";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"append">;
        key: z.ZodString;
        value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
    }, "strip", z.ZodTypeAny, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    }, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"remove">;
        key: z.ZodString;
        value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
    }, "strip", z.ZodTypeAny, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    }, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"increment">;
        key: z.ZodString;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "increment";
        key: string;
    }, {
        value: number;
        type: "increment";
        key: string;
    }>]>, "many">>;
}, "strip", z.ZodTypeAny, {
    metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
    operations?: ({
        value: Record<string, unknown>;
        type: "update";
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    } | {
        type: "delete";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    } | {
        value: number;
        type: "increment";
        key: string;
    })[] | undefined;
    parentOperations?: ({
        value: Record<string, unknown>;
        type: "update";
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    } | {
        type: "delete";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    } | {
        value: number;
        type: "increment";
        key: string;
    })[] | undefined;
    rootOperations?: ({
        value: Record<string, unknown>;
        type: "update";
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    } | {
        type: "delete";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    } | {
        value: number;
        type: "increment";
        key: string;
    })[] | undefined;
}, {
    metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
    operations?: ({
        value: Record<string, unknown>;
        type: "update";
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    } | {
        type: "delete";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    } | {
        value: number;
        type: "increment";
        key: string;
    })[] | undefined;
    parentOperations?: ({
        value: Record<string, unknown>;
        type: "update";
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    } | {
        type: "delete";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    } | {
        value: number;
        type: "increment";
        key: string;
    })[] | undefined;
    rootOperations?: ({
        value: Record<string, unknown>;
        type: "update";
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    } | {
        type: "delete";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    } | {
        value: number;
        type: "increment";
        key: string;
    })[] | undefined;
}>;
export type FlushedRunMetadata = z.infer<typeof FlushedRunMetadata>;
export declare const MachineCpu: z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>;
export type MachineCpu = z.infer<typeof MachineCpu>;
export declare const MachineMemory: z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>;
export type MachineMemory = z.infer<typeof MachineMemory>;
export declare const MachinePresetName: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
export type MachinePresetName = z.infer<typeof MachinePresetName>;
export declare const MachineConfig: z.ZodObject<{
    cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
    memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
    preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
}, "strip", z.ZodTypeAny, {
    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
}, {
    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
}>;
export type MachineConfig = z.infer<typeof MachineConfig>;
export declare const MachinePreset: z.ZodObject<{
    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
    /** unit: vCPU */
    cpu: z.ZodNumber;
    /** unit: GB */
    memory: z.ZodNumber;
    centsPerMs: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    cpu: number;
    memory: number;
    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
    centsPerMs: number;
}, {
    cpu: number;
    memory: number;
    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
    centsPerMs: number;
}>;
export type MachinePreset = z.infer<typeof MachinePreset>;
export type MachinePresetResources = Pick<MachinePreset, "memory" | "cpu">;
export declare const TaskRunBuiltInError: z.ZodObject<{
    type: z.ZodLiteral<"BUILT_IN_ERROR">;
    name: z.ZodString;
    message: z.ZodString;
    stackTrace: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "BUILT_IN_ERROR";
    name: string;
    stackTrace: string;
}, {
    message: string;
    type: "BUILT_IN_ERROR";
    name: string;
    stackTrace: string;
}>;
export type TaskRunBuiltInError = z.infer<typeof TaskRunBuiltInError>;
export declare const TaskRunCustomErrorObject: z.ZodObject<{
    type: z.ZodLiteral<"CUSTOM_ERROR">;
    raw: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "CUSTOM_ERROR";
    raw: string;
}, {
    type: "CUSTOM_ERROR";
    raw: string;
}>;
export type TaskRunCustomErrorObject = z.infer<typeof TaskRunCustomErrorObject>;
export declare const TaskRunStringError: z.ZodObject<{
    type: z.ZodLiteral<"STRING_ERROR">;
    raw: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "STRING_ERROR";
    raw: string;
}, {
    type: "STRING_ERROR";
    raw: string;
}>;
export type TaskRunStringError = z.infer<typeof TaskRunStringError>;
export declare const TaskRunInternalError: z.ZodObject<{
    type: z.ZodLiteral<"INTERNAL_ERROR">;
    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
    message: z.ZodOptional<z.ZodString>;
    stackTrace: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
    type: "INTERNAL_ERROR";
    message?: string | undefined;
    stackTrace?: string | undefined;
}, {
    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
    type: "INTERNAL_ERROR";
    message?: string | undefined;
    stackTrace?: string | undefined;
}>;
export type TaskRunInternalError = z.infer<typeof TaskRunInternalError>;
export declare const TaskRunErrorCodes: z.Values<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
export type TaskRunErrorCodes = TaskRunInternalError["code"];
export declare const TaskRunError: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"BUILT_IN_ERROR">;
    name: z.ZodString;
    message: z.ZodString;
    stackTrace: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "BUILT_IN_ERROR";
    name: string;
    stackTrace: string;
}, {
    message: string;
    type: "BUILT_IN_ERROR";
    name: string;
    stackTrace: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"CUSTOM_ERROR">;
    raw: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "CUSTOM_ERROR";
    raw: string;
}, {
    type: "CUSTOM_ERROR";
    raw: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"STRING_ERROR">;
    raw: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "STRING_ERROR";
    raw: string;
}, {
    type: "STRING_ERROR";
    raw: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"INTERNAL_ERROR">;
    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
    message: z.ZodOptional<z.ZodString>;
    stackTrace: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
    type: "INTERNAL_ERROR";
    message?: string | undefined;
    stackTrace?: string | undefined;
}, {
    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
    type: "INTERNAL_ERROR";
    message?: string | undefined;
    stackTrace?: string | undefined;
}>]>;
export type TaskRunError = z.infer<typeof TaskRunError>;
export declare const TaskRun: z.ZodObject<{
    id: z.ZodString;
    payload: z.ZodString;
    payloadType: z.ZodString;
    tags: z.ZodArray<z.ZodString, "many">;
    isTest: z.ZodDefault<z.ZodBoolean>;
    createdAt: z.ZodDate;
    startedAt: z.ZodDefault<z.ZodDate>;
    idempotencyKey: z.ZodOptional<z.ZodString>;
    maxAttempts: z.ZodOptional<z.ZodNumber>;
    version: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>>>;
    maxDuration: z.ZodOptional<z.ZodNumber>;
    /** The priority of the run. Wih a value of 10 it will be dequeued before runs that were triggered 9 seconds before it (assuming they had no priority set).  */
    priority: z.ZodOptional<z.ZodNumber>;
    baseCostInCents: z.ZodOptional<z.ZodNumber>;
    parentTaskRunId: z.ZodOptional<z.ZodString>;
    rootTaskRunId: z.ZodOptional<z.ZodString>;
    durationMs: z.ZodOptional<z.ZodNumber>;
    costInCents: z.ZodOptional<z.ZodNumber>;
    region: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    payload: string;
    id: string;
    payloadType: string;
    tags: string[];
    isTest: boolean;
    createdAt: Date;
    startedAt: Date;
    metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
    idempotencyKey?: string | undefined;
    maxAttempts?: number | undefined;
    version?: string | undefined;
    maxDuration?: number | undefined;
    priority?: number | undefined;
    baseCostInCents?: number | undefined;
    parentTaskRunId?: string | undefined;
    rootTaskRunId?: string | undefined;
    durationMs?: number | undefined;
    costInCents?: number | undefined;
    region?: string | undefined;
}, {
    payload: string;
    id: string;
    payloadType: string;
    tags: string[];
    createdAt: Date;
    metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
    isTest?: boolean | undefined;
    startedAt?: Date | undefined;
    idempotencyKey?: string | undefined;
    maxAttempts?: number | undefined;
    version?: string | undefined;
    maxDuration?: number | undefined;
    priority?: number | undefined;
    baseCostInCents?: number | undefined;
    parentTaskRunId?: string | undefined;
    rootTaskRunId?: string | undefined;
    durationMs?: number | undefined;
    costInCents?: number | undefined;
    region?: string | undefined;
}>;
export type TaskRun = z.infer<typeof TaskRun>;
export declare const GitMeta: z.ZodObject<{
    provider: z.ZodOptional<z.ZodString>;
    source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
    ghUsername: z.ZodOptional<z.ZodString>;
    ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
    commitAuthorName: z.ZodOptional<z.ZodString>;
    commitMessage: z.ZodOptional<z.ZodString>;
    commitRef: z.ZodOptional<z.ZodString>;
    commitSha: z.ZodOptional<z.ZodString>;
    dirty: z.ZodOptional<z.ZodBoolean>;
    remoteUrl: z.ZodOptional<z.ZodString>;
    pullRequestNumber: z.ZodOptional<z.ZodNumber>;
    pullRequestTitle: z.ZodOptional<z.ZodString>;
    pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
}, "strip", z.ZodTypeAny, {
    dirty?: boolean | undefined;
    source?: "trigger_github_app" | "github_actions" | "local" | undefined;
    provider?: string | undefined;
    ghUsername?: string | undefined;
    ghUserAvatarUrl?: string | undefined;
    commitAuthorName?: string | undefined;
    commitMessage?: string | undefined;
    commitRef?: string | undefined;
    commitSha?: string | undefined;
    remoteUrl?: string | undefined;
    pullRequestNumber?: number | undefined;
    pullRequestTitle?: string | undefined;
    pullRequestState?: "open" | "closed" | "merged" | undefined;
}, {
    dirty?: boolean | undefined;
    source?: "trigger_github_app" | "github_actions" | "local" | undefined;
    provider?: string | undefined;
    ghUsername?: string | undefined;
    ghUserAvatarUrl?: string | undefined;
    commitAuthorName?: string | undefined;
    commitMessage?: string | undefined;
    commitRef?: string | undefined;
    commitSha?: string | undefined;
    remoteUrl?: string | undefined;
    pullRequestNumber?: number | undefined;
    pullRequestTitle?: string | undefined;
    pullRequestState?: "open" | "closed" | "merged" | undefined;
}>;
export type GitMeta = z.infer<typeof GitMeta>;
export declare const TaskRunExecutionTask: z.ZodObject<{
    id: z.ZodString;
    filePath: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    filePath: string;
}, {
    id: string;
    filePath: string;
}>;
export type TaskRunExecutionTask = z.infer<typeof TaskRunExecutionTask>;
export declare const TaskRunExecutionAttempt: z.ZodObject<{
    number: z.ZodNumber;
    startedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    number: number;
    startedAt: Date;
}, {
    number: number;
    startedAt: Date;
}>;
export type TaskRunExecutionAttempt = z.infer<typeof TaskRunExecutionAttempt>;
export declare const TaskRunExecutionEnvironment: z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodString;
    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
    branchName: z.ZodOptional<z.ZodString>;
    git: z.ZodOptional<z.ZodObject<{
        provider: z.ZodOptional<z.ZodString>;
        source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
        ghUsername: z.ZodOptional<z.ZodString>;
        ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
        commitAuthorName: z.ZodOptional<z.ZodString>;
        commitMessage: z.ZodOptional<z.ZodString>;
        commitRef: z.ZodOptional<z.ZodString>;
        commitSha: z.ZodOptional<z.ZodString>;
        dirty: z.ZodOptional<z.ZodBoolean>;
        remoteUrl: z.ZodOptional<z.ZodString>;
        pullRequestNumber: z.ZodOptional<z.ZodNumber>;
        pullRequestTitle: z.ZodOptional<z.ZodString>;
        pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
    }, "strip", z.ZodTypeAny, {
        dirty?: boolean | undefined;
        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
        provider?: string | undefined;
        ghUsername?: string | undefined;
        ghUserAvatarUrl?: string | undefined;
        commitAuthorName?: string | undefined;
        commitMessage?: string | undefined;
        commitRef?: string | undefined;
        commitSha?: string | undefined;
        remoteUrl?: string | undefined;
        pullRequestNumber?: number | undefined;
        pullRequestTitle?: string | undefined;
        pullRequestState?: "open" | "closed" | "merged" | undefined;
    }, {
        dirty?: boolean | undefined;
        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
        provider?: string | undefined;
        ghUsername?: string | undefined;
        ghUserAvatarUrl?: string | undefined;
        commitAuthorName?: string | undefined;
        commitMessage?: string | undefined;
        commitRef?: string | undefined;
        commitSha?: string | undefined;
        remoteUrl?: string | undefined;
        pullRequestNumber?: number | undefined;
        pullRequestTitle?: string | undefined;
        pullRequestState?: "open" | "closed" | "merged" | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
    id: string;
    slug: string;
    branchName?: string | undefined;
    git?: {
        dirty?: boolean | undefined;
        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
        provider?: string | undefined;
        ghUsername?: string | undefined;
        ghUserAvatarUrl?: string | undefined;
        commitAuthorName?: string | undefined;
        commitMessage?: string | undefined;
        commitRef?: string | undefined;
        commitSha?: string | undefined;
        remoteUrl?: string | undefined;
        pullRequestNumber?: number | undefined;
        pullRequestTitle?: string | undefined;
        pullRequestState?: "open" | "closed" | "merged" | undefined;
    } | undefined;
}, {
    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
    id: string;
    slug: string;
    branchName?: string | undefined;
    git?: {
        dirty?: boolean | undefined;
        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
        provider?: string | undefined;
        ghUsername?: string | undefined;
        ghUserAvatarUrl?: string | undefined;
        commitAuthorName?: string | undefined;
        commitMessage?: string | undefined;
        commitRef?: string | undefined;
        commitSha?: string | undefined;
        remoteUrl?: string | undefined;
        pullRequestNumber?: number | undefined;
        pullRequestTitle?: string | undefined;
        pullRequestState?: "open" | "closed" | "merged" | undefined;
    } | undefined;
}>;
export type TaskRunExecutionEnvironment = z.infer<typeof TaskRunExecutionEnvironment>;
export declare const TaskRunExecutionOrganization: z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodString;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    slug: string;
}, {
    name: string;
    id: string;
    slug: string;
}>;
export type TaskRunExecutionOrganization = z.infer<typeof TaskRunExecutionOrganization>;
export declare const TaskRunExecutionProject: z.ZodObject<{
    id: z.ZodString;
    ref: z.ZodString;
    slug: z.ZodString;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    slug: string;
    ref: string;
}, {
    name: string;
    id: string;
    slug: string;
    ref: string;
}>;
export type TaskRunExecutionProject = z.infer<typeof TaskRunExecutionProject>;
export declare const TaskRunExecutionQueue: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
}, {
    name: string;
    id: string;
}>;
export type TaskRunExecutionQueue = z.infer<typeof TaskRunExecutionQueue>;
export declare const TaskRunExecutionBatch: z.ZodObject<{
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
export declare const TaskRunExecutionDeployment: z.ZodObject<{
    id: z.ZodString;
    shortCode: z.ZodString;
    version: z.ZodString;
    runtime: z.ZodString;
    runtimeVersion: z.ZodString;
    git: z.ZodOptional<z.ZodObject<{
        provider: z.ZodOptional<z.ZodString>;
        source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
        ghUsername: z.ZodOptional<z.ZodString>;
        ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
        commitAuthorName: z.ZodOptional<z.ZodString>;
        commitMessage: z.ZodOptional<z.ZodString>;
        commitRef: z.ZodOptional<z.ZodString>;
        commitSha: z.ZodOptional<z.ZodString>;
        dirty: z.ZodOptional<z.ZodBoolean>;
        remoteUrl: z.ZodOptional<z.ZodString>;
        pullRequestNumber: z.ZodOptional<z.ZodNumber>;
        pullRequestTitle: z.ZodOptional<z.ZodString>;
        pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
    }, "strip", z.ZodTypeAny, {
        dirty?: boolean | undefined;
        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
        provider?: string | undefined;
        ghUsername?: string | undefined;
        ghUserAvatarUrl?: string | undefined;
        commitAuthorName?: string | undefined;
        commitMessage?: string | undefined;
        commitRef?: string | undefined;
        commitSha?: string | undefined;
        remoteUrl?: string | undefined;
        pullRequestNumber?: number | undefined;
        pullRequestTitle?: string | undefined;
        pullRequestState?: "open" | "closed" | "merged" | undefined;
    }, {
        dirty?: boolean | undefined;
        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
        provider?: string | undefined;
        ghUsername?: string | undefined;
        ghUserAvatarUrl?: string | undefined;
        commitAuthorName?: string | undefined;
        commitMessage?: string | undefined;
        commitRef?: string | undefined;
        commitSha?: string | undefined;
        remoteUrl?: string | undefined;
        pullRequestNumber?: number | undefined;
        pullRequestTitle?: string | undefined;
        pullRequestState?: "open" | "closed" | "merged" | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    version: string;
    shortCode: string;
    runtime: string;
    runtimeVersion: string;
    git?: {
        dirty?: boolean | undefined;
        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
        provider?: string | undefined;
        ghUsername?: string | undefined;
        ghUserAvatarUrl?: string | undefined;
        commitAuthorName?: string | undefined;
        commitMessage?: string | undefined;
        commitRef?: string | undefined;
        commitSha?: string | undefined;
        remoteUrl?: string | undefined;
        pullRequestNumber?: number | undefined;
        pullRequestTitle?: string | undefined;
        pullRequestState?: "open" | "closed" | "merged" | undefined;
    } | undefined;
}, {
    id: string;
    version: string;
    shortCode: string;
    runtime: string;
    runtimeVersion: string;
    git?: {
        dirty?: boolean | undefined;
        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
        provider?: string | undefined;
        ghUsername?: string | undefined;
        ghUserAvatarUrl?: string | undefined;
        commitAuthorName?: string | undefined;
        commitMessage?: string | undefined;
        commitRef?: string | undefined;
        commitSha?: string | undefined;
        remoteUrl?: string | undefined;
        pullRequestNumber?: number | undefined;
        pullRequestTitle?: string | undefined;
        pullRequestState?: "open" | "closed" | "merged" | undefined;
    } | undefined;
}>;
export type TaskRunExecutionDeployment = z.infer<typeof TaskRunExecutionDeployment>;
export declare const StaticTaskRunExecution: z.ZodObject<{
    task: z.ZodObject<{
        id: z.ZodString;
        filePath: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        id: z.ZodString;
        filePath: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        id: z.ZodString;
        filePath: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>;
    queue: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
    }, {
        name: string;
        id: string;
    }>;
    environment: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
        branchName: z.ZodOptional<z.ZodString>;
        git: z.ZodOptional<z.ZodObject<{
            provider: z.ZodOptional<z.ZodString>;
            source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
            ghUsername: z.ZodOptional<z.ZodString>;
            ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
            commitAuthorName: z.ZodOptional<z.ZodString>;
            commitMessage: z.ZodOptional<z.ZodString>;
            commitRef: z.ZodOptional<z.ZodString>;
            commitSha: z.ZodOptional<z.ZodString>;
            dirty: z.ZodOptional<z.ZodBoolean>;
            remoteUrl: z.ZodOptional<z.ZodString>;
            pullRequestNumber: z.ZodOptional<z.ZodNumber>;
            pullRequestTitle: z.ZodOptional<z.ZodString>;
            pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
        }, "strip", z.ZodTypeAny, {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        }, {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    }, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    }>;
    organization: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
    }, {
        name: string;
        id: string;
        slug: string;
    }>;
    project: z.ZodObject<{
        id: z.ZodString;
        ref: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }>;
    machine: z.ZodObject<{
        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
        /** unit: vCPU */
        cpu: z.ZodNumber;
        /** unit: GB */
        memory: z.ZodNumber;
        centsPerMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    }, {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    }>;
    batch: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>>;
    deployment: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        shortCode: z.ZodString;
        version: z.ZodString;
        runtime: z.ZodString;
        runtimeVersion: z.ZodString;
        git: z.ZodOptional<z.ZodObject<{
            provider: z.ZodOptional<z.ZodString>;
            source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
            ghUsername: z.ZodOptional<z.ZodString>;
            ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
            commitAuthorName: z.ZodOptional<z.ZodString>;
            commitMessage: z.ZodOptional<z.ZodString>;
            commitRef: z.ZodOptional<z.ZodString>;
            commitSha: z.ZodOptional<z.ZodString>;
            dirty: z.ZodOptional<z.ZodBoolean>;
            remoteUrl: z.ZodOptional<z.ZodString>;
            pullRequestNumber: z.ZodOptional<z.ZodNumber>;
            pullRequestTitle: z.ZodOptional<z.ZodString>;
            pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
        }, "strip", z.ZodTypeAny, {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        }, {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        version: string;
        shortCode: string;
        runtime: string;
        runtimeVersion: string;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    }, {
        id: string;
        version: string;
        shortCode: string;
        runtime: string;
        runtimeVersion: string;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    task: {
        id: string;
        filePath: string;
    } & {
        [k: string]: unknown;
    };
    queue: {
        name: string;
        id: string;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    machine: {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    };
    batch?: {
        id: string;
    } | undefined;
    deployment?: {
        id: string;
        version: string;
        shortCode: string;
        runtime: string;
        runtimeVersion: string;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    } | undefined;
}, {
    task: {
        id: string;
        filePath: string;
    } & {
        [k: string]: unknown;
    };
    queue: {
        name: string;
        id: string;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    machine: {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    };
    batch?: {
        id: string;
    } | undefined;
    deployment?: {
        id: string;
        version: string;
        shortCode: string;
        runtime: string;
        runtimeVersion: string;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    } | undefined;
}>;
export type StaticTaskRunExecution = z.infer<typeof StaticTaskRunExecution>;
export declare const TaskRunExecution: z.ZodObject<{
    task: z.ZodObject<{
        id: z.ZodString;
        filePath: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        id: z.ZodString;
        filePath: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        id: z.ZodString;
        filePath: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>;
    queue: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
    }, {
        name: string;
        id: string;
    }>;
    environment: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
        branchName: z.ZodOptional<z.ZodString>;
        git: z.ZodOptional<z.ZodObject<{
            provider: z.ZodOptional<z.ZodString>;
            source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
            ghUsername: z.ZodOptional<z.ZodString>;
            ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
            commitAuthorName: z.ZodOptional<z.ZodString>;
            commitMessage: z.ZodOptional<z.ZodString>;
            commitRef: z.ZodOptional<z.ZodString>;
            commitSha: z.ZodOptional<z.ZodString>;
            dirty: z.ZodOptional<z.ZodBoolean>;
            remoteUrl: z.ZodOptional<z.ZodString>;
            pullRequestNumber: z.ZodOptional<z.ZodNumber>;
            pullRequestTitle: z.ZodOptional<z.ZodString>;
            pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
        }, "strip", z.ZodTypeAny, {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        }, {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    }, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    }>;
    organization: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
    }, {
        name: string;
        id: string;
        slug: string;
    }>;
    project: z.ZodObject<{
        id: z.ZodString;
        ref: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }>;
    machine: z.ZodObject<{
        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
        /** unit: vCPU */
        cpu: z.ZodNumber;
        /** unit: GB */
        memory: z.ZodNumber;
        centsPerMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    }, {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    }>;
    batch: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>>;
    deployment: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        shortCode: z.ZodString;
        version: z.ZodString;
        runtime: z.ZodString;
        runtimeVersion: z.ZodString;
        git: z.ZodOptional<z.ZodObject<{
            provider: z.ZodOptional<z.ZodString>;
            source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
            ghUsername: z.ZodOptional<z.ZodString>;
            ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
            commitAuthorName: z.ZodOptional<z.ZodString>;
            commitMessage: z.ZodOptional<z.ZodString>;
            commitRef: z.ZodOptional<z.ZodString>;
            commitSha: z.ZodOptional<z.ZodString>;
            dirty: z.ZodOptional<z.ZodBoolean>;
            remoteUrl: z.ZodOptional<z.ZodString>;
            pullRequestNumber: z.ZodOptional<z.ZodNumber>;
            pullRequestTitle: z.ZodOptional<z.ZodString>;
            pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
        }, "strip", z.ZodTypeAny, {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        }, {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        version: string;
        shortCode: string;
        runtime: string;
        runtimeVersion: string;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    }, {
        id: string;
        version: string;
        shortCode: string;
        runtime: string;
        runtimeVersion: string;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    }>>;
    attempt: z.ZodObject<{
        number: z.ZodNumber;
        startedAt: z.ZodDate;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        number: z.ZodNumber;
        startedAt: z.ZodDate;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        number: z.ZodNumber;
        startedAt: z.ZodDate;
    }, z.ZodTypeAny, "passthrough">>;
    run: z.ZodIntersection<z.ZodObject<{
        id: z.ZodString;
        payload: z.ZodString;
        payloadType: z.ZodString;
        tags: z.ZodArray<z.ZodString, "many">;
        isTest: z.ZodDefault<z.ZodBoolean>;
        createdAt: z.ZodDate;
        startedAt: z.ZodDefault<z.ZodDate>;
        idempotencyKey: z.ZodOptional<z.ZodString>;
        maxAttempts: z.ZodOptional<z.ZodNumber>;
        version: z.ZodOptional<z.ZodString>;
        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>>>;
        maxDuration: z.ZodOptional<z.ZodNumber>;
        /** The priority of the run. Wih a value of 10 it will be dequeued before runs that were triggered 9 seconds before it (assuming they had no priority set).  */
        priority: z.ZodOptional<z.ZodNumber>;
        baseCostInCents: z.ZodOptional<z.ZodNumber>;
        parentTaskRunId: z.ZodOptional<z.ZodString>;
        rootTaskRunId: z.ZodOptional<z.ZodString>;
        durationMs: z.ZodOptional<z.ZodNumber>;
        costInCents: z.ZodOptional<z.ZodNumber>;
        region: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        payload: string;
        id: string;
        payloadType: string;
        tags: string[];
        isTest: boolean;
        createdAt: Date;
        startedAt: Date;
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
        priority?: number | undefined;
        baseCostInCents?: number | undefined;
        parentTaskRunId?: string | undefined;
        rootTaskRunId?: string | undefined;
        durationMs?: number | undefined;
        costInCents?: number | undefined;
        region?: string | undefined;
    }, {
        payload: string;
        id: string;
        payloadType: string;
        tags: string[];
        createdAt: Date;
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        isTest?: boolean | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
        priority?: number | undefined;
        baseCostInCents?: number | undefined;
        parentTaskRunId?: string | undefined;
        rootTaskRunId?: string | undefined;
        durationMs?: number | undefined;
        costInCents?: number | undefined;
        region?: string | undefined;
    }>, z.ZodObject<{
        traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }, "strip", z.ZodTypeAny, {
        traceContext?: Record<string, unknown> | undefined;
    }, {
        traceContext?: Record<string, unknown> | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    task: {
        id: string;
        filePath: string;
    } & {
        [k: string]: unknown;
    };
    queue: {
        name: string;
        id: string;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    machine: {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    };
    attempt: {
        number: number;
        startedAt: Date;
    } & {
        [k: string]: unknown;
    };
    run: {
        payload: string;
        id: string;
        payloadType: string;
        tags: string[];
        isTest: boolean;
        createdAt: Date;
        startedAt: Date;
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
        priority?: number | undefined;
        baseCostInCents?: number | undefined;
        parentTaskRunId?: string | undefined;
        rootTaskRunId?: string | undefined;
        durationMs?: number | undefined;
        costInCents?: number | undefined;
        region?: string | undefined;
    } & {
        traceContext?: Record<string, unknown> | undefined;
    };
    batch?: {
        id: string;
    } | undefined;
    deployment?: {
        id: string;
        version: string;
        shortCode: string;
        runtime: string;
        runtimeVersion: string;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    } | undefined;
}, {
    task: {
        id: string;
        filePath: string;
    } & {
        [k: string]: unknown;
    };
    queue: {
        name: string;
        id: string;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    machine: {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    };
    attempt: {
        number: number;
        startedAt: Date;
    } & {
        [k: string]: unknown;
    };
    run: {
        payload: string;
        id: string;
        payloadType: string;
        tags: string[];
        createdAt: Date;
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        isTest?: boolean | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
        priority?: number | undefined;
        baseCostInCents?: number | undefined;
        parentTaskRunId?: string | undefined;
        rootTaskRunId?: string | undefined;
        durationMs?: number | undefined;
        costInCents?: number | undefined;
        region?: string | undefined;
    } & {
        traceContext?: Record<string, unknown> | undefined;
    };
    batch?: {
        id: string;
    } | undefined;
    deployment?: {
        id: string;
        version: string;
        shortCode: string;
        runtime: string;
        runtimeVersion: string;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    } | undefined;
}>;
export type TaskRunExecution = z.infer<typeof TaskRunExecution>;
export declare const V3TaskRunExecutionTask: z.ZodObject<{
    id: z.ZodString;
    filePath: z.ZodString;
    exportName: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    filePath: string;
    exportName?: string | undefined;
}, {
    id: string;
    filePath: string;
    exportName?: string | undefined;
}>;
export type V3TaskRunExecutionTask = z.infer<typeof V3TaskRunExecutionTask>;
export declare const V3TaskRunExecutionAttempt: z.ZodObject<{
    number: z.ZodNumber;
    startedAt: z.ZodDate;
    id: z.ZodString;
    backgroundWorkerId: z.ZodString;
    backgroundWorkerTaskId: z.ZodString;
    status: z.ZodString;
}, "strip", z.ZodTypeAny, {
    number: number;
    status: string;
    id: string;
    startedAt: Date;
    backgroundWorkerId: string;
    backgroundWorkerTaskId: string;
}, {
    number: number;
    status: string;
    id: string;
    startedAt: Date;
    backgroundWorkerId: string;
    backgroundWorkerTaskId: string;
}>;
export type V3TaskRunExecutionAttempt = z.infer<typeof V3TaskRunExecutionAttempt>;
export declare const V3TaskRun: z.ZodObject<{
    id: z.ZodString;
    payload: z.ZodString;
    payloadType: z.ZodString;
    tags: z.ZodArray<z.ZodString, "many">;
    isTest: z.ZodDefault<z.ZodBoolean>;
    createdAt: z.ZodDate;
    startedAt: z.ZodDefault<z.ZodDate>;
    idempotencyKey: z.ZodOptional<z.ZodString>;
    maxAttempts: z.ZodOptional<z.ZodNumber>;
    version: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>>>;
    maxDuration: z.ZodOptional<z.ZodNumber>;
    context: z.ZodUnknown;
    durationMs: z.ZodNumber;
    costInCents: z.ZodNumber;
    baseCostInCents: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    payload: string;
    id: string;
    payloadType: string;
    tags: string[];
    isTest: boolean;
    createdAt: Date;
    startedAt: Date;
    baseCostInCents: number;
    durationMs: number;
    costInCents: number;
    context?: unknown;
    metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
    idempotencyKey?: string | undefined;
    maxAttempts?: number | undefined;
    version?: string | undefined;
    maxDuration?: number | undefined;
}, {
    payload: string;
    id: string;
    payloadType: string;
    tags: string[];
    createdAt: Date;
    baseCostInCents: number;
    durationMs: number;
    costInCents: number;
    context?: unknown;
    metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
    isTest?: boolean | undefined;
    startedAt?: Date | undefined;
    idempotencyKey?: string | undefined;
    maxAttempts?: number | undefined;
    version?: string | undefined;
    maxDuration?: number | undefined;
}>;
export type V3TaskRun = z.infer<typeof V3TaskRun>;
export declare const V3TaskRunExecution: z.ZodObject<{
    task: z.ZodObject<{
        id: z.ZodString;
        filePath: z.ZodString;
        exportName: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        filePath: string;
        exportName?: string | undefined;
    }, {
        id: string;
        filePath: string;
        exportName?: string | undefined;
    }>;
    attempt: z.ZodObject<{
        number: z.ZodNumber;
        startedAt: z.ZodDate;
        id: z.ZodString;
        backgroundWorkerId: z.ZodString;
        backgroundWorkerTaskId: z.ZodString;
        status: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
        backgroundWorkerId: string;
        backgroundWorkerTaskId: string;
    }, {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
        backgroundWorkerId: string;
        backgroundWorkerTaskId: string;
    }>;
    run: z.ZodIntersection<z.ZodObject<{
        id: z.ZodString;
        payload: z.ZodString;
        payloadType: z.ZodString;
        tags: z.ZodArray<z.ZodString, "many">;
        isTest: z.ZodDefault<z.ZodBoolean>;
        createdAt: z.ZodDate;
        startedAt: z.ZodDefault<z.ZodDate>;
        idempotencyKey: z.ZodOptional<z.ZodString>;
        maxAttempts: z.ZodOptional<z.ZodNumber>;
        version: z.ZodOptional<z.ZodString>;
        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>>>;
        maxDuration: z.ZodOptional<z.ZodNumber>;
        context: z.ZodUnknown;
        durationMs: z.ZodNumber;
        costInCents: z.ZodNumber;
        baseCostInCents: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        payload: string;
        id: string;
        payloadType: string;
        tags: string[];
        isTest: boolean;
        createdAt: Date;
        startedAt: Date;
        baseCostInCents: number;
        durationMs: number;
        costInCents: number;
        context?: unknown;
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
    }, {
        payload: string;
        id: string;
        payloadType: string;
        tags: string[];
        createdAt: Date;
        baseCostInCents: number;
        durationMs: number;
        costInCents: number;
        context?: unknown;
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        isTest?: boolean | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
    }>, z.ZodObject<{
        traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }, "strip", z.ZodTypeAny, {
        traceContext?: Record<string, unknown> | undefined;
    }, {
        traceContext?: Record<string, unknown> | undefined;
    }>>;
    queue: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
    }, {
        name: string;
        id: string;
    }>;
    environment: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
        branchName: z.ZodOptional<z.ZodString>;
        git: z.ZodOptional<z.ZodObject<{
            provider: z.ZodOptional<z.ZodString>;
            source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
            ghUsername: z.ZodOptional<z.ZodString>;
            ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
            commitAuthorName: z.ZodOptional<z.ZodString>;
            commitMessage: z.ZodOptional<z.ZodString>;
            commitRef: z.ZodOptional<z.ZodString>;
            commitSha: z.ZodOptional<z.ZodString>;
            dirty: z.ZodOptional<z.ZodBoolean>;
            remoteUrl: z.ZodOptional<z.ZodString>;
            pullRequestNumber: z.ZodOptional<z.ZodNumber>;
            pullRequestTitle: z.ZodOptional<z.ZodString>;
            pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
        }, "strip", z.ZodTypeAny, {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        }, {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    }, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    }>;
    organization: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
    }, {
        name: string;
        id: string;
        slug: string;
    }>;
    project: z.ZodObject<{
        id: z.ZodString;
        ref: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }>;
    machine: z.ZodObject<{
        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
        /** unit: vCPU */
        cpu: z.ZodNumber;
        /** unit: GB */
        memory: z.ZodNumber;
        centsPerMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    }, {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    }>;
    batch: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    task: {
        id: string;
        filePath: string;
        exportName?: string | undefined;
    };
    queue: {
        name: string;
        id: string;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    machine: {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    };
    attempt: {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
        backgroundWorkerId: string;
        backgroundWorkerTaskId: string;
    };
    run: {
        payload: string;
        id: string;
        payloadType: string;
        tags: string[];
        isTest: boolean;
        createdAt: Date;
        startedAt: Date;
        baseCostInCents: number;
        durationMs: number;
        costInCents: number;
        context?: unknown;
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
    } & {
        traceContext?: Record<string, unknown> | undefined;
    };
    batch?: {
        id: string;
    } | undefined;
}, {
    task: {
        id: string;
        filePath: string;
        exportName?: string | undefined;
    };
    queue: {
        name: string;
        id: string;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    machine: {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    };
    attempt: {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
        backgroundWorkerId: string;
        backgroundWorkerTaskId: string;
    };
    run: {
        payload: string;
        id: string;
        payloadType: string;
        tags: string[];
        createdAt: Date;
        baseCostInCents: number;
        durationMs: number;
        costInCents: number;
        context?: unknown;
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        isTest?: boolean | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
    } & {
        traceContext?: Record<string, unknown> | undefined;
    };
    batch?: {
        id: string;
    } | undefined;
}>;
export type V3TaskRunExecution = z.infer<typeof V3TaskRunExecution>;
export declare const TaskRunContext: z.ZodObject<{
    task: z.ZodObject<{
        id: z.ZodString;
        filePath: z.ZodString;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        id: z.ZodString;
        filePath: z.ZodString;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        id: z.ZodString;
        filePath: z.ZodString;
    }, z.ZodTypeAny, "passthrough">>;
    queue: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
    }, {
        name: string;
        id: string;
    }>;
    environment: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
        branchName: z.ZodOptional<z.ZodString>;
        git: z.ZodOptional<z.ZodObject<{
            provider: z.ZodOptional<z.ZodString>;
            source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
            ghUsername: z.ZodOptional<z.ZodString>;
            ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
            commitAuthorName: z.ZodOptional<z.ZodString>;
            commitMessage: z.ZodOptional<z.ZodString>;
            commitRef: z.ZodOptional<z.ZodString>;
            commitSha: z.ZodOptional<z.ZodString>;
            dirty: z.ZodOptional<z.ZodBoolean>;
            remoteUrl: z.ZodOptional<z.ZodString>;
            pullRequestNumber: z.ZodOptional<z.ZodNumber>;
            pullRequestTitle: z.ZodOptional<z.ZodString>;
            pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
        }, "strip", z.ZodTypeAny, {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        }, {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    }, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    }>;
    organization: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
    }, {
        name: string;
        id: string;
        slug: string;
    }>;
    project: z.ZodObject<{
        id: z.ZodString;
        ref: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }>;
    machine: z.ZodObject<{
        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
        /** unit: vCPU */
        cpu: z.ZodNumber;
        /** unit: GB */
        memory: z.ZodNumber;
        centsPerMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    }, {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    }>;
    batch: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>>;
    deployment: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        shortCode: z.ZodString;
        version: z.ZodString;
        runtime: z.ZodString;
        runtimeVersion: z.ZodString;
        git: z.ZodOptional<z.ZodObject<{
            provider: z.ZodOptional<z.ZodString>;
            source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
            ghUsername: z.ZodOptional<z.ZodString>;
            ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
            commitAuthorName: z.ZodOptional<z.ZodString>;
            commitMessage: z.ZodOptional<z.ZodString>;
            commitRef: z.ZodOptional<z.ZodString>;
            commitSha: z.ZodOptional<z.ZodString>;
            dirty: z.ZodOptional<z.ZodBoolean>;
            remoteUrl: z.ZodOptional<z.ZodString>;
            pullRequestNumber: z.ZodOptional<z.ZodNumber>;
            pullRequestTitle: z.ZodOptional<z.ZodString>;
            pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
        }, "strip", z.ZodTypeAny, {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        }, {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        version: string;
        shortCode: string;
        runtime: string;
        runtimeVersion: string;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    }, {
        id: string;
        version: string;
        shortCode: string;
        runtime: string;
        runtimeVersion: string;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    }>>;
    attempt: z.ZodObject<{
        number: z.ZodNumber;
        startedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        number: number;
        startedAt: Date;
    }, {
        number: number;
        startedAt: Date;
    }>;
    run: z.ZodObject<Omit<{
        id: z.ZodString;
        payload: z.ZodString;
        payloadType: z.ZodString;
        tags: z.ZodArray<z.ZodString, "many">;
        isTest: z.ZodDefault<z.ZodBoolean>;
        createdAt: z.ZodDate;
        startedAt: z.ZodDefault<z.ZodDate>;
        idempotencyKey: z.ZodOptional<z.ZodString>;
        maxAttempts: z.ZodOptional<z.ZodNumber>;
        version: z.ZodOptional<z.ZodString>;
        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>>>;
        maxDuration: z.ZodOptional<z.ZodNumber>;
        /** The priority of the run. Wih a value of 10 it will be dequeued before runs that were triggered 9 seconds before it (assuming they had no priority set).  */
        priority: z.ZodOptional<z.ZodNumber>;
        baseCostInCents: z.ZodOptional<z.ZodNumber>;
        parentTaskRunId: z.ZodOptional<z.ZodString>;
        rootTaskRunId: z.ZodOptional<z.ZodString>;
        durationMs: z.ZodOptional<z.ZodNumber>;
        costInCents: z.ZodOptional<z.ZodNumber>;
        region: z.ZodOptional<z.ZodString>;
    }, "payload" | "metadata" | "payloadType" | "durationMs" | "costInCents">, "strip", z.ZodTypeAny, {
        id: string;
        tags: string[];
        isTest: boolean;
        createdAt: Date;
        startedAt: Date;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
        priority?: number | undefined;
        baseCostInCents?: number | undefined;
        parentTaskRunId?: string | undefined;
        rootTaskRunId?: string | undefined;
        region?: string | undefined;
    }, {
        id: string;
        tags: string[];
        createdAt: Date;
        isTest?: boolean | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
        priority?: number | undefined;
        baseCostInCents?: number | undefined;
        parentTaskRunId?: string | undefined;
        rootTaskRunId?: string | undefined;
        region?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    task: {
        id: string;
        filePath: string;
    } & {
        [k: string]: unknown;
    };
    queue: {
        name: string;
        id: string;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    machine: {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    };
    attempt: {
        number: number;
        startedAt: Date;
    };
    run: {
        id: string;
        tags: string[];
        isTest: boolean;
        createdAt: Date;
        startedAt: Date;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
        priority?: number | undefined;
        baseCostInCents?: number | undefined;
        parentTaskRunId?: string | undefined;
        rootTaskRunId?: string | undefined;
        region?: string | undefined;
    };
    batch?: {
        id: string;
    } | undefined;
    deployment?: {
        id: string;
        version: string;
        shortCode: string;
        runtime: string;
        runtimeVersion: string;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    } | undefined;
}, {
    task: {
        id: string;
        filePath: string;
    } & {
        [k: string]: unknown;
    };
    queue: {
        name: string;
        id: string;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    machine: {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    };
    attempt: {
        number: number;
        startedAt: Date;
    };
    run: {
        id: string;
        tags: string[];
        createdAt: Date;
        isTest?: boolean | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
        priority?: number | undefined;
        baseCostInCents?: number | undefined;
        parentTaskRunId?: string | undefined;
        rootTaskRunId?: string | undefined;
        region?: string | undefined;
    };
    batch?: {
        id: string;
    } | undefined;
    deployment?: {
        id: string;
        version: string;
        shortCode: string;
        runtime: string;
        runtimeVersion: string;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    } | undefined;
}>;
export type TaskRunContext = z.infer<typeof TaskRunContext>;
export declare const V3TaskRunExecutionEnvironment: z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodString;
    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
}, "strip", z.ZodTypeAny, {
    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
    id: string;
    slug: string;
}, {
    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
    id: string;
    slug: string;
}>;
export type V3TaskRunExecutionEnvironment = z.infer<typeof V3TaskRunExecutionEnvironment>;
export declare const V3TaskRunContext: z.ZodObject<{
    attempt: z.ZodObject<Omit<{
        number: z.ZodNumber;
        startedAt: z.ZodDate;
        id: z.ZodString;
        backgroundWorkerId: z.ZodString;
        backgroundWorkerTaskId: z.ZodString;
        status: z.ZodString;
    }, "backgroundWorkerId" | "backgroundWorkerTaskId">, "strip", z.ZodTypeAny, {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
    }, {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
    }>;
    run: z.ZodObject<Omit<{
        id: z.ZodString;
        payload: z.ZodString;
        payloadType: z.ZodString;
        tags: z.ZodArray<z.ZodString, "many">;
        isTest: z.ZodDefault<z.ZodBoolean>;
        createdAt: z.ZodDate;
        startedAt: z.ZodDefault<z.ZodDate>;
        idempotencyKey: z.ZodOptional<z.ZodString>;
        maxAttempts: z.ZodOptional<z.ZodNumber>;
        version: z.ZodOptional<z.ZodString>;
        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>>>;
        maxDuration: z.ZodOptional<z.ZodNumber>;
        context: z.ZodUnknown;
        durationMs: z.ZodNumber;
        costInCents: z.ZodNumber;
        baseCostInCents: z.ZodNumber;
    }, "payload" | "metadata" | "payloadType">, "strip", z.ZodTypeAny, {
        id: string;
        tags: string[];
        isTest: boolean;
        createdAt: Date;
        startedAt: Date;
        baseCostInCents: number;
        durationMs: number;
        costInCents: number;
        context?: unknown;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
    }, {
        id: string;
        tags: string[];
        createdAt: Date;
        baseCostInCents: number;
        durationMs: number;
        costInCents: number;
        context?: unknown;
        isTest?: boolean | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
    }>;
    task: z.ZodObject<{
        id: z.ZodString;
        filePath: z.ZodString;
        exportName: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        filePath: string;
        exportName?: string | undefined;
    }, {
        id: string;
        filePath: string;
        exportName?: string | undefined;
    }>;
    queue: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
    }, {
        name: string;
        id: string;
    }>;
    environment: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
    }, "strip", z.ZodTypeAny, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    }, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    }>;
    organization: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
    }, {
        name: string;
        id: string;
        slug: string;
    }>;
    project: z.ZodObject<{
        id: z.ZodString;
        ref: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }>;
    batch: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>>;
    machine: z.ZodOptional<z.ZodObject<{
        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
        /** unit: vCPU */
        cpu: z.ZodNumber;
        /** unit: GB */
        memory: z.ZodNumber;
        centsPerMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    }, {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    task: {
        id: string;
        filePath: string;
        exportName?: string | undefined;
    };
    queue: {
        name: string;
        id: string;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    attempt: {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
    };
    run: {
        id: string;
        tags: string[];
        isTest: boolean;
        createdAt: Date;
        startedAt: Date;
        baseCostInCents: number;
        durationMs: number;
        costInCents: number;
        context?: unknown;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
    };
    machine?: {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    } | undefined;
    batch?: {
        id: string;
    } | undefined;
}, {
    task: {
        id: string;
        filePath: string;
        exportName?: string | undefined;
    };
    queue: {
        name: string;
        id: string;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    attempt: {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
    };
    run: {
        id: string;
        tags: string[];
        createdAt: Date;
        baseCostInCents: number;
        durationMs: number;
        costInCents: number;
        context?: unknown;
        isTest?: boolean | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
    };
    machine?: {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    } | undefined;
    batch?: {
        id: string;
    } | undefined;
}>;
export type V3TaskRunContext = z.infer<typeof V3TaskRunContext>;
export declare const TaskRunExecutionRetry: z.ZodObject<{
    timestamp: z.ZodNumber;
    /** Retry delay in milliseconds */
    delay: z.ZodNumber;
    error: z.ZodOptional<z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    timestamp: number;
    delay: number;
    error?: unknown;
}, {
    timestamp: number;
    delay: number;
    error?: unknown;
}>;
export type TaskRunExecutionRetry = z.infer<typeof TaskRunExecutionRetry>;
export declare const TaskRunExecutionUsage: z.ZodObject<{
    durationMs: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    durationMs: number;
}, {
    durationMs: number;
}>;
export type TaskRunExecutionUsage = z.infer<typeof TaskRunExecutionUsage>;
export declare const TaskRunFailedExecutionResult: z.ZodObject<{
    ok: z.ZodLiteral<false>;
    id: z.ZodString;
    error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"BUILT_IN_ERROR">;
        name: z.ZodString;
        message: z.ZodString;
        stackTrace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    }, {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"CUSTOM_ERROR">;
        raw: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "CUSTOM_ERROR";
        raw: string;
    }, {
        type: "CUSTOM_ERROR";
        raw: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"STRING_ERROR">;
        raw: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "STRING_ERROR";
        raw: string;
    }, {
        type: "STRING_ERROR";
        raw: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"INTERNAL_ERROR">;
        code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
        message: z.ZodOptional<z.ZodString>;
        stackTrace: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    }, {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    }>]>;
    retry: z.ZodOptional<z.ZodObject<{
        timestamp: z.ZodNumber;
        /** Retry delay in milliseconds */
        delay: z.ZodNumber;
        error: z.ZodOptional<z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        timestamp: number;
        delay: number;
        error?: unknown;
    }, {
        timestamp: number;
        delay: number;
        error?: unknown;
    }>>;
    skippedRetrying: z.ZodOptional<z.ZodBoolean>;
    usage: z.ZodOptional<z.ZodObject<{
        durationMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        durationMs: number;
    }, {
        durationMs: number;
    }>>;
    taskIdentifier: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodObject<{
        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>>>;
        operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"update">;
            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            value: Record<string, unknown>;
            type: "update";
        }, {
            value: Record<string, unknown>;
            type: "update";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"set">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"delete">;
            key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "delete";
            key: string;
        }, {
            type: "delete";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"append">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"remove">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"increment">;
            key: z.ZodString;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "increment";
            key: string;
        }, {
            value: number;
            type: "increment";
            key: string;
        }>]>, "many">>;
        parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"update">;
            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            value: Record<string, unknown>;
            type: "update";
        }, {
            value: Record<string, unknown>;
            type: "update";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"set">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"delete">;
            key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "delete";
            key: string;
        }, {
            type: "delete";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"append">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"remove">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"increment">;
            key: z.ZodString;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "increment";
            key: string;
        }, {
            value: number;
            type: "increment";
            key: string;
        }>]>, "many">>;
        rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"update">;
            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            value: Record<string, unknown>;
            type: "update";
        }, {
            value: Record<string, unknown>;
            type: "update";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"set">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"delete">;
            key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "delete";
            key: string;
        }, {
            type: "delete";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"append">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"remove">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"increment">;
            key: z.ZodString;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "increment";
            key: string;
        }, {
            value: number;
            type: "increment";
            key: string;
        }>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        operations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        parentOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        rootOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
    }, {
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        operations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        parentOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        rootOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
    }>>;
    flushedMetadata: z.ZodOptional<z.ZodObject<{
        data: z.ZodOptional<z.ZodString>;
        dataType: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        dataType: string;
        data?: string | undefined;
    }, {
        dataType: string;
        data?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    error: {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    } | {
        type: "CUSTOM_ERROR";
        raw: string;
    } | {
        type: "STRING_ERROR";
        raw: string;
    } | {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    };
    ok: false;
    id: string;
    metadata?: {
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        operations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        parentOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        rootOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
    } | undefined;
    retry?: {
        timestamp: number;
        delay: number;
        error?: unknown;
    } | undefined;
    skippedRetrying?: boolean | undefined;
    usage?: {
        durationMs: number;
    } | undefined;
    taskIdentifier?: string | undefined;
    flushedMetadata?: {
        dataType: string;
        data?: string | undefined;
    } | undefined;
}, {
    error: {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    } | {
        type: "CUSTOM_ERROR";
        raw: string;
    } | {
        type: "STRING_ERROR";
        raw: string;
    } | {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    };
    ok: false;
    id: string;
    metadata?: {
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        operations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        parentOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        rootOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
    } | undefined;
    retry?: {
        timestamp: number;
        delay: number;
        error?: unknown;
    } | undefined;
    skippedRetrying?: boolean | undefined;
    usage?: {
        durationMs: number;
    } | undefined;
    taskIdentifier?: string | undefined;
    flushedMetadata?: {
        dataType: string;
        data?: string | undefined;
    } | undefined;
}>;
export type TaskRunFailedExecutionResult = z.infer<typeof TaskRunFailedExecutionResult>;
export declare const TaskRunSuccessfulExecutionResult: z.ZodObject<{
    ok: z.ZodLiteral<true>;
    id: z.ZodString;
    output: z.ZodOptional<z.ZodString>;
    outputType: z.ZodString;
    usage: z.ZodOptional<z.ZodObject<{
        durationMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        durationMs: number;
    }, {
        durationMs: number;
    }>>;
    taskIdentifier: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodObject<{
        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>>>;
        operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"update">;
            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            value: Record<string, unknown>;
            type: "update";
        }, {
            value: Record<string, unknown>;
            type: "update";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"set">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"delete">;
            key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "delete";
            key: string;
        }, {
            type: "delete";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"append">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"remove">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"increment">;
            key: z.ZodString;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "increment";
            key: string;
        }, {
            value: number;
            type: "increment";
            key: string;
        }>]>, "many">>;
        parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"update">;
            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            value: Record<string, unknown>;
            type: "update";
        }, {
            value: Record<string, unknown>;
            type: "update";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"set">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"delete">;
            key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "delete";
            key: string;
        }, {
            type: "delete";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"append">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"remove">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"increment">;
            key: z.ZodString;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "increment";
            key: string;
        }, {
            value: number;
            type: "increment";
            key: string;
        }>]>, "many">>;
        rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"update">;
            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            value: Record<string, unknown>;
            type: "update";
        }, {
            value: Record<string, unknown>;
            type: "update";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"set">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"delete">;
            key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "delete";
            key: string;
        }, {
            type: "delete";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"append">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"remove">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"increment">;
            key: z.ZodString;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "increment";
            key: string;
        }, {
            value: number;
            type: "increment";
            key: string;
        }>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        operations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        parentOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        rootOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
    }, {
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        operations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        parentOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        rootOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
    }>>;
    flushedMetadata: z.ZodOptional<z.ZodObject<{
        data: z.ZodOptional<z.ZodString>;
        dataType: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        dataType: string;
        data?: string | undefined;
    }, {
        dataType: string;
        data?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    ok: true;
    id: string;
    outputType: string;
    metadata?: {
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        operations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        parentOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        rootOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
    } | undefined;
    usage?: {
        durationMs: number;
    } | undefined;
    taskIdentifier?: string | undefined;
    flushedMetadata?: {
        dataType: string;
        data?: string | undefined;
    } | undefined;
    output?: string | undefined;
}, {
    ok: true;
    id: string;
    outputType: string;
    metadata?: {
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        operations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        parentOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        rootOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
    } | undefined;
    usage?: {
        durationMs: number;
    } | undefined;
    taskIdentifier?: string | undefined;
    flushedMetadata?: {
        dataType: string;
        data?: string | undefined;
    } | undefined;
    output?: string | undefined;
}>;
export type TaskRunSuccessfulExecutionResult = z.infer<typeof TaskRunSuccessfulExecutionResult>;
export declare const TaskRunExecutionResult: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
    ok: z.ZodLiteral<true>;
    id: z.ZodString;
    output: z.ZodOptional<z.ZodString>;
    outputType: z.ZodString;
    usage: z.ZodOptional<z.ZodObject<{
        durationMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        durationMs: number;
    }, {
        durationMs: number;
    }>>;
    taskIdentifier: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodObject<{
        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>>>;
        operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"update">;
            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            value: Record<string, unknown>;
            type: "update";
        }, {
            value: Record<string, unknown>;
            type: "update";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"set">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"delete">;
            key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "delete";
            key: string;
        }, {
            type: "delete";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"append">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"remove">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"increment">;
            key: z.ZodString;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "increment";
            key: string;
        }, {
            value: number;
            type: "increment";
            key: string;
        }>]>, "many">>;
        parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"update">;
            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            value: Record<string, unknown>;
            type: "update";
        }, {
            value: Record<string, unknown>;
            type: "update";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"set">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"delete">;
            key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "delete";
            key: string;
        }, {
            type: "delete";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"append">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"remove">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"increment">;
            key: z.ZodString;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "increment";
            key: string;
        }, {
            value: number;
            type: "increment";
            key: string;
        }>]>, "many">>;
        rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"update">;
            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            value: Record<string, unknown>;
            type: "update";
        }, {
            value: Record<string, unknown>;
            type: "update";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"set">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"delete">;
            key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "delete";
            key: string;
        }, {
            type: "delete";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"append">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"remove">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"increment">;
            key: z.ZodString;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "increment";
            key: string;
        }, {
            value: number;
            type: "increment";
            key: string;
        }>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        operations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        parentOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        rootOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
    }, {
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        operations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        parentOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        rootOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
    }>>;
    flushedMetadata: z.ZodOptional<z.ZodObject<{
        data: z.ZodOptional<z.ZodString>;
        dataType: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        dataType: string;
        data?: string | undefined;
    }, {
        dataType: string;
        data?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    ok: true;
    id: string;
    outputType: string;
    metadata?: {
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        operations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        parentOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        rootOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
    } | undefined;
    usage?: {
        durationMs: number;
    } | undefined;
    taskIdentifier?: string | undefined;
    flushedMetadata?: {
        dataType: string;
        data?: string | undefined;
    } | undefined;
    output?: string | undefined;
}, {
    ok: true;
    id: string;
    outputType: string;
    metadata?: {
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        operations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        parentOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        rootOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
    } | undefined;
    usage?: {
        durationMs: number;
    } | undefined;
    taskIdentifier?: string | undefined;
    flushedMetadata?: {
        dataType: string;
        data?: string | undefined;
    } | undefined;
    output?: string | undefined;
}>, z.ZodObject<{
    ok: z.ZodLiteral<false>;
    id: z.ZodString;
    error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"BUILT_IN_ERROR">;
        name: z.ZodString;
        message: z.ZodString;
        stackTrace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    }, {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"CUSTOM_ERROR">;
        raw: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "CUSTOM_ERROR";
        raw: string;
    }, {
        type: "CUSTOM_ERROR";
        raw: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"STRING_ERROR">;
        raw: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "STRING_ERROR";
        raw: string;
    }, {
        type: "STRING_ERROR";
        raw: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"INTERNAL_ERROR">;
        code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
        message: z.ZodOptional<z.ZodString>;
        stackTrace: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    }, {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    }>]>;
    retry: z.ZodOptional<z.ZodObject<{
        timestamp: z.ZodNumber;
        /** Retry delay in milliseconds */
        delay: z.ZodNumber;
        error: z.ZodOptional<z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        timestamp: number;
        delay: number;
        error?: unknown;
    }, {
        timestamp: number;
        delay: number;
        error?: unknown;
    }>>;
    skippedRetrying: z.ZodOptional<z.ZodBoolean>;
    usage: z.ZodOptional<z.ZodObject<{
        durationMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        durationMs: number;
    }, {
        durationMs: number;
    }>>;
    taskIdentifier: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodObject<{
        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>>>;
        operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"update">;
            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            value: Record<string, unknown>;
            type: "update";
        }, {
            value: Record<string, unknown>;
            type: "update";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"set">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"delete">;
            key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "delete";
            key: string;
        }, {
            type: "delete";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"append">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"remove">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"increment">;
            key: z.ZodString;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "increment";
            key: string;
        }, {
            value: number;
            type: "increment";
            key: string;
        }>]>, "many">>;
        parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"update">;
            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            value: Record<string, unknown>;
            type: "update";
        }, {
            value: Record<string, unknown>;
            type: "update";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"set">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"delete">;
            key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "delete";
            key: string;
        }, {
            type: "delete";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"append">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"remove">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"increment">;
            key: z.ZodString;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "increment";
            key: string;
        }, {
            value: number;
            type: "increment";
            key: string;
        }>]>, "many">>;
        rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"update">;
            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            value: Record<string, unknown>;
            type: "update";
        }, {
            value: Record<string, unknown>;
            type: "update";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"set">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"delete">;
            key: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "delete";
            key: string;
        }, {
            type: "delete";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"append">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"remove">;
            key: z.ZodString;
            value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
        }, "strip", z.ZodTypeAny, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }, {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"increment">;
            key: z.ZodString;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "increment";
            key: string;
        }, {
            value: number;
            type: "increment";
            key: string;
        }>]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        operations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        parentOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        rootOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
    }, {
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        operations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        parentOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        rootOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
    }>>;
    flushedMetadata: z.ZodOptional<z.ZodObject<{
        data: z.ZodOptional<z.ZodString>;
        dataType: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        dataType: string;
        data?: string | undefined;
    }, {
        dataType: string;
        data?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    error: {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    } | {
        type: "CUSTOM_ERROR";
        raw: string;
    } | {
        type: "STRING_ERROR";
        raw: string;
    } | {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    };
    ok: false;
    id: string;
    metadata?: {
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        operations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        parentOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        rootOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
    } | undefined;
    retry?: {
        timestamp: number;
        delay: number;
        error?: unknown;
    } | undefined;
    skippedRetrying?: boolean | undefined;
    usage?: {
        durationMs: number;
    } | undefined;
    taskIdentifier?: string | undefined;
    flushedMetadata?: {
        dataType: string;
        data?: string | undefined;
    } | undefined;
}, {
    error: {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    } | {
        type: "CUSTOM_ERROR";
        raw: string;
    } | {
        type: "STRING_ERROR";
        raw: string;
    } | {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    };
    ok: false;
    id: string;
    metadata?: {
        metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
        operations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        parentOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
        rootOperations?: ({
            value: Record<string, unknown>;
            type: "update";
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "set";
            key: string;
        } | {
            type: "delete";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "append";
            key: string;
        } | {
            value: import("../../schemas/json.js").DeserializedJson;
            type: "remove";
            key: string;
        } | {
            value: number;
            type: "increment";
            key: string;
        })[] | undefined;
    } | undefined;
    retry?: {
        timestamp: number;
        delay: number;
        error?: unknown;
    } | undefined;
    skippedRetrying?: boolean | undefined;
    usage?: {
        durationMs: number;
    } | undefined;
    taskIdentifier?: string | undefined;
    flushedMetadata?: {
        dataType: string;
        data?: string | undefined;
    } | undefined;
}>]>;
export type TaskRunExecutionResult = z.infer<typeof TaskRunExecutionResult>;
export declare const BatchTaskRunExecutionResult: z.ZodObject<{
    id: z.ZodString;
    items: z.ZodArray<z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
        ok: z.ZodLiteral<true>;
        id: z.ZodString;
        output: z.ZodOptional<z.ZodString>;
        outputType: z.ZodString;
        usage: z.ZodOptional<z.ZodObject<{
            durationMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            durationMs: number;
        }, {
            durationMs: number;
        }>>;
        taskIdentifier: z.ZodOptional<z.ZodString>;
        metadata: z.ZodOptional<z.ZodObject<{
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>>>;
            operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
            parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
            rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
        }, "strip", z.ZodTypeAny, {
            metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        }, {
            metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        }>>;
        flushedMetadata: z.ZodOptional<z.ZodObject<{
            data: z.ZodOptional<z.ZodString>;
            dataType: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dataType: string;
            data?: string | undefined;
        }, {
            dataType: string;
            data?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        ok: true;
        id: string;
        outputType: string;
        metadata?: {
            metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
        output?: string | undefined;
    }, {
        ok: true;
        id: string;
        outputType: string;
        metadata?: {
            metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
        output?: string | undefined;
    }>, z.ZodObject<{
        ok: z.ZodLiteral<false>;
        id: z.ZodString;
        error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"BUILT_IN_ERROR">;
            name: z.ZodString;
            message: z.ZodString;
            stackTrace: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        }, {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"CUSTOM_ERROR">;
            raw: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "CUSTOM_ERROR";
            raw: string;
        }, {
            type: "CUSTOM_ERROR";
            raw: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"STRING_ERROR">;
            raw: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "STRING_ERROR";
            raw: string;
        }, {
            type: "STRING_ERROR";
            raw: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"INTERNAL_ERROR">;
            code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
            message: z.ZodOptional<z.ZodString>;
            stackTrace: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        }, {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        }>]>;
        retry: z.ZodOptional<z.ZodObject<{
            timestamp: z.ZodNumber;
            /** Retry delay in milliseconds */
            delay: z.ZodNumber;
            error: z.ZodOptional<z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            timestamp: number;
            delay: number;
            error?: unknown;
        }, {
            timestamp: number;
            delay: number;
            error?: unknown;
        }>>;
        skippedRetrying: z.ZodOptional<z.ZodBoolean>;
        usage: z.ZodOptional<z.ZodObject<{
            durationMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            durationMs: number;
        }, {
            durationMs: number;
        }>>;
        taskIdentifier: z.ZodOptional<z.ZodString>;
        metadata: z.ZodOptional<z.ZodObject<{
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>>>;
            operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
            parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
            rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
        }, "strip", z.ZodTypeAny, {
            metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        }, {
            metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        }>>;
        flushedMetadata: z.ZodOptional<z.ZodObject<{
            data: z.ZodOptional<z.ZodString>;
            dataType: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dataType: string;
            data?: string | undefined;
        }, {
            dataType: string;
            data?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        ok: false;
        id: string;
        metadata?: {
            metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
    }, {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        ok: false;
        id: string;
        metadata?: {
            metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    id: string;
    items: ({
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        ok: false;
        id: string;
        metadata?: {
            metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
    } | {
        ok: true;
        id: string;
        outputType: string;
        metadata?: {
            metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
        output?: string | undefined;
    })[];
}, {
    id: string;
    items: ({
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        ok: false;
        id: string;
        metadata?: {
            metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
    } | {
        ok: true;
        id: string;
        outputType: string;
        metadata?: {
            metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../schemas/json.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
        output?: string | undefined;
    })[];
}>;
export type BatchTaskRunExecutionResult = z.infer<typeof BatchTaskRunExecutionResult>;
export declare const WaitpointTokenResult: z.ZodObject<{
    ok: z.ZodBoolean;
    output: z.ZodOptional<z.ZodString>;
    outputType: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    ok: boolean;
    output?: string | undefined;
    outputType?: string | undefined;
}, {
    ok: boolean;
    output?: string | undefined;
    outputType?: string | undefined;
}>;
export type WaitpointTokenResult = z.infer<typeof WaitpointTokenResult>;
export type WaitpointTokenTypedResult<T> = {
    ok: true;
    output: T;
} | {
    ok: false;
    error: Error;
};
export declare const SerializedError: z.ZodObject<{
    message: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    stackTrace: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    name?: string | undefined;
    stackTrace?: string | undefined;
}, {
    message: string;
    name?: string | undefined;
    stackTrace?: string | undefined;
}>;
export type SerializedError = z.infer<typeof SerializedError>;
export declare const RuntimeEnvironmentType: {
    PRODUCTION: "PRODUCTION";
    STAGING: "STAGING";
    DEVELOPMENT: "DEVELOPMENT";
    PREVIEW: "PREVIEW";
};
export type RuntimeEnvironmentType = (typeof RuntimeEnvironmentType)[keyof typeof RuntimeEnvironmentType];
export declare const RuntimeEnvironmentTypeSchema: z.ZodEnum<[import("@trigger.dev/database").$Enums.RuntimeEnvironmentType]>;
