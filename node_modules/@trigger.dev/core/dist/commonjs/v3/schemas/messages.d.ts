import { z } from "zod";
export declare const AckCallbackResult: z.ZodDiscriminatedUnion<"success", [z.ZodObject<{
    success: z.ZodLiteral<false>;
    error: z.ZodObject<{
        name: z.ZodString;
        message: z.ZodString;
        stack: z.ZodOptional<z.ZodString>;
        stderr: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    }, {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    error: {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    };
    success: false;
}, {
    error: {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    };
    success: false;
}>, z.ZodObject<{
    success: z.ZodLiteral<true>;
}, "strip", z.ZodTypeAny, {
    success: true;
}, {
    success: true;
}>]>;
export type AckCallbackResult = z.infer<typeof AckCallbackResult>;
export declare const BackgroundWorkerServerMessages: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"CANCEL_ATTEMPT">;
    taskAttemptId: z.ZodString;
    taskRunId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "CANCEL_ATTEMPT";
    taskRunId: string;
    taskAttemptId: string;
}, {
    type: "CANCEL_ATTEMPT";
    taskRunId: string;
    taskAttemptId: string;
}>, z.ZodObject<{
    type: z.ZodLiteral<"SCHEDULE_ATTEMPT">;
    image: z.ZodString;
    version: z.ZodString;
    machine: z.ZodObject<{
        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
        cpu: z.ZodNumber;
        memory: z.ZodNumber;
        centsPerMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    }, {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    }>;
    nextAttemptNumber: z.ZodOptional<z.ZodNumber>;
    id: z.ZodOptional<z.ZodString>;
    envId: z.ZodString;
    envType: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
    orgId: z.ZodString;
    projectId: z.ZodString;
    runId: z.ZodString;
    dequeuedAt: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "SCHEDULE_ATTEMPT";
    version: string;
    machine: {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    };
    runId: string;
    image: string;
    projectId: string;
    envId: string;
    envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
    orgId: string;
    id?: string | undefined;
    dequeuedAt?: number | undefined;
    nextAttemptNumber?: number | undefined;
}, {
    type: "SCHEDULE_ATTEMPT";
    version: string;
    machine: {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    };
    runId: string;
    image: string;
    projectId: string;
    envId: string;
    envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
    orgId: string;
    id?: string | undefined;
    dequeuedAt?: number | undefined;
    nextAttemptNumber?: number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"EXECUTE_RUN_LAZY_ATTEMPT">;
    payload: z.ZodObject<{
        runId: z.ZodString;
        attemptCount: z.ZodOptional<z.ZodNumber>;
        messageId: z.ZodString;
        isTest: z.ZodBoolean;
        traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        metrics: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            event: z.ZodString;
            timestamp: z.ZodNumber;
            duration: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            event: string;
            name: string;
            timestamp: number;
            duration: number;
        }, {
            event: string;
            name: string;
            timestamp: number;
            duration: number;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        isTest: boolean;
        traceContext: Record<string, unknown>;
        runId: string;
        messageId: string;
        environment?: Record<string, string> | undefined;
        attemptCount?: number | undefined;
        metrics?: {
            event: string;
            name: string;
            timestamp: number;
            duration: number;
        }[] | undefined;
    }, {
        isTest: boolean;
        traceContext: Record<string, unknown>;
        runId: string;
        messageId: string;
        environment?: Record<string, string> | undefined;
        attemptCount?: number | undefined;
        metrics?: {
            event: string;
            name: string;
            timestamp: number;
            duration: number;
        }[] | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "EXECUTE_RUN_LAZY_ATTEMPT";
    payload: {
        isTest: boolean;
        traceContext: Record<string, unknown>;
        runId: string;
        messageId: string;
        environment?: Record<string, string> | undefined;
        attemptCount?: number | undefined;
        metrics?: {
            event: string;
            name: string;
            timestamp: number;
            duration: number;
        }[] | undefined;
    };
}, {
    type: "EXECUTE_RUN_LAZY_ATTEMPT";
    payload: {
        isTest: boolean;
        traceContext: Record<string, unknown>;
        runId: string;
        messageId: string;
        environment?: Record<string, string> | undefined;
        attemptCount?: number | undefined;
        metrics?: {
            event: string;
            name: string;
            timestamp: number;
            duration: number;
        }[] | undefined;
    };
}>]>;
export type BackgroundWorkerServerMessages = z.infer<typeof BackgroundWorkerServerMessages>;
export declare const serverWebsocketMessages: {
    SERVER_READY: z.ZodObject<{
        version: z.ZodDefault<z.ZodLiteral<"v1">>;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        version: "v1";
    }, {
        id: string;
        version?: "v1" | undefined;
    }>;
    BACKGROUND_WORKER_MESSAGE: z.ZodObject<{
        version: z.ZodDefault<z.ZodLiteral<"v1">>;
        backgroundWorkerId: z.ZodString;
        data: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"CANCEL_ATTEMPT">;
            taskAttemptId: z.ZodString;
            taskRunId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "CANCEL_ATTEMPT";
            taskRunId: string;
            taskAttemptId: string;
        }, {
            type: "CANCEL_ATTEMPT";
            taskRunId: string;
            taskAttemptId: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"SCHEDULE_ATTEMPT">;
            image: z.ZodString;
            version: z.ZodString;
            machine: z.ZodObject<{
                name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                cpu: z.ZodNumber;
                memory: z.ZodNumber;
                centsPerMs: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            }, {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            }>;
            nextAttemptNumber: z.ZodOptional<z.ZodNumber>;
            id: z.ZodOptional<z.ZodString>;
            envId: z.ZodString;
            envType: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
            orgId: z.ZodString;
            projectId: z.ZodString;
            runId: z.ZodString;
            dequeuedAt: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            type: "SCHEDULE_ATTEMPT";
            version: string;
            machine: {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            };
            runId: string;
            image: string;
            projectId: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            id?: string | undefined;
            dequeuedAt?: number | undefined;
            nextAttemptNumber?: number | undefined;
        }, {
            type: "SCHEDULE_ATTEMPT";
            version: string;
            machine: {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            };
            runId: string;
            image: string;
            projectId: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            id?: string | undefined;
            dequeuedAt?: number | undefined;
            nextAttemptNumber?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"EXECUTE_RUN_LAZY_ATTEMPT">;
            payload: z.ZodObject<{
                runId: z.ZodString;
                attemptCount: z.ZodOptional<z.ZodNumber>;
                messageId: z.ZodString;
                isTest: z.ZodBoolean;
                traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                metrics: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    event: z.ZodString;
                    timestamp: z.ZodNumber;
                    duration: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }, {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                environment?: Record<string, string> | undefined;
                attemptCount?: number | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            }, {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                environment?: Record<string, string> | undefined;
                attemptCount?: number | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "EXECUTE_RUN_LAZY_ATTEMPT";
            payload: {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                environment?: Record<string, string> | undefined;
                attemptCount?: number | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            };
        }, {
            type: "EXECUTE_RUN_LAZY_ATTEMPT";
            payload: {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                environment?: Record<string, string> | undefined;
                attemptCount?: number | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            };
        }>]>;
    }, "strip", z.ZodTypeAny, {
        version: "v1";
        backgroundWorkerId: string;
        data: {
            type: "CANCEL_ATTEMPT";
            taskRunId: string;
            taskAttemptId: string;
        } | {
            type: "SCHEDULE_ATTEMPT";
            version: string;
            machine: {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            };
            runId: string;
            image: string;
            projectId: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            id?: string | undefined;
            dequeuedAt?: number | undefined;
            nextAttemptNumber?: number | undefined;
        } | {
            type: "EXECUTE_RUN_LAZY_ATTEMPT";
            payload: {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                environment?: Record<string, string> | undefined;
                attemptCount?: number | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            };
        };
    }, {
        backgroundWorkerId: string;
        data: {
            type: "CANCEL_ATTEMPT";
            taskRunId: string;
            taskAttemptId: string;
        } | {
            type: "SCHEDULE_ATTEMPT";
            version: string;
            machine: {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            };
            runId: string;
            image: string;
            projectId: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            id?: string | undefined;
            dequeuedAt?: number | undefined;
            nextAttemptNumber?: number | undefined;
        } | {
            type: "EXECUTE_RUN_LAZY_ATTEMPT";
            payload: {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                environment?: Record<string, string> | undefined;
                attemptCount?: number | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            };
        };
        version?: "v1" | undefined;
    }>;
};
export declare const BackgroundWorkerClientMessages: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    version: z.ZodDefault<z.ZodLiteral<"v1">>;
    type: z.ZodLiteral<"TASK_RUN_COMPLETED">;
    completion: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
        ok: z.ZodLiteral<true>;
        id: z.ZodString;
        output: z.ZodOptional<z.ZodString>;
        outputType: z.ZodString;
        usage: z.ZodOptional<z.ZodObject<{
            durationMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            durationMs: number;
        }, {
            durationMs: number;
        }>>;
        taskIdentifier: z.ZodOptional<z.ZodString>;
        metadata: z.ZodOptional<z.ZodObject<{
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
            operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
            parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
            rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
        }, "strip", z.ZodTypeAny, {
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        }, {
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        }>>;
        flushedMetadata: z.ZodOptional<z.ZodObject<{
            data: z.ZodOptional<z.ZodString>;
            dataType: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dataType: string;
            data?: string | undefined;
        }, {
            dataType: string;
            data?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        ok: true;
        id: string;
        outputType: string;
        metadata?: {
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
        output?: string | undefined;
    }, {
        ok: true;
        id: string;
        outputType: string;
        metadata?: {
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
        output?: string | undefined;
    }>, z.ZodObject<{
        ok: z.ZodLiteral<false>;
        id: z.ZodString;
        error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"BUILT_IN_ERROR">;
            name: z.ZodString;
            message: z.ZodString;
            stackTrace: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        }, {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"CUSTOM_ERROR">;
            raw: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "CUSTOM_ERROR";
            raw: string;
        }, {
            type: "CUSTOM_ERROR";
            raw: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"STRING_ERROR">;
            raw: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "STRING_ERROR";
            raw: string;
        }, {
            type: "STRING_ERROR";
            raw: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"INTERNAL_ERROR">;
            code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
            message: z.ZodOptional<z.ZodString>;
            stackTrace: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        }, {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        }>]>;
        retry: z.ZodOptional<z.ZodObject<{
            timestamp: z.ZodNumber;
            delay: z.ZodNumber;
            error: z.ZodOptional<z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            timestamp: number;
            delay: number;
            error?: unknown;
        }, {
            timestamp: number;
            delay: number;
            error?: unknown;
        }>>;
        skippedRetrying: z.ZodOptional<z.ZodBoolean>;
        usage: z.ZodOptional<z.ZodObject<{
            durationMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            durationMs: number;
        }, {
            durationMs: number;
        }>>;
        taskIdentifier: z.ZodOptional<z.ZodString>;
        metadata: z.ZodOptional<z.ZodObject<{
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
            operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
            parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
            rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
        }, "strip", z.ZodTypeAny, {
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        }, {
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        }>>;
        flushedMetadata: z.ZodOptional<z.ZodObject<{
            data: z.ZodOptional<z.ZodString>;
            dataType: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dataType: string;
            data?: string | undefined;
        }, {
            dataType: string;
            data?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        ok: false;
        id: string;
        metadata?: {
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
    }, {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        ok: false;
        id: string;
        metadata?: {
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
    }>]>;
    execution: z.ZodObject<{
        task: z.ZodObject<{
            id: z.ZodString;
            filePath: z.ZodString;
            exportName: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            filePath: string;
            exportName?: string | undefined;
        }, {
            id: string;
            filePath: string;
            exportName?: string | undefined;
        }>;
        attempt: z.ZodObject<{
            number: z.ZodNumber;
            startedAt: z.ZodDate;
            id: z.ZodString;
            backgroundWorkerId: z.ZodString;
            backgroundWorkerTaskId: z.ZodString;
            status: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        }, {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        }>;
        run: z.ZodIntersection<z.ZodObject<{
            id: z.ZodString;
            payload: z.ZodString;
            payloadType: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
            isTest: z.ZodDefault<z.ZodBoolean>;
            createdAt: z.ZodDate;
            startedAt: z.ZodDefault<z.ZodDate>;
            idempotencyKey: z.ZodOptional<z.ZodString>;
            maxAttempts: z.ZodOptional<z.ZodNumber>;
            version: z.ZodOptional<z.ZodString>;
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
            maxDuration: z.ZodOptional<z.ZodNumber>;
            context: z.ZodUnknown;
            durationMs: z.ZodNumber;
            costInCents: z.ZodNumber;
            baseCostInCents: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            startedAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            context?: unknown;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
        }, {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            context?: unknown;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
        }>, z.ZodObject<{
            traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
        }, "strip", z.ZodTypeAny, {
            traceContext?: Record<string, unknown> | undefined;
        }, {
            traceContext?: Record<string, unknown> | undefined;
        }>>;
        queue: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
        }, {
            name: string;
            id: string;
        }>;
        environment: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
            branchName: z.ZodOptional<z.ZodString>;
            git: z.ZodOptional<z.ZodObject<{
                provider: z.ZodOptional<z.ZodString>;
                source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                ghUsername: z.ZodOptional<z.ZodString>;
                ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                commitAuthorName: z.ZodOptional<z.ZodString>;
                commitMessage: z.ZodOptional<z.ZodString>;
                commitRef: z.ZodOptional<z.ZodString>;
                commitSha: z.ZodOptional<z.ZodString>;
                dirty: z.ZodOptional<z.ZodBoolean>;
                remoteUrl: z.ZodOptional<z.ZodString>;
                pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                pullRequestTitle: z.ZodOptional<z.ZodString>;
                pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
            }, "strip", z.ZodTypeAny, {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            }, {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        }, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        }>;
        organization: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
        }, {
            name: string;
            id: string;
            slug: string;
        }>;
        project: z.ZodObject<{
            id: z.ZodString;
            ref: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }>;
        machine: z.ZodObject<{
            name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
            cpu: z.ZodNumber;
            memory: z.ZodNumber;
            centsPerMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        }, {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        }>;
        batch: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        task: {
            id: string;
            filePath: string;
            exportName?: string | undefined;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            startedAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            context?: unknown;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        batch?: {
            id: string;
        } | undefined;
    }, {
        task: {
            id: string;
            filePath: string;
            exportName?: string | undefined;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            context?: unknown;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        batch?: {
            id: string;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TASK_RUN_COMPLETED";
    version: "v1";
    execution: {
        task: {
            id: string;
            filePath: string;
            exportName?: string | undefined;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            startedAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            context?: unknown;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        batch?: {
            id: string;
        } | undefined;
    };
    completion: {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        ok: false;
        id: string;
        metadata?: {
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
    } | {
        ok: true;
        id: string;
        outputType: string;
        metadata?: {
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
        output?: string | undefined;
    };
}, {
    type: "TASK_RUN_COMPLETED";
    execution: {
        task: {
            id: string;
            filePath: string;
            exportName?: string | undefined;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            context?: unknown;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        batch?: {
            id: string;
        } | undefined;
    };
    completion: {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        ok: false;
        id: string;
        metadata?: {
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
    } | {
        ok: true;
        id: string;
        outputType: string;
        metadata?: {
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
        output?: string | undefined;
    };
    version?: "v1" | undefined;
}>, z.ZodObject<{
    version: z.ZodDefault<z.ZodLiteral<"v1">>;
    type: z.ZodLiteral<"TASK_RUN_FAILED_TO_RUN">;
    completion: z.ZodObject<{
        ok: z.ZodLiteral<false>;
        id: z.ZodString;
        error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"BUILT_IN_ERROR">;
            name: z.ZodString;
            message: z.ZodString;
            stackTrace: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        }, {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"CUSTOM_ERROR">;
            raw: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "CUSTOM_ERROR";
            raw: string;
        }, {
            type: "CUSTOM_ERROR";
            raw: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"STRING_ERROR">;
            raw: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "STRING_ERROR";
            raw: string;
        }, {
            type: "STRING_ERROR";
            raw: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"INTERNAL_ERROR">;
            code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
            message: z.ZodOptional<z.ZodString>;
            stackTrace: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        }, {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        }>]>;
        retry: z.ZodOptional<z.ZodObject<{
            timestamp: z.ZodNumber;
            delay: z.ZodNumber;
            error: z.ZodOptional<z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            timestamp: number;
            delay: number;
            error?: unknown;
        }, {
            timestamp: number;
            delay: number;
            error?: unknown;
        }>>;
        skippedRetrying: z.ZodOptional<z.ZodBoolean>;
        usage: z.ZodOptional<z.ZodObject<{
            durationMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            durationMs: number;
        }, {
            durationMs: number;
        }>>;
        taskIdentifier: z.ZodOptional<z.ZodString>;
        metadata: z.ZodOptional<z.ZodObject<{
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
            operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
            parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
            rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
        }, "strip", z.ZodTypeAny, {
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        }, {
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        }>>;
        flushedMetadata: z.ZodOptional<z.ZodObject<{
            data: z.ZodOptional<z.ZodString>;
            dataType: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dataType: string;
            data?: string | undefined;
        }, {
            dataType: string;
            data?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        ok: false;
        id: string;
        metadata?: {
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
    }, {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        ok: false;
        id: string;
        metadata?: {
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "TASK_RUN_FAILED_TO_RUN";
    version: "v1";
    completion: {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        ok: false;
        id: string;
        metadata?: {
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
    };
}, {
    type: "TASK_RUN_FAILED_TO_RUN";
    completion: {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        ok: false;
        id: string;
        metadata?: {
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
    };
    version?: "v1" | undefined;
}>, z.ZodObject<{
    version: z.ZodDefault<z.ZodLiteral<"v1">>;
    type: z.ZodLiteral<"TASK_HEARTBEAT">;
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "TASK_HEARTBEAT";
    id: string;
    version: "v1";
}, {
    type: "TASK_HEARTBEAT";
    id: string;
    version?: "v1" | undefined;
}>, z.ZodObject<{
    version: z.ZodDefault<z.ZodLiteral<"v1">>;
    type: z.ZodLiteral<"TASK_RUN_HEARTBEAT">;
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "TASK_RUN_HEARTBEAT";
    id: string;
    version: "v1";
}, {
    type: "TASK_RUN_HEARTBEAT";
    id: string;
    version?: "v1" | undefined;
}>]>;
export type BackgroundWorkerClientMessages = z.infer<typeof BackgroundWorkerClientMessages>;
export declare const ServerBackgroundWorker: z.ZodObject<{
    id: z.ZodString;
    version: z.ZodString;
    contentHash: z.ZodString;
    engine: z.ZodOptional<z.ZodEnum<["V1", "V2"]>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    version: string;
    contentHash: string;
    engine?: "V1" | "V2" | undefined;
}, {
    id: string;
    version: string;
    contentHash: string;
    engine?: "V1" | "V2" | undefined;
}>;
export type ServerBackgroundWorker = z.infer<typeof ServerBackgroundWorker>;
export declare const clientWebsocketMessages: {
    READY_FOR_TASKS: z.ZodObject<{
        version: z.ZodDefault<z.ZodLiteral<"v1">>;
        backgroundWorkerId: z.ZodString;
        inProgressRuns: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        version: "v1";
        backgroundWorkerId: string;
        inProgressRuns?: string[] | undefined;
    }, {
        backgroundWorkerId: string;
        version?: "v1" | undefined;
        inProgressRuns?: string[] | undefined;
    }>;
    BACKGROUND_WORKER_DEPRECATED: z.ZodObject<{
        version: z.ZodDefault<z.ZodLiteral<"v1">>;
        backgroundWorkerId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        version: "v1";
        backgroundWorkerId: string;
    }, {
        backgroundWorkerId: string;
        version?: "v1" | undefined;
    }>;
    BACKGROUND_WORKER_MESSAGE: z.ZodObject<{
        version: z.ZodDefault<z.ZodLiteral<"v1">>;
        backgroundWorkerId: z.ZodString;
        data: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            type: z.ZodLiteral<"TASK_RUN_COMPLETED">;
            completion: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                ok: z.ZodLiteral<true>;
                id: z.ZodString;
                output: z.ZodOptional<z.ZodString>;
                outputType: z.ZodString;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            }, {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            }>, z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }>]>;
            execution: z.ZodObject<{
                task: z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                    exportName: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                }, {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                }>;
                attempt: z.ZodObject<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                    id: z.ZodString;
                    backgroundWorkerId: z.ZodString;
                    backgroundWorkerTaskId: z.ZodString;
                    status: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }>;
                run: z.ZodIntersection<z.ZodObject<{
                    id: z.ZodString;
                    payload: z.ZodString;
                    payloadType: z.ZodString;
                    tags: z.ZodArray<z.ZodString, "many">;
                    isTest: z.ZodDefault<z.ZodBoolean>;
                    createdAt: z.ZodDate;
                    startedAt: z.ZodDefault<z.ZodDate>;
                    idempotencyKey: z.ZodOptional<z.ZodString>;
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    version: z.ZodOptional<z.ZodString>;
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    maxDuration: z.ZodOptional<z.ZodNumber>;
                    context: z.ZodUnknown;
                    durationMs: z.ZodNumber;
                    costInCents: z.ZodNumber;
                    baseCostInCents: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                }, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                }>, z.ZodObject<{
                    traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    traceContext?: Record<string, unknown> | undefined;
                }, {
                    traceContext?: Record<string, unknown> | undefined;
                }>>;
                queue: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                }, {
                    name: string;
                    id: string;
                }>;
                environment: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                    branchName: z.ZodOptional<z.ZodString>;
                    git: z.ZodOptional<z.ZodObject<{
                        provider: z.ZodOptional<z.ZodString>;
                        source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                        ghUsername: z.ZodOptional<z.ZodString>;
                        ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                        commitAuthorName: z.ZodOptional<z.ZodString>;
                        commitMessage: z.ZodOptional<z.ZodString>;
                        commitRef: z.ZodOptional<z.ZodString>;
                        commitSha: z.ZodOptional<z.ZodString>;
                        dirty: z.ZodOptional<z.ZodBoolean>;
                        remoteUrl: z.ZodOptional<z.ZodString>;
                        pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                        pullRequestTitle: z.ZodOptional<z.ZodString>;
                        pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                    }, "strip", z.ZodTypeAny, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }>;
                organization: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                }>;
                project: z.ZodObject<{
                    id: z.ZodString;
                    ref: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }>;
                machine: z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }>;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>>;
            }, "strip", z.ZodTypeAny, {
                task: {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
            }, {
                task: {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "TASK_RUN_COMPLETED";
            version: "v1";
            execution: {
                task: {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            } | {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            };
        }, {
            type: "TASK_RUN_COMPLETED";
            execution: {
                task: {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            } | {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            };
            version?: "v1" | undefined;
        }>, z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            type: z.ZodLiteral<"TASK_RUN_FAILED_TO_RUN">;
            completion: z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "TASK_RUN_FAILED_TO_RUN";
            version: "v1";
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            };
        }, {
            type: "TASK_RUN_FAILED_TO_RUN";
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            };
            version?: "v1" | undefined;
        }>, z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            type: z.ZodLiteral<"TASK_HEARTBEAT">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "TASK_HEARTBEAT";
            id: string;
            version: "v1";
        }, {
            type: "TASK_HEARTBEAT";
            id: string;
            version?: "v1" | undefined;
        }>, z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            type: z.ZodLiteral<"TASK_RUN_HEARTBEAT">;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "TASK_RUN_HEARTBEAT";
            id: string;
            version: "v1";
        }, {
            type: "TASK_RUN_HEARTBEAT";
            id: string;
            version?: "v1" | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        version: "v1";
        backgroundWorkerId: string;
        data: {
            type: "TASK_RUN_COMPLETED";
            version: "v1";
            execution: {
                task: {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            } | {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            };
        } | {
            type: "TASK_RUN_FAILED_TO_RUN";
            version: "v1";
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            };
        } | {
            type: "TASK_HEARTBEAT";
            id: string;
            version: "v1";
        } | {
            type: "TASK_RUN_HEARTBEAT";
            id: string;
            version: "v1";
        };
    }, {
        backgroundWorkerId: string;
        data: {
            type: "TASK_RUN_COMPLETED";
            execution: {
                task: {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            } | {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            };
            version?: "v1" | undefined;
        } | {
            type: "TASK_RUN_FAILED_TO_RUN";
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            };
            version?: "v1" | undefined;
        } | {
            type: "TASK_HEARTBEAT";
            id: string;
            version?: "v1" | undefined;
        } | {
            type: "TASK_RUN_HEARTBEAT";
            id: string;
            version?: "v1" | undefined;
        };
        version?: "v1" | undefined;
    }>;
};
export declare const UncaughtExceptionMessage: z.ZodObject<{
    version: z.ZodDefault<z.ZodLiteral<"v1">>;
    error: z.ZodObject<{
        name: z.ZodString;
        message: z.ZodString;
        stack: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        name: string;
        stack?: string | undefined;
    }, {
        message: string;
        name: string;
        stack?: string | undefined;
    }>;
    origin: z.ZodEnum<["uncaughtException", "unhandledRejection"]>;
}, "strip", z.ZodTypeAny, {
    error: {
        message: string;
        name: string;
        stack?: string | undefined;
    };
    version: "v1";
    origin: "uncaughtException" | "unhandledRejection";
}, {
    error: {
        message: string;
        name: string;
        stack?: string | undefined;
    };
    origin: "uncaughtException" | "unhandledRejection";
    version?: "v1" | undefined;
}>;
export declare const TaskMetadataFailedToParseData: z.ZodObject<{
    version: z.ZodDefault<z.ZodLiteral<"v1">>;
    tasks: z.ZodUnknown;
    zodIssues: z.ZodType<z.ZodIssue[], z.ZodTypeDef, z.ZodIssue[]>;
}, "strip", z.ZodTypeAny, {
    version: "v1";
    zodIssues: z.ZodIssue[];
    tasks?: unknown;
}, {
    zodIssues: z.ZodIssue[];
    version?: "v1" | undefined;
    tasks?: unknown;
}>;
export declare const indexerToWorkerMessages: {
    INDEX_COMPLETE: z.ZodObject<{
        version: z.ZodDefault<z.ZodLiteral<"v1">>;
        manifest: z.ZodObject<{
            configPath: z.ZodString;
            tasks: z.ZodArray<z.ZodObject<{
                filePath: z.ZodString;
                exportName: z.ZodOptional<z.ZodString>;
                entryPoint: z.ZodString;
                id: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                queue: z.ZodOptional<z.ZodObject<{
                    concurrencyLimit: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
                } & {
                    name: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                }, {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                }>>;
                retry: z.ZodOptional<z.ZodObject<{
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    factor: z.ZodOptional<z.ZodNumber>;
                    minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                    maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                    randomize: z.ZodOptional<z.ZodBoolean>;
                    outOfMemory: z.ZodOptional<z.ZodObject<{
                        machine: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
                    }, "strip", z.ZodTypeAny, {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    }, {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                }, {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                }>>;
                machine: z.ZodOptional<z.ZodObject<{
                    cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
                    memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
                    preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
                }, "strip", z.ZodTypeAny, {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                }, {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                }>>;
                triggerSource: z.ZodOptional<z.ZodString>;
                schedule: z.ZodOptional<z.ZodObject<{
                    cron: z.ZodString;
                    timezone: z.ZodString;
                    environments: z.ZodOptional<z.ZodArray<z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                }, {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                }>>;
                maxDuration: z.ZodOptional<z.ZodNumber>;
                payloadSchema: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                filePath: string;
                entryPoint: string;
                maxDuration?: number | undefined;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                exportName?: string | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                } | undefined;
                description?: string | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                } | undefined;
                payloadSchema?: unknown;
            }, {
                id: string;
                filePath: string;
                entryPoint: string;
                maxDuration?: number | undefined;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                exportName?: string | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                } | undefined;
                description?: string | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                } | undefined;
                payloadSchema?: unknown;
            }>, "many">;
            queues: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                concurrencyLimit: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                concurrencyLimit?: number | null | undefined;
            }, {
                name: string;
                concurrencyLimit?: number | null | undefined;
            }>, "many">>;
            workerEntryPoint: z.ZodString;
            controllerEntryPoint: z.ZodOptional<z.ZodString>;
            loaderEntryPoint: z.ZodOptional<z.ZodString>;
            initEntryPoint: z.ZodOptional<z.ZodString>;
            runtime: z.ZodEnum<["node", "node-22", "bun"]>;
            runtimeVersion: z.ZodOptional<z.ZodString>;
            customConditions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            timings: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodNumber>>;
            processKeepAlive: z.ZodOptional<z.ZodObject<{
                enabled: z.ZodBoolean;
                maxExecutionsPerProcess: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                enabled: boolean;
                maxExecutionsPerProcess?: number | undefined;
            }, {
                enabled: boolean;
                maxExecutionsPerProcess?: number | undefined;
            }>>;
            otelImportHook: z.ZodOptional<z.ZodObject<{
                include: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                exclude: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            }, {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            runtime: "node" | "node-22" | "bun";
            tasks: {
                id: string;
                filePath: string;
                entryPoint: string;
                maxDuration?: number | undefined;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                exportName?: string | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                } | undefined;
                description?: string | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                } | undefined;
                payloadSchema?: unknown;
            }[];
            configPath: string;
            workerEntryPoint: string;
            runtimeVersion?: string | undefined;
            queues?: {
                name: string;
                concurrencyLimit?: number | null | undefined;
            }[] | undefined;
            loaderEntryPoint?: string | undefined;
            initEntryPoint?: string | undefined;
            customConditions?: string[] | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
            controllerEntryPoint?: string | undefined;
            timings?: Record<string, number> | undefined;
            processKeepAlive?: {
                enabled: boolean;
                maxExecutionsPerProcess?: number | undefined;
            } | undefined;
        }, {
            runtime: "node" | "node-22" | "bun";
            tasks: {
                id: string;
                filePath: string;
                entryPoint: string;
                maxDuration?: number | undefined;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                exportName?: string | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                } | undefined;
                description?: string | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                } | undefined;
                payloadSchema?: unknown;
            }[];
            configPath: string;
            workerEntryPoint: string;
            runtimeVersion?: string | undefined;
            queues?: {
                name: string;
                concurrencyLimit?: number | null | undefined;
            }[] | undefined;
            loaderEntryPoint?: string | undefined;
            initEntryPoint?: string | undefined;
            customConditions?: string[] | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
            controllerEntryPoint?: string | undefined;
            timings?: Record<string, number> | undefined;
            processKeepAlive?: {
                enabled: boolean;
                maxExecutionsPerProcess?: number | undefined;
            } | undefined;
        }>;
        importErrors: z.ZodArray<z.ZodObject<{
            message: z.ZodString;
            file: z.ZodString;
            stack: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            message: string;
            file: string;
            name?: string | undefined;
            stack?: string | undefined;
        }, {
            message: string;
            file: string;
            name?: string | undefined;
            stack?: string | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        version: "v1";
        manifest: {
            runtime: "node" | "node-22" | "bun";
            tasks: {
                id: string;
                filePath: string;
                entryPoint: string;
                maxDuration?: number | undefined;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                exportName?: string | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                } | undefined;
                description?: string | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                } | undefined;
                payloadSchema?: unknown;
            }[];
            configPath: string;
            workerEntryPoint: string;
            runtimeVersion?: string | undefined;
            queues?: {
                name: string;
                concurrencyLimit?: number | null | undefined;
            }[] | undefined;
            loaderEntryPoint?: string | undefined;
            initEntryPoint?: string | undefined;
            customConditions?: string[] | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
            controllerEntryPoint?: string | undefined;
            timings?: Record<string, number> | undefined;
            processKeepAlive?: {
                enabled: boolean;
                maxExecutionsPerProcess?: number | undefined;
            } | undefined;
        };
        importErrors: {
            message: string;
            file: string;
            name?: string | undefined;
            stack?: string | undefined;
        }[];
    }, {
        manifest: {
            runtime: "node" | "node-22" | "bun";
            tasks: {
                id: string;
                filePath: string;
                entryPoint: string;
                maxDuration?: number | undefined;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                exportName?: string | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                } | undefined;
                description?: string | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                } | undefined;
                payloadSchema?: unknown;
            }[];
            configPath: string;
            workerEntryPoint: string;
            runtimeVersion?: string | undefined;
            queues?: {
                name: string;
                concurrencyLimit?: number | null | undefined;
            }[] | undefined;
            loaderEntryPoint?: string | undefined;
            initEntryPoint?: string | undefined;
            customConditions?: string[] | undefined;
            otelImportHook?: {
                include?: string[] | undefined;
                exclude?: string[] | undefined;
            } | undefined;
            controllerEntryPoint?: string | undefined;
            timings?: Record<string, number> | undefined;
            processKeepAlive?: {
                enabled: boolean;
                maxExecutionsPerProcess?: number | undefined;
            } | undefined;
        };
        importErrors: {
            message: string;
            file: string;
            name?: string | undefined;
            stack?: string | undefined;
        }[];
        version?: "v1" | undefined;
    }>;
    TASKS_FAILED_TO_PARSE: z.ZodObject<{
        version: z.ZodDefault<z.ZodLiteral<"v1">>;
        tasks: z.ZodUnknown;
        zodIssues: z.ZodType<z.ZodIssue[], z.ZodTypeDef, z.ZodIssue[]>;
    }, "strip", z.ZodTypeAny, {
        version: "v1";
        zodIssues: z.ZodIssue[];
        tasks?: unknown;
    }, {
        zodIssues: z.ZodIssue[];
        version?: "v1" | undefined;
        tasks?: unknown;
    }>;
    UNCAUGHT_EXCEPTION: z.ZodObject<{
        version: z.ZodDefault<z.ZodLiteral<"v1">>;
        error: z.ZodObject<{
            name: z.ZodString;
            message: z.ZodString;
            stack: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            message: string;
            name: string;
            stack?: string | undefined;
        }, {
            message: string;
            name: string;
            stack?: string | undefined;
        }>;
        origin: z.ZodEnum<["uncaughtException", "unhandledRejection"]>;
    }, "strip", z.ZodTypeAny, {
        error: {
            message: string;
            name: string;
            stack?: string | undefined;
        };
        version: "v1";
        origin: "uncaughtException" | "unhandledRejection";
    }, {
        error: {
            message: string;
            name: string;
            stack?: string | undefined;
        };
        origin: "uncaughtException" | "unhandledRejection";
        version?: "v1" | undefined;
    }>;
};
export declare const ExecutorToWorkerMessageCatalog: {
    TASK_RUN_COMPLETED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            execution: z.ZodObject<{
                task: z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                }, z.ZodTypeAny, "passthrough">>;
                queue: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                }, {
                    name: string;
                    id: string;
                }>;
                environment: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                    branchName: z.ZodOptional<z.ZodString>;
                    git: z.ZodOptional<z.ZodObject<{
                        provider: z.ZodOptional<z.ZodString>;
                        source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                        ghUsername: z.ZodOptional<z.ZodString>;
                        ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                        commitAuthorName: z.ZodOptional<z.ZodString>;
                        commitMessage: z.ZodOptional<z.ZodString>;
                        commitRef: z.ZodOptional<z.ZodString>;
                        commitSha: z.ZodOptional<z.ZodString>;
                        dirty: z.ZodOptional<z.ZodBoolean>;
                        remoteUrl: z.ZodOptional<z.ZodString>;
                        pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                        pullRequestTitle: z.ZodOptional<z.ZodString>;
                        pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                    }, "strip", z.ZodTypeAny, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }>;
                organization: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                }>;
                project: z.ZodObject<{
                    id: z.ZodString;
                    ref: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }>;
                machine: z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }>;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>>;
                deployment: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                    shortCode: z.ZodString;
                    version: z.ZodString;
                    runtime: z.ZodString;
                    runtimeVersion: z.ZodString;
                    git: z.ZodOptional<z.ZodObject<{
                        provider: z.ZodOptional<z.ZodString>;
                        source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                        ghUsername: z.ZodOptional<z.ZodString>;
                        ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                        commitAuthorName: z.ZodOptional<z.ZodString>;
                        commitMessage: z.ZodOptional<z.ZodString>;
                        commitRef: z.ZodOptional<z.ZodString>;
                        commitSha: z.ZodOptional<z.ZodString>;
                        dirty: z.ZodOptional<z.ZodBoolean>;
                        remoteUrl: z.ZodOptional<z.ZodString>;
                        pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                        pullRequestTitle: z.ZodOptional<z.ZodString>;
                        pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                    }, "strip", z.ZodTypeAny, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }, {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }>>;
                attempt: z.ZodObject<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                }, z.ZodTypeAny, "passthrough">>;
                run: z.ZodIntersection<z.ZodObject<{
                    id: z.ZodString;
                    payload: z.ZodString;
                    payloadType: z.ZodString;
                    tags: z.ZodArray<z.ZodString, "many">;
                    isTest: z.ZodDefault<z.ZodBoolean>;
                    createdAt: z.ZodDate;
                    startedAt: z.ZodDefault<z.ZodDate>;
                    idempotencyKey: z.ZodOptional<z.ZodString>;
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    version: z.ZodOptional<z.ZodString>;
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    maxDuration: z.ZodOptional<z.ZodNumber>;
                    priority: z.ZodOptional<z.ZodNumber>;
                    baseCostInCents: z.ZodOptional<z.ZodNumber>;
                    parentTaskRunId: z.ZodOptional<z.ZodString>;
                    rootTaskRunId: z.ZodOptional<z.ZodString>;
                    durationMs: z.ZodOptional<z.ZodNumber>;
                    costInCents: z.ZodOptional<z.ZodNumber>;
                    region: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                }, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                }>, z.ZodObject<{
                    traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    traceContext?: Record<string, unknown> | undefined;
                }, {
                    traceContext?: Record<string, unknown> | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            }, {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            }>;
            result: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                ok: z.ZodLiteral<true>;
                id: z.ZodString;
                output: z.ZodOptional<z.ZodString>;
                outputType: z.ZodString;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            }, {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            }>, z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            execution: {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            };
            result: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            } | {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            };
        }, {
            execution: {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            };
            result: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            } | {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            };
            version?: "v1" | undefined;
        }>;
    };
    TASK_HEARTBEAT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            version: "v1";
        }, {
            id: string;
            version?: "v1" | undefined;
        }>;
    };
    UNCAUGHT_EXCEPTION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            error: z.ZodObject<{
                name: z.ZodString;
                message: z.ZodString;
                stack: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                name: string;
                stack?: string | undefined;
            }, {
                message: string;
                name: string;
                stack?: string | undefined;
            }>;
            origin: z.ZodEnum<["uncaughtException", "unhandledRejection"]>;
        }, "strip", z.ZodTypeAny, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
            };
            version: "v1";
            origin: "uncaughtException" | "unhandledRejection";
        }, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
            };
            origin: "uncaughtException" | "unhandledRejection";
            version?: "v1" | undefined;
        }>;
    };
    SEND_DEBUG_LOG: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            message: z.ZodString;
            properties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
        }, "strip", z.ZodTypeAny, {
            message: string;
            version: "v1";
            properties?: Record<string, unknown> | undefined;
        }, {
            message: string;
            version?: "v1" | undefined;
            properties?: Record<string, unknown> | undefined;
        }>;
    };
    SET_SUSPENDABLE: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            suspendable: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            suspendable: boolean;
        }, {
            suspendable: boolean;
            version?: "v1" | undefined;
        }>;
    };
};
export declare const WorkerToExecutorMessageCatalog: {
    EXECUTE_TASK_RUN: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            execution: z.ZodObject<{
                task: z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                }, z.ZodTypeAny, "passthrough">>;
                queue: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                }, {
                    name: string;
                    id: string;
                }>;
                environment: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                    branchName: z.ZodOptional<z.ZodString>;
                    git: z.ZodOptional<z.ZodObject<{
                        provider: z.ZodOptional<z.ZodString>;
                        source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                        ghUsername: z.ZodOptional<z.ZodString>;
                        ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                        commitAuthorName: z.ZodOptional<z.ZodString>;
                        commitMessage: z.ZodOptional<z.ZodString>;
                        commitRef: z.ZodOptional<z.ZodString>;
                        commitSha: z.ZodOptional<z.ZodString>;
                        dirty: z.ZodOptional<z.ZodBoolean>;
                        remoteUrl: z.ZodOptional<z.ZodString>;
                        pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                        pullRequestTitle: z.ZodOptional<z.ZodString>;
                        pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                    }, "strip", z.ZodTypeAny, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }>;
                organization: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                }>;
                project: z.ZodObject<{
                    id: z.ZodString;
                    ref: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }>;
                machine: z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }>;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>>;
                deployment: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                    shortCode: z.ZodString;
                    version: z.ZodString;
                    runtime: z.ZodString;
                    runtimeVersion: z.ZodString;
                    git: z.ZodOptional<z.ZodObject<{
                        provider: z.ZodOptional<z.ZodString>;
                        source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                        ghUsername: z.ZodOptional<z.ZodString>;
                        ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                        commitAuthorName: z.ZodOptional<z.ZodString>;
                        commitMessage: z.ZodOptional<z.ZodString>;
                        commitRef: z.ZodOptional<z.ZodString>;
                        commitSha: z.ZodOptional<z.ZodString>;
                        dirty: z.ZodOptional<z.ZodBoolean>;
                        remoteUrl: z.ZodOptional<z.ZodString>;
                        pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                        pullRequestTitle: z.ZodOptional<z.ZodString>;
                        pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                    }, "strip", z.ZodTypeAny, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }, {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }>>;
                attempt: z.ZodObject<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                }, z.ZodTypeAny, "passthrough">>;
                run: z.ZodIntersection<z.ZodObject<{
                    id: z.ZodString;
                    payload: z.ZodString;
                    payloadType: z.ZodString;
                    tags: z.ZodArray<z.ZodString, "many">;
                    isTest: z.ZodDefault<z.ZodBoolean>;
                    createdAt: z.ZodDate;
                    startedAt: z.ZodDefault<z.ZodDate>;
                    idempotencyKey: z.ZodOptional<z.ZodString>;
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    version: z.ZodOptional<z.ZodString>;
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    maxDuration: z.ZodOptional<z.ZodNumber>;
                    priority: z.ZodOptional<z.ZodNumber>;
                    baseCostInCents: z.ZodOptional<z.ZodNumber>;
                    parentTaskRunId: z.ZodOptional<z.ZodString>;
                    rootTaskRunId: z.ZodOptional<z.ZodString>;
                    durationMs: z.ZodOptional<z.ZodNumber>;
                    costInCents: z.ZodOptional<z.ZodNumber>;
                    region: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                }, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                }>, z.ZodObject<{
                    traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    traceContext?: Record<string, unknown> | undefined;
                }, {
                    traceContext?: Record<string, unknown> | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            }, {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            }>;
            traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            metadata: z.ZodObject<{
                id: z.ZodString;
                version: z.ZodString;
                contentHash: z.ZodString;
                engine: z.ZodOptional<z.ZodEnum<["V1", "V2"]>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                version: string;
                contentHash: string;
                engine?: "V1" | "V2" | undefined;
            }, {
                id: string;
                version: string;
                contentHash: string;
                engine?: "V1" | "V2" | undefined;
            }>;
            metrics: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                event: z.ZodString;
                timestamp: z.ZodNumber;
                duration: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                event: string;
                name: string;
                timestamp: number;
                duration: number;
            }, {
                event: string;
                name: string;
                timestamp: number;
                duration: number;
            }>, "many">>;
            env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            isWarmStart: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            metadata: {
                id: string;
                version: string;
                contentHash: string;
                engine?: "V1" | "V2" | undefined;
            };
            version: "v1";
            traceContext: Record<string, unknown>;
            execution: {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            };
            metrics?: {
                event: string;
                name: string;
                timestamp: number;
                duration: number;
            }[] | undefined;
            env?: Record<string, string> | undefined;
            isWarmStart?: boolean | undefined;
        }, {
            metadata: {
                id: string;
                version: string;
                contentHash: string;
                engine?: "V1" | "V2" | undefined;
            };
            traceContext: Record<string, unknown>;
            execution: {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            };
            version?: "v1" | undefined;
            metrics?: {
                event: string;
                name: string;
                timestamp: number;
                duration: number;
            }[] | undefined;
            env?: Record<string, string> | undefined;
            isWarmStart?: boolean | undefined;
        }>;
    };
    FLUSH: {
        message: z.ZodObject<{
            timeoutInMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            timeoutInMs: number;
        }, {
            timeoutInMs: number;
        }>;
        callback: z.ZodVoid;
    };
    CANCEL: {
        message: z.ZodObject<{
            timeoutInMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            timeoutInMs: number;
        }, {
            timeoutInMs: number;
        }>;
        callback: z.ZodVoid;
    };
    RESOLVE_WAITPOINT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            waitpoint: z.ZodObject<{
                id: z.ZodString;
                index: z.ZodOptional<z.ZodNumber>;
                friendlyId: z.ZodString;
                type: z.ZodEnum<[import("./runEngine.js").WaitpointType]>;
                completedAt: z.ZodDate;
                idempotencyKey: z.ZodOptional<z.ZodString>;
                completedByTaskRun: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                    friendlyId: z.ZodString;
                    batch: z.ZodOptional<z.ZodObject<{
                        id: z.ZodString;
                        friendlyId: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        friendlyId: string;
                    }, {
                        id: string;
                        friendlyId: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    friendlyId: string;
                    batch?: {
                        id: string;
                        friendlyId: string;
                    } | undefined;
                }, {
                    id: string;
                    friendlyId: string;
                    batch?: {
                        id: string;
                        friendlyId: string;
                    } | undefined;
                }>>;
                completedAfter: z.ZodOptional<z.ZodDate>;
                completedByBatch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                    friendlyId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    friendlyId: string;
                }, {
                    id: string;
                    friendlyId: string;
                }>>;
                output: z.ZodOptional<z.ZodString>;
                outputType: z.ZodOptional<z.ZodString>;
                outputIsError: z.ZodBoolean;
            }, "strip", z.ZodTypeAny, {
                type: import("./runEngine.js").WaitpointType;
                id: string;
                friendlyId: string;
                completedAt: Date;
                outputIsError: boolean;
                idempotencyKey?: string | undefined;
                output?: string | undefined;
                outputType?: string | undefined;
                index?: number | undefined;
                completedByTaskRun?: {
                    id: string;
                    friendlyId: string;
                    batch?: {
                        id: string;
                        friendlyId: string;
                    } | undefined;
                } | undefined;
                completedAfter?: Date | undefined;
                completedByBatch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            }, {
                type: import("./runEngine.js").WaitpointType;
                id: string;
                friendlyId: string;
                completedAt: Date;
                outputIsError: boolean;
                idempotencyKey?: string | undefined;
                output?: string | undefined;
                outputType?: string | undefined;
                index?: number | undefined;
                completedByTaskRun?: {
                    id: string;
                    friendlyId: string;
                    batch?: {
                        id: string;
                        friendlyId: string;
                    } | undefined;
                } | undefined;
                completedAfter?: Date | undefined;
                completedByBatch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            waitpoint: {
                type: import("./runEngine.js").WaitpointType;
                id: string;
                friendlyId: string;
                completedAt: Date;
                outputIsError: boolean;
                idempotencyKey?: string | undefined;
                output?: string | undefined;
                outputType?: string | undefined;
                index?: number | undefined;
                completedByTaskRun?: {
                    id: string;
                    friendlyId: string;
                    batch?: {
                        id: string;
                        friendlyId: string;
                    } | undefined;
                } | undefined;
                completedAfter?: Date | undefined;
                completedByBatch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            };
        }, {
            waitpoint: {
                type: import("./runEngine.js").WaitpointType;
                id: string;
                friendlyId: string;
                completedAt: Date;
                outputIsError: boolean;
                idempotencyKey?: string | undefined;
                output?: string | undefined;
                outputType?: string | undefined;
                index?: number | undefined;
                completedByTaskRun?: {
                    id: string;
                    friendlyId: string;
                    batch?: {
                        id: string;
                        friendlyId: string;
                    } | undefined;
                } | undefined;
                completedAfter?: Date | undefined;
                completedByBatch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            };
            version?: "v1" | undefined;
        }>;
    };
};
export declare const ProviderToPlatformMessages: {
    LOG: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            data: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            data: string;
        }, {
            data: string;
            version?: "v1" | undefined;
        }>;
    };
    LOG_WITH_ACK: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            data: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            data: string;
        }, {
            data: string;
            version?: "v1" | undefined;
        }>;
        callback: z.ZodObject<{
            status: z.ZodLiteral<"ok">;
        }, "strip", z.ZodTypeAny, {
            status: "ok";
        }, {
            status: "ok";
        }>;
    };
    WORKER_CRASHED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            reason: z.ZodOptional<z.ZodString>;
            exitCode: z.ZodOptional<z.ZodNumber>;
            message: z.ZodOptional<z.ZodString>;
            logs: z.ZodOptional<z.ZodString>;
            /** This means we should only update the error if one exists */
            overrideCompletion: z.ZodOptional<z.ZodBoolean>;
            errorCode: z.ZodOptional<z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
            message?: string | undefined;
            reason?: string | undefined;
            exitCode?: number | undefined;
            logs?: string | undefined;
            overrideCompletion?: boolean | undefined;
            errorCode?: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK" | undefined;
        }, {
            runId: string;
            message?: string | undefined;
            version?: "v1" | undefined;
            reason?: string | undefined;
            exitCode?: number | undefined;
            logs?: string | undefined;
            overrideCompletion?: boolean | undefined;
            errorCode?: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK" | undefined;
        }>;
    };
    INDEXING_FAILED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            deploymentId: z.ZodString;
            error: z.ZodObject<{
                name: z.ZodString;
                message: z.ZodString;
                stack: z.ZodOptional<z.ZodString>;
                stderr: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }>;
            overrideCompletion: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            version: "v1";
            deploymentId: string;
            overrideCompletion?: boolean | undefined;
        }, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            deploymentId: string;
            version?: "v1" | undefined;
            overrideCompletion?: boolean | undefined;
        }>;
    };
};
export declare const PlatformToProviderMessages: {
    INDEX: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            imageTag: z.ZodString;
            shortCode: z.ZodString;
            apiKey: z.ZodString;
            apiUrl: z.ZodString;
            envId: z.ZodString;
            envType: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
            orgId: z.ZodString;
            projectId: z.ZodString;
            deploymentId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            shortCode: string;
            imageTag: string;
            apiKey: string;
            apiUrl: string;
            projectId: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            deploymentId: string;
        }, {
            shortCode: string;
            imageTag: string;
            apiKey: string;
            apiUrl: string;
            projectId: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            deploymentId: string;
            version?: "v1" | undefined;
        }>;
        callback: z.ZodDiscriminatedUnion<"success", [z.ZodObject<{
            success: z.ZodLiteral<false>;
            error: z.ZodObject<{
                name: z.ZodString;
                message: z.ZodString;
                stack: z.ZodOptional<z.ZodString>;
                stderr: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            success: false;
        }, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            success: false;
        }>, z.ZodObject<{
            success: z.ZodLiteral<true>;
        }, "strip", z.ZodTypeAny, {
            success: true;
        }, {
            success: true;
        }>]>;
    };
    RESTORE: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            type: z.ZodEnum<["DOCKER", "KUBERNETES"]>;
            location: z.ZodString;
            reason: z.ZodOptional<z.ZodString>;
            imageRef: z.ZodString;
            attemptNumber: z.ZodOptional<z.ZodNumber>;
            machine: z.ZodObject<{
                name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                cpu: z.ZodNumber;
                memory: z.ZodNumber;
                centsPerMs: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            }, {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            }>;
            checkpointId: z.ZodString;
            envId: z.ZodString;
            envType: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
            orgId: z.ZodString;
            projectId: z.ZodString;
            runId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "DOCKER" | "KUBERNETES";
            version: "v1";
            machine: {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            };
            runId: string;
            location: string;
            imageRef: string;
            projectId: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            checkpointId: string;
            attemptNumber?: number | undefined;
            reason?: string | undefined;
        }, {
            type: "DOCKER" | "KUBERNETES";
            machine: {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            };
            runId: string;
            location: string;
            imageRef: string;
            projectId: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            checkpointId: string;
            version?: "v1" | undefined;
            attemptNumber?: number | undefined;
            reason?: string | undefined;
        }>;
    };
    PRE_PULL_DEPLOYMENT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            imageRef: z.ZodString;
            shortCode: z.ZodString;
            envId: z.ZodString;
            envType: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
            orgId: z.ZodString;
            projectId: z.ZodString;
            deploymentId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            shortCode: string;
            imageRef: string;
            projectId: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            deploymentId: string;
        }, {
            shortCode: string;
            imageRef: string;
            projectId: string;
            envId: string;
            envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            orgId: string;
            deploymentId: string;
            version?: "v1" | undefined;
        }>;
    };
};
export declare const CoordinatorToPlatformMessages: {
    LOG: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            metadata: z.ZodAny;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            text: string;
            metadata?: any;
        }, {
            text: string;
            metadata?: any;
            version?: "v1" | undefined;
        }>;
    };
    CREATE_WORKER: {
        message: z.ZodDiscriminatedUnion<"version", [z.ZodObject<{
            projectRef: z.ZodString;
            envId: z.ZodString;
            deploymentId: z.ZodString;
            metadata: z.ZodObject<{
                cliPackageVersion: z.ZodOptional<z.ZodString>;
                contentHash: z.ZodString;
                packageVersion: z.ZodString;
                tasks: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    filePath: z.ZodString;
                    exportName: z.ZodOptional<z.ZodString>;
                    queue: z.ZodOptional<z.ZodObject<{
                        concurrencyLimit: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
                    } & {
                        name: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        name?: string | undefined;
                        concurrencyLimit?: number | null | undefined;
                    }, {
                        name?: string | undefined;
                        concurrencyLimit?: number | null | undefined;
                    }>>;
                    retry: z.ZodOptional<z.ZodObject<{
                        maxAttempts: z.ZodOptional<z.ZodNumber>;
                        factor: z.ZodOptional<z.ZodNumber>;
                        minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                        maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                        randomize: z.ZodOptional<z.ZodBoolean>;
                        outOfMemory: z.ZodOptional<z.ZodObject<{
                            machine: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
                        }, "strip", z.ZodTypeAny, {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        }, {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                        outOfMemory?: {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        } | undefined;
                    }, {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                        outOfMemory?: {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        } | undefined;
                    }>>;
                    machine: z.ZodOptional<z.ZodObject<{
                        cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
                        memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
                        preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
                    }, "strip", z.ZodTypeAny, {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    }, {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    }>>;
                    triggerSource: z.ZodOptional<z.ZodString>;
                    schedule: z.ZodOptional<z.ZodObject<{
                        cron: z.ZodString;
                        timezone: z.ZodString;
                        environments: z.ZodOptional<z.ZodArray<z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>, "many">>;
                    }, "strip", z.ZodTypeAny, {
                        cron: string;
                        timezone: string;
                        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                    }, {
                        cron: string;
                        timezone: string;
                        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                    }>>;
                    maxDuration: z.ZodOptional<z.ZodNumber>;
                    payloadSchema: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    filePath: string;
                    maxDuration?: number | undefined;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | null | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    exportName?: string | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                        outOfMemory?: {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        } | undefined;
                    } | undefined;
                    description?: string | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                    } | undefined;
                    payloadSchema?: unknown;
                }, {
                    id: string;
                    filePath: string;
                    maxDuration?: number | undefined;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | null | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    exportName?: string | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                        outOfMemory?: {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        } | undefined;
                    } | undefined;
                    description?: string | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                    } | undefined;
                    payloadSchema?: unknown;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                contentHash: string;
                packageVersion: string;
                tasks: {
                    id: string;
                    filePath: string;
                    maxDuration?: number | undefined;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | null | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    exportName?: string | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                        outOfMemory?: {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        } | undefined;
                    } | undefined;
                    description?: string | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                    } | undefined;
                    payloadSchema?: unknown;
                }[];
                cliPackageVersion?: string | undefined;
            }, {
                contentHash: string;
                packageVersion: string;
                tasks: {
                    id: string;
                    filePath: string;
                    maxDuration?: number | undefined;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | null | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    exportName?: string | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                        outOfMemory?: {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        } | undefined;
                    } | undefined;
                    description?: string | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                    } | undefined;
                    payloadSchema?: unknown;
                }[];
                cliPackageVersion?: string | undefined;
            }>;
        } & {
            version: z.ZodLiteral<"v1">;
        }, "strip", z.ZodTypeAny, {
            metadata: {
                contentHash: string;
                packageVersion: string;
                tasks: {
                    id: string;
                    filePath: string;
                    maxDuration?: number | undefined;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | null | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    exportName?: string | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                        outOfMemory?: {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        } | undefined;
                    } | undefined;
                    description?: string | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                    } | undefined;
                    payloadSchema?: unknown;
                }[];
                cliPackageVersion?: string | undefined;
            };
            version: "v1";
            envId: string;
            deploymentId: string;
            projectRef: string;
        }, {
            metadata: {
                contentHash: string;
                packageVersion: string;
                tasks: {
                    id: string;
                    filePath: string;
                    maxDuration?: number | undefined;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | null | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    exportName?: string | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                        outOfMemory?: {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        } | undefined;
                    } | undefined;
                    description?: string | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                    } | undefined;
                    payloadSchema?: unknown;
                }[];
                cliPackageVersion?: string | undefined;
            };
            version: "v1";
            envId: string;
            deploymentId: string;
            projectRef: string;
        }>, z.ZodObject<{
            projectRef: z.ZodString;
            envId: z.ZodString;
            deploymentId: z.ZodString;
            metadata: z.ZodObject<{
                cliPackageVersion: z.ZodOptional<z.ZodString>;
                contentHash: z.ZodString;
                packageVersion: z.ZodString;
                tasks: z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    filePath: z.ZodString;
                    exportName: z.ZodOptional<z.ZodString>;
                    queue: z.ZodOptional<z.ZodObject<{
                        concurrencyLimit: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
                    } & {
                        name: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        name?: string | undefined;
                        concurrencyLimit?: number | null | undefined;
                    }, {
                        name?: string | undefined;
                        concurrencyLimit?: number | null | undefined;
                    }>>;
                    retry: z.ZodOptional<z.ZodObject<{
                        maxAttempts: z.ZodOptional<z.ZodNumber>;
                        factor: z.ZodOptional<z.ZodNumber>;
                        minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                        maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                        randomize: z.ZodOptional<z.ZodBoolean>;
                        outOfMemory: z.ZodOptional<z.ZodObject<{
                            machine: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
                        }, "strip", z.ZodTypeAny, {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        }, {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                        outOfMemory?: {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        } | undefined;
                    }, {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                        outOfMemory?: {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        } | undefined;
                    }>>;
                    machine: z.ZodOptional<z.ZodObject<{
                        cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
                        memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
                        preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
                    }, "strip", z.ZodTypeAny, {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    }, {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    }>>;
                    triggerSource: z.ZodOptional<z.ZodString>;
                    schedule: z.ZodOptional<z.ZodObject<{
                        cron: z.ZodString;
                        timezone: z.ZodString;
                        environments: z.ZodOptional<z.ZodArray<z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>, "many">>;
                    }, "strip", z.ZodTypeAny, {
                        cron: string;
                        timezone: string;
                        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                    }, {
                        cron: string;
                        timezone: string;
                        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                    }>>;
                    maxDuration: z.ZodOptional<z.ZodNumber>;
                    payloadSchema: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    filePath: string;
                    maxDuration?: number | undefined;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | null | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    exportName?: string | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                        outOfMemory?: {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        } | undefined;
                    } | undefined;
                    description?: string | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                    } | undefined;
                    payloadSchema?: unknown;
                }, {
                    id: string;
                    filePath: string;
                    maxDuration?: number | undefined;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | null | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    exportName?: string | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                        outOfMemory?: {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        } | undefined;
                    } | undefined;
                    description?: string | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                    } | undefined;
                    payloadSchema?: unknown;
                }>, "many">;
            }, "strip", z.ZodTypeAny, {
                contentHash: string;
                packageVersion: string;
                tasks: {
                    id: string;
                    filePath: string;
                    maxDuration?: number | undefined;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | null | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    exportName?: string | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                        outOfMemory?: {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        } | undefined;
                    } | undefined;
                    description?: string | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                    } | undefined;
                    payloadSchema?: unknown;
                }[];
                cliPackageVersion?: string | undefined;
            }, {
                contentHash: string;
                packageVersion: string;
                tasks: {
                    id: string;
                    filePath: string;
                    maxDuration?: number | undefined;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | null | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    exportName?: string | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                        outOfMemory?: {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        } | undefined;
                    } | undefined;
                    description?: string | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                    } | undefined;
                    payloadSchema?: unknown;
                }[];
                cliPackageVersion?: string | undefined;
            }>;
        } & {
            version: z.ZodLiteral<"v2">;
            supportsLazyAttempts: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            metadata: {
                contentHash: string;
                packageVersion: string;
                tasks: {
                    id: string;
                    filePath: string;
                    maxDuration?: number | undefined;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | null | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    exportName?: string | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                        outOfMemory?: {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        } | undefined;
                    } | undefined;
                    description?: string | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                    } | undefined;
                    payloadSchema?: unknown;
                }[];
                cliPackageVersion?: string | undefined;
            };
            version: "v2";
            supportsLazyAttempts: boolean;
            envId: string;
            deploymentId: string;
            projectRef: string;
        }, {
            metadata: {
                contentHash: string;
                packageVersion: string;
                tasks: {
                    id: string;
                    filePath: string;
                    maxDuration?: number | undefined;
                    queue?: {
                        name?: string | undefined;
                        concurrencyLimit?: number | null | undefined;
                    } | undefined;
                    machine?: {
                        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                    exportName?: string | undefined;
                    retry?: {
                        maxAttempts?: number | undefined;
                        factor?: number | undefined;
                        minTimeoutInMs?: number | undefined;
                        maxTimeoutInMs?: number | undefined;
                        randomize?: boolean | undefined;
                        outOfMemory?: {
                            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                        } | undefined;
                    } | undefined;
                    description?: string | undefined;
                    triggerSource?: string | undefined;
                    schedule?: {
                        cron: string;
                        timezone: string;
                        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                    } | undefined;
                    payloadSchema?: unknown;
                }[];
                cliPackageVersion?: string | undefined;
            };
            version: "v2";
            supportsLazyAttempts: boolean;
            envId: string;
            deploymentId: string;
            projectRef: string;
        }>]>;
        callback: z.ZodDiscriminatedUnion<"success", [z.ZodObject<{
            success: z.ZodLiteral<false>;
        }, "strip", z.ZodTypeAny, {
            success: false;
        }, {
            success: false;
        }>, z.ZodObject<{
            success: z.ZodLiteral<true>;
        }, "strip", z.ZodTypeAny, {
            success: true;
        }, {
            success: true;
        }>]>;
    };
    CREATE_TASK_RUN_ATTEMPT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            envId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
            envId: string;
        }, {
            runId: string;
            envId: string;
            version?: "v1" | undefined;
        }>;
        callback: z.ZodDiscriminatedUnion<"success", [z.ZodObject<{
            success: z.ZodLiteral<false>;
            reason: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            success: false;
            reason?: string | undefined;
        }, {
            success: false;
            reason?: string | undefined;
        }>, z.ZodObject<{
            success: z.ZodLiteral<true>;
            executionPayload: z.ZodObject<{
                execution: z.ZodObject<{
                    task: z.ZodObject<{
                        id: z.ZodString;
                        filePath: z.ZodString;
                        exportName: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    }, {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    }>;
                    attempt: z.ZodObject<{
                        number: z.ZodNumber;
                        startedAt: z.ZodDate;
                        id: z.ZodString;
                        backgroundWorkerId: z.ZodString;
                        backgroundWorkerTaskId: z.ZodString;
                        status: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }>;
                    run: z.ZodIntersection<z.ZodObject<{
                        id: z.ZodString;
                        payload: z.ZodString;
                        payloadType: z.ZodString;
                        tags: z.ZodArray<z.ZodString, "many">;
                        isTest: z.ZodDefault<z.ZodBoolean>;
                        createdAt: z.ZodDate;
                        startedAt: z.ZodDefault<z.ZodDate>;
                        idempotencyKey: z.ZodOptional<z.ZodString>;
                        maxAttempts: z.ZodOptional<z.ZodNumber>;
                        version: z.ZodOptional<z.ZodString>;
                        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                        maxDuration: z.ZodOptional<z.ZodNumber>;
                        context: z.ZodUnknown;
                        durationMs: z.ZodNumber;
                        costInCents: z.ZodNumber;
                        baseCostInCents: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    }, {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    }>, z.ZodObject<{
                        traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    }, "strip", z.ZodTypeAny, {
                        traceContext?: Record<string, unknown> | undefined;
                    }, {
                        traceContext?: Record<string, unknown> | undefined;
                    }>>;
                    queue: z.ZodObject<{
                        id: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                    }, {
                        name: string;
                        id: string;
                    }>;
                    environment: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                        branchName: z.ZodOptional<z.ZodString>;
                        git: z.ZodOptional<z.ZodObject<{
                            provider: z.ZodOptional<z.ZodString>;
                            source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                            ghUsername: z.ZodOptional<z.ZodString>;
                            ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                            commitAuthorName: z.ZodOptional<z.ZodString>;
                            commitMessage: z.ZodOptional<z.ZodString>;
                            commitRef: z.ZodOptional<z.ZodString>;
                            commitSha: z.ZodOptional<z.ZodString>;
                            dirty: z.ZodOptional<z.ZodBoolean>;
                            remoteUrl: z.ZodOptional<z.ZodString>;
                            pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                            pullRequestTitle: z.ZodOptional<z.ZodString>;
                            pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                        }, "strip", z.ZodTypeAny, {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        }, {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    }, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    }>;
                    organization: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                    }>;
                    project: z.ZodObject<{
                        id: z.ZodString;
                        ref: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }>;
                    batch: z.ZodOptional<z.ZodObject<{
                        id: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                    }, {
                        id: string;
                    }>>;
                } & {
                    worker: z.ZodObject<{
                        id: z.ZodString;
                        contentHash: z.ZodString;
                        version: z.ZodString;
                        type: z.ZodOptional<z.ZodEnum<["V1", "V2"]>>;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    }, {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    }>;
                    machine: z.ZodDefault<z.ZodObject<{
                        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                        cpu: z.ZodNumber;
                        memory: z.ZodNumber;
                        centsPerMs: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    }, {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    machine: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                }, {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    machine?: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    } | undefined;
                    batch?: {
                        id: string;
                    } | undefined;
                }>;
                traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                metrics: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    event: z.ZodString;
                    timestamp: z.ZodNumber;
                    duration: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }, {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                traceContext: Record<string, unknown>;
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    machine: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                environment?: Record<string, string> | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            }, {
                traceContext: Record<string, unknown>;
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    machine?: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    } | undefined;
                    batch?: {
                        id: string;
                    } | undefined;
                };
                environment?: Record<string, string> | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            success: true;
            executionPayload: {
                traceContext: Record<string, unknown>;
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    machine: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                environment?: Record<string, string> | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            };
        }, {
            success: true;
            executionPayload: {
                traceContext: Record<string, unknown>;
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    machine?: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    } | undefined;
                    batch?: {
                        id: string;
                    } | undefined;
                };
                environment?: Record<string, string> | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            };
        }>]>;
    };
    READY_FOR_EXECUTION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            totalCompletions: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
            totalCompletions: number;
        }, {
            runId: string;
            totalCompletions: number;
            version?: "v1" | undefined;
        }>;
        callback: z.ZodDiscriminatedUnion<"success", [z.ZodObject<{
            success: z.ZodLiteral<false>;
        }, "strip", z.ZodTypeAny, {
            success: false;
        }, {
            success: false;
        }>, z.ZodObject<{
            success: z.ZodLiteral<true>;
            payload: z.ZodObject<{
                execution: z.ZodObject<{
                    task: z.ZodObject<{
                        id: z.ZodString;
                        filePath: z.ZodString;
                        exportName: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    }, {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    }>;
                    attempt: z.ZodObject<{
                        number: z.ZodNumber;
                        startedAt: z.ZodDate;
                        id: z.ZodString;
                        backgroundWorkerId: z.ZodString;
                        backgroundWorkerTaskId: z.ZodString;
                        status: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }>;
                    run: z.ZodIntersection<z.ZodObject<{
                        id: z.ZodString;
                        payload: z.ZodString;
                        payloadType: z.ZodString;
                        tags: z.ZodArray<z.ZodString, "many">;
                        isTest: z.ZodDefault<z.ZodBoolean>;
                        createdAt: z.ZodDate;
                        startedAt: z.ZodDefault<z.ZodDate>;
                        idempotencyKey: z.ZodOptional<z.ZodString>;
                        maxAttempts: z.ZodOptional<z.ZodNumber>;
                        version: z.ZodOptional<z.ZodString>;
                        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                        maxDuration: z.ZodOptional<z.ZodNumber>;
                        context: z.ZodUnknown;
                        durationMs: z.ZodNumber;
                        costInCents: z.ZodNumber;
                        baseCostInCents: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    }, {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    }>, z.ZodObject<{
                        traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    }, "strip", z.ZodTypeAny, {
                        traceContext?: Record<string, unknown> | undefined;
                    }, {
                        traceContext?: Record<string, unknown> | undefined;
                    }>>;
                    queue: z.ZodObject<{
                        id: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                    }, {
                        name: string;
                        id: string;
                    }>;
                    environment: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                        branchName: z.ZodOptional<z.ZodString>;
                        git: z.ZodOptional<z.ZodObject<{
                            provider: z.ZodOptional<z.ZodString>;
                            source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                            ghUsername: z.ZodOptional<z.ZodString>;
                            ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                            commitAuthorName: z.ZodOptional<z.ZodString>;
                            commitMessage: z.ZodOptional<z.ZodString>;
                            commitRef: z.ZodOptional<z.ZodString>;
                            commitSha: z.ZodOptional<z.ZodString>;
                            dirty: z.ZodOptional<z.ZodBoolean>;
                            remoteUrl: z.ZodOptional<z.ZodString>;
                            pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                            pullRequestTitle: z.ZodOptional<z.ZodString>;
                            pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                        }, "strip", z.ZodTypeAny, {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        }, {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    }, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    }>;
                    organization: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                    }>;
                    project: z.ZodObject<{
                        id: z.ZodString;
                        ref: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }>;
                    batch: z.ZodOptional<z.ZodObject<{
                        id: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                    }, {
                        id: string;
                    }>>;
                } & {
                    worker: z.ZodObject<{
                        id: z.ZodString;
                        contentHash: z.ZodString;
                        version: z.ZodString;
                        type: z.ZodOptional<z.ZodEnum<["V1", "V2"]>>;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    }, {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    }>;
                    machine: z.ZodDefault<z.ZodObject<{
                        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                        cpu: z.ZodNumber;
                        memory: z.ZodNumber;
                        centsPerMs: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    }, {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    machine: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                }, {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    machine?: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    } | undefined;
                    batch?: {
                        id: string;
                    } | undefined;
                }>;
                traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                metrics: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    event: z.ZodString;
                    timestamp: z.ZodNumber;
                    duration: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }, {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                traceContext: Record<string, unknown>;
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    machine: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                environment?: Record<string, string> | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            }, {
                traceContext: Record<string, unknown>;
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    machine?: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    } | undefined;
                    batch?: {
                        id: string;
                    } | undefined;
                };
                environment?: Record<string, string> | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            payload: {
                traceContext: Record<string, unknown>;
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    machine: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                environment?: Record<string, string> | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            };
            success: true;
        }, {
            payload: {
                traceContext: Record<string, unknown>;
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    machine?: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    } | undefined;
                    batch?: {
                        id: string;
                    } | undefined;
                };
                environment?: Record<string, string> | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            };
            success: true;
        }>]>;
    };
    READY_FOR_LAZY_ATTEMPT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            envId: z.ZodString;
            totalCompletions: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
            envId: string;
            totalCompletions: number;
        }, {
            runId: string;
            envId: string;
            totalCompletions: number;
            version?: "v1" | undefined;
        }>;
        callback: z.ZodDiscriminatedUnion<"success", [z.ZodObject<{
            success: z.ZodLiteral<false>;
            reason: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            success: false;
            reason?: string | undefined;
        }, {
            success: false;
            reason?: string | undefined;
        }>, z.ZodObject<{
            success: z.ZodLiteral<true>;
            lazyPayload: z.ZodObject<{
                runId: z.ZodString;
                attemptCount: z.ZodOptional<z.ZodNumber>;
                messageId: z.ZodString;
                isTest: z.ZodBoolean;
                traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                metrics: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    event: z.ZodString;
                    timestamp: z.ZodNumber;
                    duration: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }, {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                environment?: Record<string, string> | undefined;
                attemptCount?: number | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            }, {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                environment?: Record<string, string> | undefined;
                attemptCount?: number | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            success: true;
            lazyPayload: {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                environment?: Record<string, string> | undefined;
                attemptCount?: number | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            };
        }, {
            success: true;
            lazyPayload: {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                environment?: Record<string, string> | undefined;
                attemptCount?: number | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            };
        }>]>;
    };
    READY_FOR_RESUME: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptFriendlyId: z.ZodString;
            type: z.ZodEnum<["WAIT_FOR_DURATION", "WAIT_FOR_TASK", "WAIT_FOR_BATCH"]>;
        }, "strip", z.ZodTypeAny, {
            type: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH";
            version: "v1";
            attemptFriendlyId: string;
        }, {
            type: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH";
            attemptFriendlyId: string;
            version?: "v1" | undefined;
        }>;
    };
    TASK_RUN_COMPLETED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodEnum<["v1", "v2"]>>;
            execution: z.ZodObject<{
                task: z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                    exportName: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                }, {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                }>;
                attempt: z.ZodObject<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                    id: z.ZodString;
                    backgroundWorkerId: z.ZodString;
                    backgroundWorkerTaskId: z.ZodString;
                    status: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }>;
                run: z.ZodIntersection<z.ZodObject<{
                    id: z.ZodString;
                    payload: z.ZodString;
                    payloadType: z.ZodString;
                    tags: z.ZodArray<z.ZodString, "many">;
                    isTest: z.ZodDefault<z.ZodBoolean>;
                    createdAt: z.ZodDate;
                    startedAt: z.ZodDefault<z.ZodDate>;
                    idempotencyKey: z.ZodOptional<z.ZodString>;
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    version: z.ZodOptional<z.ZodString>;
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    maxDuration: z.ZodOptional<z.ZodNumber>;
                    context: z.ZodUnknown;
                    durationMs: z.ZodNumber;
                    costInCents: z.ZodNumber;
                    baseCostInCents: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                }, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                }>, z.ZodObject<{
                    traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    traceContext?: Record<string, unknown> | undefined;
                }, {
                    traceContext?: Record<string, unknown> | undefined;
                }>>;
                queue: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                }, {
                    name: string;
                    id: string;
                }>;
                environment: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                    branchName: z.ZodOptional<z.ZodString>;
                    git: z.ZodOptional<z.ZodObject<{
                        provider: z.ZodOptional<z.ZodString>;
                        source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                        ghUsername: z.ZodOptional<z.ZodString>;
                        ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                        commitAuthorName: z.ZodOptional<z.ZodString>;
                        commitMessage: z.ZodOptional<z.ZodString>;
                        commitRef: z.ZodOptional<z.ZodString>;
                        commitSha: z.ZodOptional<z.ZodString>;
                        dirty: z.ZodOptional<z.ZodBoolean>;
                        remoteUrl: z.ZodOptional<z.ZodString>;
                        pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                        pullRequestTitle: z.ZodOptional<z.ZodString>;
                        pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                    }, "strip", z.ZodTypeAny, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }>;
                organization: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                }>;
                project: z.ZodObject<{
                    id: z.ZodString;
                    ref: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }>;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>>;
            } & {
                worker: z.ZodObject<{
                    id: z.ZodString;
                    contentHash: z.ZodString;
                    version: z.ZodString;
                    type: z.ZodOptional<z.ZodEnum<["V1", "V2"]>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    version: string;
                    contentHash: string;
                    type?: "V1" | "V2" | undefined;
                }, {
                    id: string;
                    version: string;
                    contentHash: string;
                    type?: "V1" | "V2" | undefined;
                }>;
                machine: z.ZodDefault<z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                task: {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                worker: {
                    id: string;
                    version: string;
                    contentHash: string;
                    type?: "V1" | "V2" | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
            }, {
                task: {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                worker: {
                    id: string;
                    version: string;
                    contentHash: string;
                    type?: "V1" | "V2" | undefined;
                };
                machine?: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                } | undefined;
                batch?: {
                    id: string;
                } | undefined;
            }>;
            completion: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                ok: z.ZodLiteral<true>;
                id: z.ZodString;
                output: z.ZodOptional<z.ZodString>;
                outputType: z.ZodString;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            }, {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            }>, z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }>]>;
            checkpoint: z.ZodOptional<z.ZodObject<{
                docker: z.ZodBoolean;
                location: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                location: string;
                docker: boolean;
            }, {
                location: string;
                docker: boolean;
            }>>;
        }, "strip", z.ZodTypeAny, {
            version: "v1" | "v2";
            execution: {
                task: {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                worker: {
                    id: string;
                    version: string;
                    contentHash: string;
                    type?: "V1" | "V2" | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            } | {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            };
            checkpoint?: {
                location: string;
                docker: boolean;
            } | undefined;
        }, {
            execution: {
                task: {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                worker: {
                    id: string;
                    version: string;
                    contentHash: string;
                    type?: "V1" | "V2" | undefined;
                };
                machine?: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                } | undefined;
                batch?: {
                    id: string;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            } | {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            };
            version?: "v1" | "v2" | undefined;
            checkpoint?: {
                location: string;
                docker: boolean;
            } | undefined;
        }>;
    };
    TASK_RUN_COMPLETED_WITH_ACK: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodEnum<["v1", "v2"]>>;
            execution: z.ZodObject<{
                task: z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                    exportName: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                }, {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                }>;
                attempt: z.ZodObject<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                    id: z.ZodString;
                    backgroundWorkerId: z.ZodString;
                    backgroundWorkerTaskId: z.ZodString;
                    status: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }>;
                run: z.ZodIntersection<z.ZodObject<{
                    id: z.ZodString;
                    payload: z.ZodString;
                    payloadType: z.ZodString;
                    tags: z.ZodArray<z.ZodString, "many">;
                    isTest: z.ZodDefault<z.ZodBoolean>;
                    createdAt: z.ZodDate;
                    startedAt: z.ZodDefault<z.ZodDate>;
                    idempotencyKey: z.ZodOptional<z.ZodString>;
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    version: z.ZodOptional<z.ZodString>;
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    maxDuration: z.ZodOptional<z.ZodNumber>;
                    context: z.ZodUnknown;
                    durationMs: z.ZodNumber;
                    costInCents: z.ZodNumber;
                    baseCostInCents: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                }, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                }>, z.ZodObject<{
                    traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    traceContext?: Record<string, unknown> | undefined;
                }, {
                    traceContext?: Record<string, unknown> | undefined;
                }>>;
                queue: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                }, {
                    name: string;
                    id: string;
                }>;
                environment: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                    branchName: z.ZodOptional<z.ZodString>;
                    git: z.ZodOptional<z.ZodObject<{
                        provider: z.ZodOptional<z.ZodString>;
                        source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                        ghUsername: z.ZodOptional<z.ZodString>;
                        ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                        commitAuthorName: z.ZodOptional<z.ZodString>;
                        commitMessage: z.ZodOptional<z.ZodString>;
                        commitRef: z.ZodOptional<z.ZodString>;
                        commitSha: z.ZodOptional<z.ZodString>;
                        dirty: z.ZodOptional<z.ZodBoolean>;
                        remoteUrl: z.ZodOptional<z.ZodString>;
                        pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                        pullRequestTitle: z.ZodOptional<z.ZodString>;
                        pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                    }, "strip", z.ZodTypeAny, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }>;
                organization: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                }>;
                project: z.ZodObject<{
                    id: z.ZodString;
                    ref: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }>;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>>;
            } & {
                worker: z.ZodObject<{
                    id: z.ZodString;
                    contentHash: z.ZodString;
                    version: z.ZodString;
                    type: z.ZodOptional<z.ZodEnum<["V1", "V2"]>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    version: string;
                    contentHash: string;
                    type?: "V1" | "V2" | undefined;
                }, {
                    id: string;
                    version: string;
                    contentHash: string;
                    type?: "V1" | "V2" | undefined;
                }>;
                machine: z.ZodDefault<z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                task: {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                worker: {
                    id: string;
                    version: string;
                    contentHash: string;
                    type?: "V1" | "V2" | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
            }, {
                task: {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                worker: {
                    id: string;
                    version: string;
                    contentHash: string;
                    type?: "V1" | "V2" | undefined;
                };
                machine?: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                } | undefined;
                batch?: {
                    id: string;
                } | undefined;
            }>;
            completion: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                ok: z.ZodLiteral<true>;
                id: z.ZodString;
                output: z.ZodOptional<z.ZodString>;
                outputType: z.ZodString;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            }, {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            }>, z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }>]>;
            checkpoint: z.ZodOptional<z.ZodObject<{
                docker: z.ZodBoolean;
                location: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                location: string;
                docker: boolean;
            }, {
                location: string;
                docker: boolean;
            }>>;
        }, "strip", z.ZodTypeAny, {
            version: "v1" | "v2";
            execution: {
                task: {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                worker: {
                    id: string;
                    version: string;
                    contentHash: string;
                    type?: "V1" | "V2" | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            } | {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            };
            checkpoint?: {
                location: string;
                docker: boolean;
            } | undefined;
        }, {
            execution: {
                task: {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                worker: {
                    id: string;
                    version: string;
                    contentHash: string;
                    type?: "V1" | "V2" | undefined;
                };
                machine?: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                } | undefined;
                batch?: {
                    id: string;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            } | {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            };
            version?: "v1" | "v2" | undefined;
            checkpoint?: {
                location: string;
                docker: boolean;
            } | undefined;
        }>;
        callback: z.ZodDiscriminatedUnion<"success", [z.ZodObject<{
            success: z.ZodLiteral<false>;
            error: z.ZodObject<{
                name: z.ZodString;
                message: z.ZodString;
                stack: z.ZodOptional<z.ZodString>;
                stderr: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            success: false;
        }, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            success: false;
        }>, z.ZodObject<{
            success: z.ZodLiteral<true>;
        }, "strip", z.ZodTypeAny, {
            success: true;
        }, {
            success: true;
        }>]>;
    };
    TASK_RUN_FAILED_TO_RUN: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            completion: z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            };
        }, {
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            };
            version?: "v1" | undefined;
        }>;
    };
    TASK_HEARTBEAT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptFriendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            attemptFriendlyId: string;
        }, {
            attemptFriendlyId: string;
            version?: "v1" | undefined;
        }>;
    };
    TASK_RUN_HEARTBEAT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
        }, {
            runId: string;
            version?: "v1" | undefined;
        }>;
    };
    CHECKPOINT_CREATED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodOptional<z.ZodString>;
            attemptFriendlyId: z.ZodString;
            docker: z.ZodBoolean;
            location: z.ZodString;
            reason: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"WAIT_FOR_DURATION">;
                ms: z.ZodNumber;
                now: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "WAIT_FOR_DURATION";
                ms: number;
                now: number;
            }, {
                type: "WAIT_FOR_DURATION";
                ms: number;
                now: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"WAIT_FOR_BATCH">;
                batchFriendlyId: z.ZodString;
                runFriendlyIds: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                type: "WAIT_FOR_BATCH";
                batchFriendlyId: string;
                runFriendlyIds: string[];
            }, {
                type: "WAIT_FOR_BATCH";
                batchFriendlyId: string;
                runFriendlyIds: string[];
            }>, z.ZodObject<{
                type: z.ZodLiteral<"WAIT_FOR_TASK">;
                friendlyId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "WAIT_FOR_TASK";
                friendlyId: string;
            }, {
                type: "WAIT_FOR_TASK";
                friendlyId: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"RETRYING_AFTER_FAILURE">;
                attemptNumber: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                type: "RETRYING_AFTER_FAILURE";
                attemptNumber: number;
            }, {
                type: "RETRYING_AFTER_FAILURE";
                attemptNumber: number;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"MANUAL">;
                /** If unspecified it will be restored immediately, e.g. for live migration */
                restoreAtUnixTimeMs: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "MANUAL";
                restoreAtUnixTimeMs?: number | undefined;
            }, {
                type: "MANUAL";
                restoreAtUnixTimeMs?: number | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            location: string;
            reason: {
                type: "WAIT_FOR_DURATION";
                ms: number;
                now: number;
            } | {
                type: "WAIT_FOR_BATCH";
                batchFriendlyId: string;
                runFriendlyIds: string[];
            } | {
                type: "WAIT_FOR_TASK";
                friendlyId: string;
            } | {
                type: "RETRYING_AFTER_FAILURE";
                attemptNumber: number;
            } | {
                type: "MANUAL";
                restoreAtUnixTimeMs?: number | undefined;
            };
            attemptFriendlyId: string;
            docker: boolean;
            runId?: string | undefined;
        }, {
            location: string;
            reason: {
                type: "WAIT_FOR_DURATION";
                ms: number;
                now: number;
            } | {
                type: "WAIT_FOR_BATCH";
                batchFriendlyId: string;
                runFriendlyIds: string[];
            } | {
                type: "WAIT_FOR_TASK";
                friendlyId: string;
            } | {
                type: "RETRYING_AFTER_FAILURE";
                attemptNumber: number;
            } | {
                type: "MANUAL";
                restoreAtUnixTimeMs?: number | undefined;
            };
            attemptFriendlyId: string;
            docker: boolean;
            version?: "v1" | undefined;
            runId?: string | undefined;
        }>;
        callback: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            keepRunAlive: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            keepRunAlive: boolean;
        }, {
            keepRunAlive: boolean;
            version?: "v1" | undefined;
        }>;
    };
    INDEXING_FAILED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            deploymentId: z.ZodString;
            error: z.ZodObject<{
                name: z.ZodString;
                message: z.ZodString;
                stack: z.ZodOptional<z.ZodString>;
                stderr: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            version: "v1";
            deploymentId: string;
        }, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            deploymentId: string;
            version?: "v1" | undefined;
        }>;
    };
    RUN_CRASHED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            error: z.ZodObject<{
                name: z.ZodString;
                message: z.ZodString;
                stack: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                name: string;
                stack?: string | undefined;
            }, {
                message: string;
                name: string;
                stack?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
            };
            version: "v1";
            runId: string;
        }, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
            };
            runId: string;
            version?: "v1" | undefined;
        }>;
    };
};
export declare const PlatformToCoordinatorMessages: {
    /** @deprecated use RESUME_AFTER_DEPENDENCY_WITH_ACK instead  */
    RESUME_AFTER_DEPENDENCY: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            attemptId: z.ZodString;
            attemptFriendlyId: z.ZodString;
            completions: z.ZodArray<z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                ok: z.ZodLiteral<true>;
                id: z.ZodString;
                output: z.ZodOptional<z.ZodString>;
                outputType: z.ZodString;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            }, {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            }>, z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }>]>, "many">;
            executions: z.ZodArray<z.ZodObject<{
                task: z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                }, z.ZodTypeAny, "passthrough">>;
                queue: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                }, {
                    name: string;
                    id: string;
                }>;
                environment: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                    branchName: z.ZodOptional<z.ZodString>;
                    git: z.ZodOptional<z.ZodObject<{
                        provider: z.ZodOptional<z.ZodString>;
                        source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                        ghUsername: z.ZodOptional<z.ZodString>;
                        ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                        commitAuthorName: z.ZodOptional<z.ZodString>;
                        commitMessage: z.ZodOptional<z.ZodString>;
                        commitRef: z.ZodOptional<z.ZodString>;
                        commitSha: z.ZodOptional<z.ZodString>;
                        dirty: z.ZodOptional<z.ZodBoolean>;
                        remoteUrl: z.ZodOptional<z.ZodString>;
                        pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                        pullRequestTitle: z.ZodOptional<z.ZodString>;
                        pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                    }, "strip", z.ZodTypeAny, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }>;
                organization: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                }>;
                project: z.ZodObject<{
                    id: z.ZodString;
                    ref: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }>;
                machine: z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }>;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>>;
                deployment: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                    shortCode: z.ZodString;
                    version: z.ZodString;
                    runtime: z.ZodString;
                    runtimeVersion: z.ZodString;
                    git: z.ZodOptional<z.ZodObject<{
                        provider: z.ZodOptional<z.ZodString>;
                        source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                        ghUsername: z.ZodOptional<z.ZodString>;
                        ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                        commitAuthorName: z.ZodOptional<z.ZodString>;
                        commitMessage: z.ZodOptional<z.ZodString>;
                        commitRef: z.ZodOptional<z.ZodString>;
                        commitSha: z.ZodOptional<z.ZodString>;
                        dirty: z.ZodOptional<z.ZodBoolean>;
                        remoteUrl: z.ZodOptional<z.ZodString>;
                        pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                        pullRequestTitle: z.ZodOptional<z.ZodString>;
                        pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                    }, "strip", z.ZodTypeAny, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }, {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }>>;
                attempt: z.ZodObject<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                }, z.ZodTypeAny, "passthrough">>;
                run: z.ZodIntersection<z.ZodObject<{
                    id: z.ZodString;
                    payload: z.ZodString;
                    payloadType: z.ZodString;
                    tags: z.ZodArray<z.ZodString, "many">;
                    isTest: z.ZodDefault<z.ZodBoolean>;
                    createdAt: z.ZodDate;
                    startedAt: z.ZodDefault<z.ZodDate>;
                    idempotencyKey: z.ZodOptional<z.ZodString>;
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    version: z.ZodOptional<z.ZodString>;
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    maxDuration: z.ZodOptional<z.ZodNumber>;
                    priority: z.ZodOptional<z.ZodNumber>;
                    baseCostInCents: z.ZodOptional<z.ZodNumber>;
                    parentTaskRunId: z.ZodOptional<z.ZodString>;
                    rootTaskRunId: z.ZodOptional<z.ZodString>;
                    durationMs: z.ZodOptional<z.ZodNumber>;
                    costInCents: z.ZodOptional<z.ZodNumber>;
                    region: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                }, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                }>, z.ZodObject<{
                    traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    traceContext?: Record<string, unknown> | undefined;
                }, {
                    traceContext?: Record<string, unknown> | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            }, {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
            attemptId: string;
            attemptFriendlyId: string;
            completions: ({
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            } | {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            })[];
            executions: {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            }[];
        }, {
            runId: string;
            attemptId: string;
            attemptFriendlyId: string;
            completions: ({
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            } | {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            })[];
            executions: {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            }[];
            version?: "v1" | undefined;
        }>;
    };
    RESUME_AFTER_DEPENDENCY_WITH_ACK: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            attemptId: z.ZodString;
            attemptFriendlyId: z.ZodString;
            completions: z.ZodArray<z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                ok: z.ZodLiteral<true>;
                id: z.ZodString;
                output: z.ZodOptional<z.ZodString>;
                outputType: z.ZodString;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            }, {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            }>, z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }>]>, "many">;
            executions: z.ZodArray<z.ZodObject<{
                task: z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                }, z.ZodTypeAny, "passthrough">>;
                queue: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                }, {
                    name: string;
                    id: string;
                }>;
                environment: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                    branchName: z.ZodOptional<z.ZodString>;
                    git: z.ZodOptional<z.ZodObject<{
                        provider: z.ZodOptional<z.ZodString>;
                        source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                        ghUsername: z.ZodOptional<z.ZodString>;
                        ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                        commitAuthorName: z.ZodOptional<z.ZodString>;
                        commitMessage: z.ZodOptional<z.ZodString>;
                        commitRef: z.ZodOptional<z.ZodString>;
                        commitSha: z.ZodOptional<z.ZodString>;
                        dirty: z.ZodOptional<z.ZodBoolean>;
                        remoteUrl: z.ZodOptional<z.ZodString>;
                        pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                        pullRequestTitle: z.ZodOptional<z.ZodString>;
                        pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                    }, "strip", z.ZodTypeAny, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }>;
                organization: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                }>;
                project: z.ZodObject<{
                    id: z.ZodString;
                    ref: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }>;
                machine: z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }>;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>>;
                deployment: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                    shortCode: z.ZodString;
                    version: z.ZodString;
                    runtime: z.ZodString;
                    runtimeVersion: z.ZodString;
                    git: z.ZodOptional<z.ZodObject<{
                        provider: z.ZodOptional<z.ZodString>;
                        source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                        ghUsername: z.ZodOptional<z.ZodString>;
                        ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                        commitAuthorName: z.ZodOptional<z.ZodString>;
                        commitMessage: z.ZodOptional<z.ZodString>;
                        commitRef: z.ZodOptional<z.ZodString>;
                        commitSha: z.ZodOptional<z.ZodString>;
                        dirty: z.ZodOptional<z.ZodBoolean>;
                        remoteUrl: z.ZodOptional<z.ZodString>;
                        pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                        pullRequestTitle: z.ZodOptional<z.ZodString>;
                        pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                    }, "strip", z.ZodTypeAny, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }, {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }>>;
                attempt: z.ZodObject<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                }, z.ZodTypeAny, "passthrough">>;
                run: z.ZodIntersection<z.ZodObject<{
                    id: z.ZodString;
                    payload: z.ZodString;
                    payloadType: z.ZodString;
                    tags: z.ZodArray<z.ZodString, "many">;
                    isTest: z.ZodDefault<z.ZodBoolean>;
                    createdAt: z.ZodDate;
                    startedAt: z.ZodDefault<z.ZodDate>;
                    idempotencyKey: z.ZodOptional<z.ZodString>;
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    version: z.ZodOptional<z.ZodString>;
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    maxDuration: z.ZodOptional<z.ZodNumber>;
                    priority: z.ZodOptional<z.ZodNumber>;
                    baseCostInCents: z.ZodOptional<z.ZodNumber>;
                    parentTaskRunId: z.ZodOptional<z.ZodString>;
                    rootTaskRunId: z.ZodOptional<z.ZodString>;
                    durationMs: z.ZodOptional<z.ZodNumber>;
                    costInCents: z.ZodOptional<z.ZodNumber>;
                    region: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                }, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                }>, z.ZodObject<{
                    traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    traceContext?: Record<string, unknown> | undefined;
                }, {
                    traceContext?: Record<string, unknown> | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            }, {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
            attemptId: string;
            attemptFriendlyId: string;
            completions: ({
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            } | {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            })[];
            executions: {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            }[];
        }, {
            runId: string;
            attemptId: string;
            attemptFriendlyId: string;
            completions: ({
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            } | {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            })[];
            executions: {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            }[];
            version?: "v1" | undefined;
        }>;
        callback: z.ZodDiscriminatedUnion<"success", [z.ZodObject<{
            success: z.ZodLiteral<false>;
            error: z.ZodObject<{
                name: z.ZodString;
                message: z.ZodString;
                stack: z.ZodOptional<z.ZodString>;
                stderr: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            success: false;
        }, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            success: false;
        }>, z.ZodObject<{
            success: z.ZodLiteral<true>;
        }, "strip", z.ZodTypeAny, {
            success: true;
        }, {
            success: true;
        }>]>;
    };
    RESUME_AFTER_DURATION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptId: z.ZodString;
            attemptFriendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            attemptId: string;
            attemptFriendlyId: string;
        }, {
            attemptId: string;
            attemptFriendlyId: string;
            version?: "v1" | undefined;
        }>;
    };
    REQUEST_ATTEMPT_CANCELLATION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptId: z.ZodString;
            attemptFriendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            attemptId: string;
            attemptFriendlyId: string;
        }, {
            attemptId: string;
            attemptFriendlyId: string;
            version?: "v1" | undefined;
        }>;
    };
    REQUEST_RUN_CANCELLATION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            delayInMs: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
            delayInMs?: number | undefined;
        }, {
            runId: string;
            version?: "v1" | undefined;
            delayInMs?: number | undefined;
        }>;
    };
    READY_FOR_RETRY: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
        }, {
            runId: string;
            version?: "v1" | undefined;
        }>;
    };
    DYNAMIC_CONFIG: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            checkpointThresholdInMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            checkpointThresholdInMs: number;
        }, {
            checkpointThresholdInMs: number;
            version?: "v1" | undefined;
        }>;
    };
};
export declare const ClientToSharedQueueMessages: {
    READY_FOR_TASKS: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            backgroundWorkerId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            backgroundWorkerId: string;
        }, {
            backgroundWorkerId: string;
            version?: "v1" | undefined;
        }>;
    };
    BACKGROUND_WORKER_DEPRECATED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            backgroundWorkerId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            backgroundWorkerId: string;
        }, {
            backgroundWorkerId: string;
            version?: "v1" | undefined;
        }>;
    };
    BACKGROUND_WORKER_MESSAGE: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            backgroundWorkerId: z.ZodString;
            data: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                version: z.ZodDefault<z.ZodLiteral<"v1">>;
                type: z.ZodLiteral<"TASK_RUN_COMPLETED">;
                completion: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                    ok: z.ZodLiteral<true>;
                    id: z.ZodString;
                    output: z.ZodOptional<z.ZodString>;
                    outputType: z.ZodString;
                    usage: z.ZodOptional<z.ZodObject<{
                        durationMs: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        durationMs: number;
                    }, {
                        durationMs: number;
                    }>>;
                    taskIdentifier: z.ZodOptional<z.ZodString>;
                    metadata: z.ZodOptional<z.ZodObject<{
                        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                        operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                            type: z.ZodLiteral<"update">;
                            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                        }, "strip", z.ZodTypeAny, {
                            value: Record<string, unknown>;
                            type: "update";
                        }, {
                            value: Record<string, unknown>;
                            type: "update";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"set">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"delete">;
                            key: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            type: "delete";
                            key: string;
                        }, {
                            type: "delete";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"append">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"remove">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"increment">;
                            key: z.ZodString;
                            value: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            value: number;
                            type: "increment";
                            key: string;
                        }, {
                            value: number;
                            type: "increment";
                            key: string;
                        }>]>, "many">>;
                        parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                            type: z.ZodLiteral<"update">;
                            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                        }, "strip", z.ZodTypeAny, {
                            value: Record<string, unknown>;
                            type: "update";
                        }, {
                            value: Record<string, unknown>;
                            type: "update";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"set">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"delete">;
                            key: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            type: "delete";
                            key: string;
                        }, {
                            type: "delete";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"append">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"remove">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"increment">;
                            key: z.ZodString;
                            value: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            value: number;
                            type: "increment";
                            key: string;
                        }, {
                            value: number;
                            type: "increment";
                            key: string;
                        }>]>, "many">>;
                        rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                            type: z.ZodLiteral<"update">;
                            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                        }, "strip", z.ZodTypeAny, {
                            value: Record<string, unknown>;
                            type: "update";
                        }, {
                            value: Record<string, unknown>;
                            type: "update";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"set">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"delete">;
                            key: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            type: "delete";
                            key: string;
                        }, {
                            type: "delete";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"append">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"remove">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"increment">;
                            key: z.ZodString;
                            value: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            value: number;
                            type: "increment";
                            key: string;
                        }, {
                            value: number;
                            type: "increment";
                            key: string;
                        }>]>, "many">>;
                    }, "strip", z.ZodTypeAny, {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    }, {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    }>>;
                    flushedMetadata: z.ZodOptional<z.ZodObject<{
                        data: z.ZodOptional<z.ZodString>;
                        dataType: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        dataType: string;
                        data?: string | undefined;
                    }, {
                        dataType: string;
                        data?: string | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    ok: true;
                    id: string;
                    outputType: string;
                    metadata?: {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    } | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                    taskIdentifier?: string | undefined;
                    flushedMetadata?: {
                        dataType: string;
                        data?: string | undefined;
                    } | undefined;
                    output?: string | undefined;
                }, {
                    ok: true;
                    id: string;
                    outputType: string;
                    metadata?: {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    } | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                    taskIdentifier?: string | undefined;
                    flushedMetadata?: {
                        dataType: string;
                        data?: string | undefined;
                    } | undefined;
                    output?: string | undefined;
                }>, z.ZodObject<{
                    ok: z.ZodLiteral<false>;
                    id: z.ZodString;
                    error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"BUILT_IN_ERROR">;
                        name: z.ZodString;
                        message: z.ZodString;
                        stackTrace: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    }, {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"CUSTOM_ERROR">;
                        raw: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    }, {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"STRING_ERROR">;
                        raw: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "STRING_ERROR";
                        raw: string;
                    }, {
                        type: "STRING_ERROR";
                        raw: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"INTERNAL_ERROR">;
                        code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
                        message: z.ZodOptional<z.ZodString>;
                        stackTrace: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    }, {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    }>]>;
                    retry: z.ZodOptional<z.ZodObject<{
                        timestamp: z.ZodNumber;
                        delay: z.ZodNumber;
                        error: z.ZodOptional<z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    }, {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    }>>;
                    skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                    usage: z.ZodOptional<z.ZodObject<{
                        durationMs: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        durationMs: number;
                    }, {
                        durationMs: number;
                    }>>;
                    taskIdentifier: z.ZodOptional<z.ZodString>;
                    metadata: z.ZodOptional<z.ZodObject<{
                        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                        operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                            type: z.ZodLiteral<"update">;
                            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                        }, "strip", z.ZodTypeAny, {
                            value: Record<string, unknown>;
                            type: "update";
                        }, {
                            value: Record<string, unknown>;
                            type: "update";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"set">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"delete">;
                            key: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            type: "delete";
                            key: string;
                        }, {
                            type: "delete";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"append">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"remove">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"increment">;
                            key: z.ZodString;
                            value: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            value: number;
                            type: "increment";
                            key: string;
                        }, {
                            value: number;
                            type: "increment";
                            key: string;
                        }>]>, "many">>;
                        parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                            type: z.ZodLiteral<"update">;
                            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                        }, "strip", z.ZodTypeAny, {
                            value: Record<string, unknown>;
                            type: "update";
                        }, {
                            value: Record<string, unknown>;
                            type: "update";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"set">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"delete">;
                            key: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            type: "delete";
                            key: string;
                        }, {
                            type: "delete";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"append">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"remove">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"increment">;
                            key: z.ZodString;
                            value: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            value: number;
                            type: "increment";
                            key: string;
                        }, {
                            value: number;
                            type: "increment";
                            key: string;
                        }>]>, "many">>;
                        rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                            type: z.ZodLiteral<"update">;
                            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                        }, "strip", z.ZodTypeAny, {
                            value: Record<string, unknown>;
                            type: "update";
                        }, {
                            value: Record<string, unknown>;
                            type: "update";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"set">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"delete">;
                            key: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            type: "delete";
                            key: string;
                        }, {
                            type: "delete";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"append">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"remove">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"increment">;
                            key: z.ZodString;
                            value: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            value: number;
                            type: "increment";
                            key: string;
                        }, {
                            value: number;
                            type: "increment";
                            key: string;
                        }>]>, "many">>;
                    }, "strip", z.ZodTypeAny, {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    }, {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    }>>;
                    flushedMetadata: z.ZodOptional<z.ZodObject<{
                        data: z.ZodOptional<z.ZodString>;
                        dataType: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        dataType: string;
                        data?: string | undefined;
                    }, {
                        dataType: string;
                        data?: string | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    ok: false;
                    id: string;
                    metadata?: {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    } | undefined;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                    taskIdentifier?: string | undefined;
                    flushedMetadata?: {
                        dataType: string;
                        data?: string | undefined;
                    } | undefined;
                }, {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    ok: false;
                    id: string;
                    metadata?: {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    } | undefined;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                    taskIdentifier?: string | undefined;
                    flushedMetadata?: {
                        dataType: string;
                        data?: string | undefined;
                    } | undefined;
                }>]>;
                execution: z.ZodObject<{
                    task: z.ZodObject<{
                        id: z.ZodString;
                        filePath: z.ZodString;
                        exportName: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    }, {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    }>;
                    attempt: z.ZodObject<{
                        number: z.ZodNumber;
                        startedAt: z.ZodDate;
                        id: z.ZodString;
                        backgroundWorkerId: z.ZodString;
                        backgroundWorkerTaskId: z.ZodString;
                        status: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }>;
                    run: z.ZodIntersection<z.ZodObject<{
                        id: z.ZodString;
                        payload: z.ZodString;
                        payloadType: z.ZodString;
                        tags: z.ZodArray<z.ZodString, "many">;
                        isTest: z.ZodDefault<z.ZodBoolean>;
                        createdAt: z.ZodDate;
                        startedAt: z.ZodDefault<z.ZodDate>;
                        idempotencyKey: z.ZodOptional<z.ZodString>;
                        maxAttempts: z.ZodOptional<z.ZodNumber>;
                        version: z.ZodOptional<z.ZodString>;
                        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                        maxDuration: z.ZodOptional<z.ZodNumber>;
                        context: z.ZodUnknown;
                        durationMs: z.ZodNumber;
                        costInCents: z.ZodNumber;
                        baseCostInCents: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    }, {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    }>, z.ZodObject<{
                        traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    }, "strip", z.ZodTypeAny, {
                        traceContext?: Record<string, unknown> | undefined;
                    }, {
                        traceContext?: Record<string, unknown> | undefined;
                    }>>;
                    queue: z.ZodObject<{
                        id: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                    }, {
                        name: string;
                        id: string;
                    }>;
                    environment: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                        branchName: z.ZodOptional<z.ZodString>;
                        git: z.ZodOptional<z.ZodObject<{
                            provider: z.ZodOptional<z.ZodString>;
                            source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                            ghUsername: z.ZodOptional<z.ZodString>;
                            ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                            commitAuthorName: z.ZodOptional<z.ZodString>;
                            commitMessage: z.ZodOptional<z.ZodString>;
                            commitRef: z.ZodOptional<z.ZodString>;
                            commitSha: z.ZodOptional<z.ZodString>;
                            dirty: z.ZodOptional<z.ZodBoolean>;
                            remoteUrl: z.ZodOptional<z.ZodString>;
                            pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                            pullRequestTitle: z.ZodOptional<z.ZodString>;
                            pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                        }, "strip", z.ZodTypeAny, {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        }, {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    }, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    }>;
                    organization: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                    }>;
                    project: z.ZodObject<{
                        id: z.ZodString;
                        ref: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }>;
                    machine: z.ZodObject<{
                        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                        cpu: z.ZodNumber;
                        memory: z.ZodNumber;
                        centsPerMs: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    }, {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    }>;
                    batch: z.ZodOptional<z.ZodObject<{
                        id: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                    }, {
                        id: string;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    machine: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                }, {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    machine: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "TASK_RUN_COMPLETED";
                version: "v1";
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    machine: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                completion: {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    ok: false;
                    id: string;
                    metadata?: {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    } | undefined;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                    taskIdentifier?: string | undefined;
                    flushedMetadata?: {
                        dataType: string;
                        data?: string | undefined;
                    } | undefined;
                } | {
                    ok: true;
                    id: string;
                    outputType: string;
                    metadata?: {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    } | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                    taskIdentifier?: string | undefined;
                    flushedMetadata?: {
                        dataType: string;
                        data?: string | undefined;
                    } | undefined;
                    output?: string | undefined;
                };
            }, {
                type: "TASK_RUN_COMPLETED";
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    machine: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                completion: {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    ok: false;
                    id: string;
                    metadata?: {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    } | undefined;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                    taskIdentifier?: string | undefined;
                    flushedMetadata?: {
                        dataType: string;
                        data?: string | undefined;
                    } | undefined;
                } | {
                    ok: true;
                    id: string;
                    outputType: string;
                    metadata?: {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    } | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                    taskIdentifier?: string | undefined;
                    flushedMetadata?: {
                        dataType: string;
                        data?: string | undefined;
                    } | undefined;
                    output?: string | undefined;
                };
                version?: "v1" | undefined;
            }>, z.ZodObject<{
                version: z.ZodDefault<z.ZodLiteral<"v1">>;
                type: z.ZodLiteral<"TASK_RUN_FAILED_TO_RUN">;
                completion: z.ZodObject<{
                    ok: z.ZodLiteral<false>;
                    id: z.ZodString;
                    error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"BUILT_IN_ERROR">;
                        name: z.ZodString;
                        message: z.ZodString;
                        stackTrace: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    }, {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"CUSTOM_ERROR">;
                        raw: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    }, {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"STRING_ERROR">;
                        raw: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "STRING_ERROR";
                        raw: string;
                    }, {
                        type: "STRING_ERROR";
                        raw: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"INTERNAL_ERROR">;
                        code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
                        message: z.ZodOptional<z.ZodString>;
                        stackTrace: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    }, {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    }>]>;
                    retry: z.ZodOptional<z.ZodObject<{
                        timestamp: z.ZodNumber;
                        delay: z.ZodNumber;
                        error: z.ZodOptional<z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    }, {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    }>>;
                    skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                    usage: z.ZodOptional<z.ZodObject<{
                        durationMs: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        durationMs: number;
                    }, {
                        durationMs: number;
                    }>>;
                    taskIdentifier: z.ZodOptional<z.ZodString>;
                    metadata: z.ZodOptional<z.ZodObject<{
                        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                        operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                            type: z.ZodLiteral<"update">;
                            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                        }, "strip", z.ZodTypeAny, {
                            value: Record<string, unknown>;
                            type: "update";
                        }, {
                            value: Record<string, unknown>;
                            type: "update";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"set">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"delete">;
                            key: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            type: "delete";
                            key: string;
                        }, {
                            type: "delete";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"append">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"remove">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"increment">;
                            key: z.ZodString;
                            value: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            value: number;
                            type: "increment";
                            key: string;
                        }, {
                            value: number;
                            type: "increment";
                            key: string;
                        }>]>, "many">>;
                        parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                            type: z.ZodLiteral<"update">;
                            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                        }, "strip", z.ZodTypeAny, {
                            value: Record<string, unknown>;
                            type: "update";
                        }, {
                            value: Record<string, unknown>;
                            type: "update";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"set">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"delete">;
                            key: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            type: "delete";
                            key: string;
                        }, {
                            type: "delete";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"append">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"remove">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"increment">;
                            key: z.ZodString;
                            value: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            value: number;
                            type: "increment";
                            key: string;
                        }, {
                            value: number;
                            type: "increment";
                            key: string;
                        }>]>, "many">>;
                        rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                            type: z.ZodLiteral<"update">;
                            value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                        }, "strip", z.ZodTypeAny, {
                            value: Record<string, unknown>;
                            type: "update";
                        }, {
                            value: Record<string, unknown>;
                            type: "update";
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"set">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"delete">;
                            key: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            type: "delete";
                            key: string;
                        }, {
                            type: "delete";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"append">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"remove">;
                            key: z.ZodString;
                            value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                        }, "strip", z.ZodTypeAny, {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        }, {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        }>, z.ZodObject<{
                            type: z.ZodLiteral<"increment">;
                            key: z.ZodString;
                            value: z.ZodNumber;
                        }, "strip", z.ZodTypeAny, {
                            value: number;
                            type: "increment";
                            key: string;
                        }, {
                            value: number;
                            type: "increment";
                            key: string;
                        }>]>, "many">>;
                    }, "strip", z.ZodTypeAny, {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    }, {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    }>>;
                    flushedMetadata: z.ZodOptional<z.ZodObject<{
                        data: z.ZodOptional<z.ZodString>;
                        dataType: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        dataType: string;
                        data?: string | undefined;
                    }, {
                        dataType: string;
                        data?: string | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    ok: false;
                    id: string;
                    metadata?: {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    } | undefined;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                    taskIdentifier?: string | undefined;
                    flushedMetadata?: {
                        dataType: string;
                        data?: string | undefined;
                    } | undefined;
                }, {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    ok: false;
                    id: string;
                    metadata?: {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    } | undefined;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                    taskIdentifier?: string | undefined;
                    flushedMetadata?: {
                        dataType: string;
                        data?: string | undefined;
                    } | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "TASK_RUN_FAILED_TO_RUN";
                version: "v1";
                completion: {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    ok: false;
                    id: string;
                    metadata?: {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    } | undefined;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                    taskIdentifier?: string | undefined;
                    flushedMetadata?: {
                        dataType: string;
                        data?: string | undefined;
                    } | undefined;
                };
            }, {
                type: "TASK_RUN_FAILED_TO_RUN";
                completion: {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    ok: false;
                    id: string;
                    metadata?: {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    } | undefined;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                    taskIdentifier?: string | undefined;
                    flushedMetadata?: {
                        dataType: string;
                        data?: string | undefined;
                    } | undefined;
                };
                version?: "v1" | undefined;
            }>, z.ZodObject<{
                version: z.ZodDefault<z.ZodLiteral<"v1">>;
                type: z.ZodLiteral<"TASK_HEARTBEAT">;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "TASK_HEARTBEAT";
                id: string;
                version: "v1";
            }, {
                type: "TASK_HEARTBEAT";
                id: string;
                version?: "v1" | undefined;
            }>, z.ZodObject<{
                version: z.ZodDefault<z.ZodLiteral<"v1">>;
                type: z.ZodLiteral<"TASK_RUN_HEARTBEAT">;
                id: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "TASK_RUN_HEARTBEAT";
                id: string;
                version: "v1";
            }, {
                type: "TASK_RUN_HEARTBEAT";
                id: string;
                version?: "v1" | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            backgroundWorkerId: string;
            data: {
                type: "TASK_RUN_COMPLETED";
                version: "v1";
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    machine: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                completion: {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    ok: false;
                    id: string;
                    metadata?: {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    } | undefined;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                    taskIdentifier?: string | undefined;
                    flushedMetadata?: {
                        dataType: string;
                        data?: string | undefined;
                    } | undefined;
                } | {
                    ok: true;
                    id: string;
                    outputType: string;
                    metadata?: {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    } | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                    taskIdentifier?: string | undefined;
                    flushedMetadata?: {
                        dataType: string;
                        data?: string | undefined;
                    } | undefined;
                    output?: string | undefined;
                };
            } | {
                type: "TASK_RUN_FAILED_TO_RUN";
                version: "v1";
                completion: {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    ok: false;
                    id: string;
                    metadata?: {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    } | undefined;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                    taskIdentifier?: string | undefined;
                    flushedMetadata?: {
                        dataType: string;
                        data?: string | undefined;
                    } | undefined;
                };
            } | {
                type: "TASK_HEARTBEAT";
                id: string;
                version: "v1";
            } | {
                type: "TASK_RUN_HEARTBEAT";
                id: string;
                version: "v1";
            };
        }, {
            backgroundWorkerId: string;
            data: {
                type: "TASK_RUN_COMPLETED";
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    machine: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                completion: {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    ok: false;
                    id: string;
                    metadata?: {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    } | undefined;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                    taskIdentifier?: string | undefined;
                    flushedMetadata?: {
                        dataType: string;
                        data?: string | undefined;
                    } | undefined;
                } | {
                    ok: true;
                    id: string;
                    outputType: string;
                    metadata?: {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    } | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                    taskIdentifier?: string | undefined;
                    flushedMetadata?: {
                        dataType: string;
                        data?: string | undefined;
                    } | undefined;
                    output?: string | undefined;
                };
                version?: "v1" | undefined;
            } | {
                type: "TASK_RUN_FAILED_TO_RUN";
                completion: {
                    error: {
                        message: string;
                        type: "BUILT_IN_ERROR";
                        name: string;
                        stackTrace: string;
                    } | {
                        type: "CUSTOM_ERROR";
                        raw: string;
                    } | {
                        type: "STRING_ERROR";
                        raw: string;
                    } | {
                        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                        type: "INTERNAL_ERROR";
                        message?: string | undefined;
                        stackTrace?: string | undefined;
                    };
                    ok: false;
                    id: string;
                    metadata?: {
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        operations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        parentOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                        rootOperations?: ({
                            value: Record<string, unknown>;
                            type: "update";
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "set";
                            key: string;
                        } | {
                            type: "delete";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "append";
                            key: string;
                        } | {
                            value: import("../../index.js").DeserializedJson;
                            type: "remove";
                            key: string;
                        } | {
                            value: number;
                            type: "increment";
                            key: string;
                        })[] | undefined;
                    } | undefined;
                    retry?: {
                        timestamp: number;
                        delay: number;
                        error?: unknown;
                    } | undefined;
                    skippedRetrying?: boolean | undefined;
                    usage?: {
                        durationMs: number;
                    } | undefined;
                    taskIdentifier?: string | undefined;
                    flushedMetadata?: {
                        dataType: string;
                        data?: string | undefined;
                    } | undefined;
                };
                version?: "v1" | undefined;
            } | {
                type: "TASK_HEARTBEAT";
                id: string;
                version?: "v1" | undefined;
            } | {
                type: "TASK_RUN_HEARTBEAT";
                id: string;
                version?: "v1" | undefined;
            };
            version?: "v1" | undefined;
        }>;
    };
};
export declare const SharedQueueToClientMessages: {
    SERVER_READY: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            version: "v1";
        }, {
            id: string;
            version?: "v1" | undefined;
        }>;
    };
    BACKGROUND_WORKER_MESSAGE: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            backgroundWorkerId: z.ZodString;
            data: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"CANCEL_ATTEMPT">;
                taskAttemptId: z.ZodString;
                taskRunId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "CANCEL_ATTEMPT";
                taskRunId: string;
                taskAttemptId: string;
            }, {
                type: "CANCEL_ATTEMPT";
                taskRunId: string;
                taskAttemptId: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"SCHEDULE_ATTEMPT">;
                image: z.ZodString;
                version: z.ZodString;
                machine: z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }>;
                nextAttemptNumber: z.ZodOptional<z.ZodNumber>;
                id: z.ZodOptional<z.ZodString>;
                envId: z.ZodString;
                envType: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                orgId: z.ZodString;
                projectId: z.ZodString;
                runId: z.ZodString;
                dequeuedAt: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                type: "SCHEDULE_ATTEMPT";
                version: string;
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                runId: string;
                image: string;
                projectId: string;
                envId: string;
                envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                orgId: string;
                id?: string | undefined;
                dequeuedAt?: number | undefined;
                nextAttemptNumber?: number | undefined;
            }, {
                type: "SCHEDULE_ATTEMPT";
                version: string;
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                runId: string;
                image: string;
                projectId: string;
                envId: string;
                envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                orgId: string;
                id?: string | undefined;
                dequeuedAt?: number | undefined;
                nextAttemptNumber?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"EXECUTE_RUN_LAZY_ATTEMPT">;
                payload: z.ZodObject<{
                    runId: z.ZodString;
                    attemptCount: z.ZodOptional<z.ZodNumber>;
                    messageId: z.ZodString;
                    isTest: z.ZodBoolean;
                    traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                    metrics: z.ZodOptional<z.ZodArray<z.ZodObject<{
                        name: z.ZodString;
                        event: z.ZodString;
                        timestamp: z.ZodNumber;
                        duration: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        event: string;
                        name: string;
                        timestamp: number;
                        duration: number;
                    }, {
                        event: string;
                        name: string;
                        timestamp: number;
                        duration: number;
                    }>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    isTest: boolean;
                    traceContext: Record<string, unknown>;
                    runId: string;
                    messageId: string;
                    environment?: Record<string, string> | undefined;
                    attemptCount?: number | undefined;
                    metrics?: {
                        event: string;
                        name: string;
                        timestamp: number;
                        duration: number;
                    }[] | undefined;
                }, {
                    isTest: boolean;
                    traceContext: Record<string, unknown>;
                    runId: string;
                    messageId: string;
                    environment?: Record<string, string> | undefined;
                    attemptCount?: number | undefined;
                    metrics?: {
                        event: string;
                        name: string;
                        timestamp: number;
                        duration: number;
                    }[] | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                type: "EXECUTE_RUN_LAZY_ATTEMPT";
                payload: {
                    isTest: boolean;
                    traceContext: Record<string, unknown>;
                    runId: string;
                    messageId: string;
                    environment?: Record<string, string> | undefined;
                    attemptCount?: number | undefined;
                    metrics?: {
                        event: string;
                        name: string;
                        timestamp: number;
                        duration: number;
                    }[] | undefined;
                };
            }, {
                type: "EXECUTE_RUN_LAZY_ATTEMPT";
                payload: {
                    isTest: boolean;
                    traceContext: Record<string, unknown>;
                    runId: string;
                    messageId: string;
                    environment?: Record<string, string> | undefined;
                    attemptCount?: number | undefined;
                    metrics?: {
                        event: string;
                        name: string;
                        timestamp: number;
                        duration: number;
                    }[] | undefined;
                };
            }>]>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            backgroundWorkerId: string;
            data: {
                type: "CANCEL_ATTEMPT";
                taskRunId: string;
                taskAttemptId: string;
            } | {
                type: "SCHEDULE_ATTEMPT";
                version: string;
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                runId: string;
                image: string;
                projectId: string;
                envId: string;
                envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                orgId: string;
                id?: string | undefined;
                dequeuedAt?: number | undefined;
                nextAttemptNumber?: number | undefined;
            } | {
                type: "EXECUTE_RUN_LAZY_ATTEMPT";
                payload: {
                    isTest: boolean;
                    traceContext: Record<string, unknown>;
                    runId: string;
                    messageId: string;
                    environment?: Record<string, string> | undefined;
                    attemptCount?: number | undefined;
                    metrics?: {
                        event: string;
                        name: string;
                        timestamp: number;
                        duration: number;
                    }[] | undefined;
                };
            };
        }, {
            backgroundWorkerId: string;
            data: {
                type: "CANCEL_ATTEMPT";
                taskRunId: string;
                taskAttemptId: string;
            } | {
                type: "SCHEDULE_ATTEMPT";
                version: string;
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                runId: string;
                image: string;
                projectId: string;
                envId: string;
                envType: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                orgId: string;
                id?: string | undefined;
                dequeuedAt?: number | undefined;
                nextAttemptNumber?: number | undefined;
            } | {
                type: "EXECUTE_RUN_LAZY_ATTEMPT";
                payload: {
                    isTest: boolean;
                    traceContext: Record<string, unknown>;
                    runId: string;
                    messageId: string;
                    environment?: Record<string, string> | undefined;
                    attemptCount?: number | undefined;
                    metrics?: {
                        event: string;
                        name: string;
                        timestamp: number;
                        duration: number;
                    }[] | undefined;
                };
            };
            version?: "v1" | undefined;
        }>;
    };
};
export declare const ProdWorkerToCoordinatorMessages: {
    TEST: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
        }, {
            version?: "v1" | undefined;
        }>;
        callback: z.ZodVoid;
    };
    INDEX_TASKS: {
        message: z.ZodDiscriminatedUnion<"version", [z.ZodObject<{
            deploymentId: z.ZodString;
            tasks: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                filePath: z.ZodString;
                exportName: z.ZodOptional<z.ZodString>;
                queue: z.ZodOptional<z.ZodObject<{
                    concurrencyLimit: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
                } & {
                    name: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                }, {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                }>>;
                retry: z.ZodOptional<z.ZodObject<{
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    factor: z.ZodOptional<z.ZodNumber>;
                    minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                    maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                    randomize: z.ZodOptional<z.ZodBoolean>;
                    outOfMemory: z.ZodOptional<z.ZodObject<{
                        machine: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
                    }, "strip", z.ZodTypeAny, {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    }, {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                }, {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                }>>;
                machine: z.ZodOptional<z.ZodObject<{
                    cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
                    memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
                    preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
                }, "strip", z.ZodTypeAny, {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                }, {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                }>>;
                triggerSource: z.ZodOptional<z.ZodString>;
                schedule: z.ZodOptional<z.ZodObject<{
                    cron: z.ZodString;
                    timezone: z.ZodString;
                    environments: z.ZodOptional<z.ZodArray<z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                }, {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                }>>;
                maxDuration: z.ZodOptional<z.ZodNumber>;
                payloadSchema: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                filePath: string;
                maxDuration?: number | undefined;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                exportName?: string | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                } | undefined;
                description?: string | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                } | undefined;
                payloadSchema?: unknown;
            }, {
                id: string;
                filePath: string;
                maxDuration?: number | undefined;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                exportName?: string | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                } | undefined;
                description?: string | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                } | undefined;
                payloadSchema?: unknown;
            }>, "many">;
            packageVersion: z.ZodString;
        } & {
            version: z.ZodLiteral<"v1">;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            packageVersion: string;
            tasks: {
                id: string;
                filePath: string;
                maxDuration?: number | undefined;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                exportName?: string | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                } | undefined;
                description?: string | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                } | undefined;
                payloadSchema?: unknown;
            }[];
            deploymentId: string;
        }, {
            version: "v1";
            packageVersion: string;
            tasks: {
                id: string;
                filePath: string;
                maxDuration?: number | undefined;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                exportName?: string | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                } | undefined;
                description?: string | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                } | undefined;
                payloadSchema?: unknown;
            }[];
            deploymentId: string;
        }>, z.ZodObject<{
            deploymentId: z.ZodString;
            tasks: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                filePath: z.ZodString;
                exportName: z.ZodOptional<z.ZodString>;
                queue: z.ZodOptional<z.ZodObject<{
                    concurrencyLimit: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
                } & {
                    name: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                }, {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                }>>;
                retry: z.ZodOptional<z.ZodObject<{
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    factor: z.ZodOptional<z.ZodNumber>;
                    minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                    maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                    randomize: z.ZodOptional<z.ZodBoolean>;
                    outOfMemory: z.ZodOptional<z.ZodObject<{
                        machine: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
                    }, "strip", z.ZodTypeAny, {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    }, {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                }, {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                }>>;
                machine: z.ZodOptional<z.ZodObject<{
                    cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
                    memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
                    preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
                }, "strip", z.ZodTypeAny, {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                }, {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                }>>;
                triggerSource: z.ZodOptional<z.ZodString>;
                schedule: z.ZodOptional<z.ZodObject<{
                    cron: z.ZodString;
                    timezone: z.ZodString;
                    environments: z.ZodOptional<z.ZodArray<z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                }, {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                }>>;
                maxDuration: z.ZodOptional<z.ZodNumber>;
                payloadSchema: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                filePath: string;
                maxDuration?: number | undefined;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                exportName?: string | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                } | undefined;
                description?: string | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                } | undefined;
                payloadSchema?: unknown;
            }, {
                id: string;
                filePath: string;
                maxDuration?: number | undefined;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                exportName?: string | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                } | undefined;
                description?: string | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                } | undefined;
                payloadSchema?: unknown;
            }>, "many">;
            packageVersion: z.ZodString;
        } & {
            version: z.ZodLiteral<"v2">;
            supportsLazyAttempts: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            version: "v2";
            packageVersion: string;
            tasks: {
                id: string;
                filePath: string;
                maxDuration?: number | undefined;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                exportName?: string | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                } | undefined;
                description?: string | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                } | undefined;
                payloadSchema?: unknown;
            }[];
            supportsLazyAttempts: boolean;
            deploymentId: string;
        }, {
            version: "v2";
            packageVersion: string;
            tasks: {
                id: string;
                filePath: string;
                maxDuration?: number | undefined;
                queue?: {
                    name?: string | undefined;
                    concurrencyLimit?: number | null | undefined;
                } | undefined;
                machine?: {
                    cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                    memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                    preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
                exportName?: string | undefined;
                retry?: {
                    maxAttempts?: number | undefined;
                    factor?: number | undefined;
                    minTimeoutInMs?: number | undefined;
                    maxTimeoutInMs?: number | undefined;
                    randomize?: boolean | undefined;
                    outOfMemory?: {
                        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                    } | undefined;
                } | undefined;
                description?: string | undefined;
                triggerSource?: string | undefined;
                schedule?: {
                    cron: string;
                    timezone: string;
                    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
                } | undefined;
                payloadSchema?: unknown;
            }[];
            supportsLazyAttempts: boolean;
            deploymentId: string;
        }>]>;
        callback: z.ZodDiscriminatedUnion<"success", [z.ZodObject<{
            success: z.ZodLiteral<false>;
        }, "strip", z.ZodTypeAny, {
            success: false;
        }, {
            success: false;
        }>, z.ZodObject<{
            success: z.ZodLiteral<true>;
        }, "strip", z.ZodTypeAny, {
            success: true;
        }, {
            success: true;
        }>]>;
    };
    READY_FOR_EXECUTION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            totalCompletions: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
            totalCompletions: number;
        }, {
            runId: string;
            totalCompletions: number;
            version?: "v1" | undefined;
        }>;
    };
    READY_FOR_LAZY_ATTEMPT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
            totalCompletions: z.ZodNumber;
            startTime: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
            totalCompletions: number;
            startTime?: number | undefined;
        }, {
            runId: string;
            totalCompletions: number;
            version?: "v1" | undefined;
            startTime?: number | undefined;
        }>;
    };
    READY_FOR_RESUME: {
        message: z.ZodDiscriminatedUnion<"version", [z.ZodObject<{
            version: z.ZodLiteral<"v1">;
            attemptFriendlyId: z.ZodString;
            type: z.ZodEnum<["WAIT_FOR_DURATION", "WAIT_FOR_TASK", "WAIT_FOR_BATCH"]>;
        }, "strip", z.ZodTypeAny, {
            type: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH";
            version: "v1";
            attemptFriendlyId: string;
        }, {
            type: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH";
            version: "v1";
            attemptFriendlyId: string;
        }>, z.ZodObject<{
            version: z.ZodLiteral<"v2">;
            attemptFriendlyId: z.ZodString;
            attemptNumber: z.ZodNumber;
            type: z.ZodEnum<["WAIT_FOR_DURATION", "WAIT_FOR_TASK", "WAIT_FOR_BATCH"]>;
        }, "strip", z.ZodTypeAny, {
            type: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH";
            version: "v2";
            attemptNumber: number;
            attemptFriendlyId: string;
        }, {
            type: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH";
            version: "v2";
            attemptNumber: number;
            attemptFriendlyId: string;
        }>]>;
    };
    READY_FOR_CHECKPOINT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
        }, {
            version?: "v1" | undefined;
        }>;
    };
    CANCEL_CHECKPOINT: {
        message: z.ZodDefault<z.ZodDiscriminatedUnion<"version", [z.ZodObject<{
            version: z.ZodLiteral<"v1">;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
        }, {
            version: "v1";
        }>, z.ZodObject<{
            version: z.ZodLiteral<"v2">;
            reason: z.ZodOptional<z.ZodEnum<["WAIT_FOR_DURATION", "WAIT_FOR_TASK", "WAIT_FOR_BATCH"]>>;
        }, "strip", z.ZodTypeAny, {
            version: "v2";
            reason?: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH" | undefined;
        }, {
            version: "v2";
            reason?: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH" | undefined;
        }>]>>;
        callback: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v2">>;
            checkpointCanceled: z.ZodBoolean;
            reason: z.ZodOptional<z.ZodEnum<["WAIT_FOR_DURATION", "WAIT_FOR_TASK", "WAIT_FOR_BATCH"]>>;
        }, "strip", z.ZodTypeAny, {
            version: "v2";
            checkpointCanceled: boolean;
            reason?: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH" | undefined;
        }, {
            checkpointCanceled: boolean;
            version?: "v2" | undefined;
            reason?: "WAIT_FOR_DURATION" | "WAIT_FOR_TASK" | "WAIT_FOR_BATCH" | undefined;
        }>;
    };
    TASK_HEARTBEAT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptFriendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            attemptFriendlyId: string;
        }, {
            attemptFriendlyId: string;
            version?: "v1" | undefined;
        }>;
    };
    TASK_RUN_HEARTBEAT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
        }, {
            runId: string;
            version?: "v1" | undefined;
        }>;
    };
    TASK_RUN_COMPLETED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodEnum<["v1", "v2"]>>;
            execution: z.ZodObject<{
                task: z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                    exportName: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                }, {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                }>;
                attempt: z.ZodObject<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                    id: z.ZodString;
                    backgroundWorkerId: z.ZodString;
                    backgroundWorkerTaskId: z.ZodString;
                    status: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }, {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                }>;
                run: z.ZodIntersection<z.ZodObject<{
                    id: z.ZodString;
                    payload: z.ZodString;
                    payloadType: z.ZodString;
                    tags: z.ZodArray<z.ZodString, "many">;
                    isTest: z.ZodDefault<z.ZodBoolean>;
                    createdAt: z.ZodDate;
                    startedAt: z.ZodDefault<z.ZodDate>;
                    idempotencyKey: z.ZodOptional<z.ZodString>;
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    version: z.ZodOptional<z.ZodString>;
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    maxDuration: z.ZodOptional<z.ZodNumber>;
                    context: z.ZodUnknown;
                    durationMs: z.ZodNumber;
                    costInCents: z.ZodNumber;
                    baseCostInCents: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                }, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                }>, z.ZodObject<{
                    traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    traceContext?: Record<string, unknown> | undefined;
                }, {
                    traceContext?: Record<string, unknown> | undefined;
                }>>;
                queue: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                }, {
                    name: string;
                    id: string;
                }>;
                environment: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                    branchName: z.ZodOptional<z.ZodString>;
                    git: z.ZodOptional<z.ZodObject<{
                        provider: z.ZodOptional<z.ZodString>;
                        source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                        ghUsername: z.ZodOptional<z.ZodString>;
                        ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                        commitAuthorName: z.ZodOptional<z.ZodString>;
                        commitMessage: z.ZodOptional<z.ZodString>;
                        commitRef: z.ZodOptional<z.ZodString>;
                        commitSha: z.ZodOptional<z.ZodString>;
                        dirty: z.ZodOptional<z.ZodBoolean>;
                        remoteUrl: z.ZodOptional<z.ZodString>;
                        pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                        pullRequestTitle: z.ZodOptional<z.ZodString>;
                        pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                    }, "strip", z.ZodTypeAny, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }>;
                organization: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                }>;
                project: z.ZodObject<{
                    id: z.ZodString;
                    ref: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }>;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>>;
            } & {
                worker: z.ZodObject<{
                    id: z.ZodString;
                    contentHash: z.ZodString;
                    version: z.ZodString;
                    type: z.ZodOptional<z.ZodEnum<["V1", "V2"]>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    version: string;
                    contentHash: string;
                    type?: "V1" | "V2" | undefined;
                }, {
                    id: string;
                    version: string;
                    contentHash: string;
                    type?: "V1" | "V2" | undefined;
                }>;
                machine: z.ZodDefault<z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }>>;
            }, "strip", z.ZodTypeAny, {
                task: {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                worker: {
                    id: string;
                    version: string;
                    contentHash: string;
                    type?: "V1" | "V2" | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
            }, {
                task: {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                worker: {
                    id: string;
                    version: string;
                    contentHash: string;
                    type?: "V1" | "V2" | undefined;
                };
                machine?: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                } | undefined;
                batch?: {
                    id: string;
                } | undefined;
            }>;
            completion: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                ok: z.ZodLiteral<true>;
                id: z.ZodString;
                output: z.ZodOptional<z.ZodString>;
                outputType: z.ZodString;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            }, {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            }>, z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            version: "v1" | "v2";
            execution: {
                task: {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                worker: {
                    id: string;
                    version: string;
                    contentHash: string;
                    type?: "V1" | "V2" | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            } | {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            };
        }, {
            execution: {
                task: {
                    id: string;
                    filePath: string;
                    exportName?: string | undefined;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                attempt: {
                    number: number;
                    status: string;
                    id: string;
                    startedAt: Date;
                    backgroundWorkerId: string;
                    backgroundWorkerTaskId: string;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    baseCostInCents: number;
                    durationMs: number;
                    costInCents: number;
                    context?: unknown;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                worker: {
                    id: string;
                    version: string;
                    contentHash: string;
                    type?: "V1" | "V2" | undefined;
                };
                machine?: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                } | undefined;
                batch?: {
                    id: string;
                } | undefined;
            };
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            } | {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            };
            version?: "v1" | "v2" | undefined;
        }>;
        callback: z.ZodObject<{
            willCheckpointAndRestore: z.ZodBoolean;
            shouldExit: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            willCheckpointAndRestore: boolean;
            shouldExit: boolean;
        }, {
            willCheckpointAndRestore: boolean;
            shouldExit: boolean;
        }>;
    };
    TASK_RUN_FAILED_TO_RUN: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            completion: z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            };
        }, {
            completion: {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            };
            version?: "v1" | undefined;
        }>;
    };
    WAIT_FOR_DURATION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            ms: z.ZodNumber;
            now: z.ZodNumber;
            attemptFriendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            attemptFriendlyId: string;
            ms: number;
            now: number;
        }, {
            attemptFriendlyId: string;
            ms: number;
            now: number;
            version?: "v1" | undefined;
        }>;
        callback: z.ZodObject<{
            willCheckpointAndRestore: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            willCheckpointAndRestore: boolean;
        }, {
            willCheckpointAndRestore: boolean;
        }>;
    };
    WAIT_FOR_TASK: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodEnum<["v1", "v2"]>>;
            friendlyId: z.ZodString;
            attemptFriendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1" | "v2";
            friendlyId: string;
            attemptFriendlyId: string;
        }, {
            friendlyId: string;
            attemptFriendlyId: string;
            version?: "v1" | "v2" | undefined;
        }>;
        callback: z.ZodObject<{
            willCheckpointAndRestore: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            willCheckpointAndRestore: boolean;
        }, {
            willCheckpointAndRestore: boolean;
        }>;
    };
    WAIT_FOR_BATCH: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodEnum<["v1", "v2"]>>;
            batchFriendlyId: z.ZodString;
            runFriendlyIds: z.ZodArray<z.ZodString, "many">;
            attemptFriendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1" | "v2";
            attemptFriendlyId: string;
            batchFriendlyId: string;
            runFriendlyIds: string[];
        }, {
            attemptFriendlyId: string;
            batchFriendlyId: string;
            runFriendlyIds: string[];
            version?: "v1" | "v2" | undefined;
        }>;
        callback: z.ZodObject<{
            willCheckpointAndRestore: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            willCheckpointAndRestore: boolean;
        }, {
            willCheckpointAndRestore: boolean;
        }>;
    };
    INDEXING_FAILED: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            deploymentId: z.ZodString;
            error: z.ZodObject<{
                name: z.ZodString;
                message: z.ZodString;
                stack: z.ZodOptional<z.ZodString>;
                stderr: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }, {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            version: "v1";
            deploymentId: string;
        }, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
                stderr?: string | undefined;
            };
            deploymentId: string;
            version?: "v1" | undefined;
        }>;
    };
    CREATE_TASK_RUN_ATTEMPT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
        }, {
            runId: string;
            version?: "v1" | undefined;
        }>;
        callback: z.ZodDiscriminatedUnion<"success", [z.ZodObject<{
            success: z.ZodLiteral<false>;
            reason: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            success: false;
            reason?: string | undefined;
        }, {
            success: false;
            reason?: string | undefined;
        }>, z.ZodObject<{
            success: z.ZodLiteral<true>;
            executionPayload: z.ZodObject<{
                execution: z.ZodObject<{
                    task: z.ZodObject<{
                        id: z.ZodString;
                        filePath: z.ZodString;
                        exportName: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    }, {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    }>;
                    attempt: z.ZodObject<{
                        number: z.ZodNumber;
                        startedAt: z.ZodDate;
                        id: z.ZodString;
                        backgroundWorkerId: z.ZodString;
                        backgroundWorkerTaskId: z.ZodString;
                        status: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }>;
                    run: z.ZodIntersection<z.ZodObject<{
                        id: z.ZodString;
                        payload: z.ZodString;
                        payloadType: z.ZodString;
                        tags: z.ZodArray<z.ZodString, "many">;
                        isTest: z.ZodDefault<z.ZodBoolean>;
                        createdAt: z.ZodDate;
                        startedAt: z.ZodDefault<z.ZodDate>;
                        idempotencyKey: z.ZodOptional<z.ZodString>;
                        maxAttempts: z.ZodOptional<z.ZodNumber>;
                        version: z.ZodOptional<z.ZodString>;
                        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                        maxDuration: z.ZodOptional<z.ZodNumber>;
                        context: z.ZodUnknown;
                        durationMs: z.ZodNumber;
                        costInCents: z.ZodNumber;
                        baseCostInCents: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    }, {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    }>, z.ZodObject<{
                        traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    }, "strip", z.ZodTypeAny, {
                        traceContext?: Record<string, unknown> | undefined;
                    }, {
                        traceContext?: Record<string, unknown> | undefined;
                    }>>;
                    queue: z.ZodObject<{
                        id: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                    }, {
                        name: string;
                        id: string;
                    }>;
                    environment: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                        branchName: z.ZodOptional<z.ZodString>;
                        git: z.ZodOptional<z.ZodObject<{
                            provider: z.ZodOptional<z.ZodString>;
                            source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                            ghUsername: z.ZodOptional<z.ZodString>;
                            ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                            commitAuthorName: z.ZodOptional<z.ZodString>;
                            commitMessage: z.ZodOptional<z.ZodString>;
                            commitRef: z.ZodOptional<z.ZodString>;
                            commitSha: z.ZodOptional<z.ZodString>;
                            dirty: z.ZodOptional<z.ZodBoolean>;
                            remoteUrl: z.ZodOptional<z.ZodString>;
                            pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                            pullRequestTitle: z.ZodOptional<z.ZodString>;
                            pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                        }, "strip", z.ZodTypeAny, {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        }, {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    }, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    }>;
                    organization: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                    }>;
                    project: z.ZodObject<{
                        id: z.ZodString;
                        ref: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }>;
                    batch: z.ZodOptional<z.ZodObject<{
                        id: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                    }, {
                        id: string;
                    }>>;
                } & {
                    worker: z.ZodObject<{
                        id: z.ZodString;
                        contentHash: z.ZodString;
                        version: z.ZodString;
                        type: z.ZodOptional<z.ZodEnum<["V1", "V2"]>>;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    }, {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    }>;
                    machine: z.ZodDefault<z.ZodObject<{
                        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                        cpu: z.ZodNumber;
                        memory: z.ZodNumber;
                        centsPerMs: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    }, {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    machine: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                }, {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    machine?: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    } | undefined;
                    batch?: {
                        id: string;
                    } | undefined;
                }>;
                traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                metrics: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    event: z.ZodString;
                    timestamp: z.ZodNumber;
                    duration: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }, {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                traceContext: Record<string, unknown>;
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    machine: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                environment?: Record<string, string> | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            }, {
                traceContext: Record<string, unknown>;
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    machine?: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    } | undefined;
                    batch?: {
                        id: string;
                    } | undefined;
                };
                environment?: Record<string, string> | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            success: true;
            executionPayload: {
                traceContext: Record<string, unknown>;
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    machine: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                environment?: Record<string, string> | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            };
        }, {
            success: true;
            executionPayload: {
                traceContext: Record<string, unknown>;
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    machine?: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    } | undefined;
                    batch?: {
                        id: string;
                    } | undefined;
                };
                environment?: Record<string, string> | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            };
        }>]>;
    };
    UNRECOVERABLE_ERROR: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            error: z.ZodObject<{
                name: z.ZodString;
                message: z.ZodString;
                stack: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                message: string;
                name: string;
                stack?: string | undefined;
            }, {
                message: string;
                name: string;
                stack?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
            };
            version: "v1";
        }, {
            error: {
                message: string;
                name: string;
                stack?: string | undefined;
            };
            version?: "v1" | undefined;
        }>;
    };
    SET_STATE: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptFriendlyId: z.ZodOptional<z.ZodString>;
            attemptNumber: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            attemptNumber?: string | undefined;
            attemptFriendlyId?: string | undefined;
        }, {
            version?: "v1" | undefined;
            attemptNumber?: string | undefined;
            attemptFriendlyId?: string | undefined;
        }>;
    };
};
export declare const CoordinatorToProdWorkerMessages: {
    RESUME_AFTER_DEPENDENCY: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptId: z.ZodString;
            completions: z.ZodArray<z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
                ok: z.ZodLiteral<true>;
                id: z.ZodString;
                output: z.ZodOptional<z.ZodString>;
                outputType: z.ZodString;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            }, {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            }>, z.ZodObject<{
                ok: z.ZodLiteral<false>;
                id: z.ZodString;
                error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"BUILT_IN_ERROR">;
                    name: z.ZodString;
                    message: z.ZodString;
                    stackTrace: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }, {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"CUSTOM_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }, {
                    type: "CUSTOM_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"STRING_ERROR">;
                    raw: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: "STRING_ERROR";
                    raw: string;
                }, {
                    type: "STRING_ERROR";
                    raw: string;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"INTERNAL_ERROR">;
                    code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
                    message: z.ZodOptional<z.ZodString>;
                    stackTrace: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }, {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                }>]>;
                retry: z.ZodOptional<z.ZodObject<{
                    timestamp: z.ZodNumber;
                    delay: z.ZodNumber;
                    error: z.ZodOptional<z.ZodUnknown>;
                }, "strip", z.ZodTypeAny, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }, {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                }>>;
                skippedRetrying: z.ZodOptional<z.ZodBoolean>;
                usage: z.ZodOptional<z.ZodObject<{
                    durationMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    durationMs: number;
                }, {
                    durationMs: number;
                }>>;
                taskIdentifier: z.ZodOptional<z.ZodString>;
                metadata: z.ZodOptional<z.ZodObject<{
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"update">;
                        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                    }, "strip", z.ZodTypeAny, {
                        value: Record<string, unknown>;
                        type: "update";
                    }, {
                        value: Record<string, unknown>;
                        type: "update";
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"set">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"delete">;
                        key: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        type: "delete";
                        key: string;
                    }, {
                        type: "delete";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"append">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"remove">;
                        key: z.ZodString;
                        value: z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>;
                    }, "strip", z.ZodTypeAny, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }, {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"increment">;
                        key: z.ZodString;
                        value: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "increment";
                        key: string;
                    }, {
                        value: number;
                        type: "increment";
                        key: string;
                    }>]>, "many">>;
                }, "strip", z.ZodTypeAny, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }, {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                }>>;
                flushedMetadata: z.ZodOptional<z.ZodObject<{
                    data: z.ZodOptional<z.ZodString>;
                    dataType: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dataType: string;
                    data?: string | undefined;
                }, {
                    dataType: string;
                    data?: string | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }, {
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            }>]>, "many">;
            executions: z.ZodArray<z.ZodObject<{
                task: z.ZodObject<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    id: z.ZodString;
                    filePath: z.ZodString;
                }, z.ZodTypeAny, "passthrough">>;
                queue: z.ZodObject<{
                    id: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                }, {
                    name: string;
                    id: string;
                }>;
                environment: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                    branchName: z.ZodOptional<z.ZodString>;
                    git: z.ZodOptional<z.ZodObject<{
                        provider: z.ZodOptional<z.ZodString>;
                        source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                        ghUsername: z.ZodOptional<z.ZodString>;
                        ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                        commitAuthorName: z.ZodOptional<z.ZodString>;
                        commitMessage: z.ZodOptional<z.ZodString>;
                        commitRef: z.ZodOptional<z.ZodString>;
                        commitSha: z.ZodOptional<z.ZodString>;
                        dirty: z.ZodOptional<z.ZodBoolean>;
                        remoteUrl: z.ZodOptional<z.ZodString>;
                        pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                        pullRequestTitle: z.ZodOptional<z.ZodString>;
                        pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                    }, "strip", z.ZodTypeAny, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }, {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }>;
                organization: z.ZodObject<{
                    id: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                }>;
                project: z.ZodObject<{
                    id: z.ZodString;
                    ref: z.ZodString;
                    slug: z.ZodString;
                    name: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }, {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                }>;
                machine: z.ZodObject<{
                    name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                    cpu: z.ZodNumber;
                    memory: z.ZodNumber;
                    centsPerMs: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }, {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                }>;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                }, {
                    id: string;
                }>>;
                deployment: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                    shortCode: z.ZodString;
                    version: z.ZodString;
                    runtime: z.ZodString;
                    runtimeVersion: z.ZodString;
                    git: z.ZodOptional<z.ZodObject<{
                        provider: z.ZodOptional<z.ZodString>;
                        source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                        ghUsername: z.ZodOptional<z.ZodString>;
                        ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                        commitAuthorName: z.ZodOptional<z.ZodString>;
                        commitMessage: z.ZodOptional<z.ZodString>;
                        commitRef: z.ZodOptional<z.ZodString>;
                        commitSha: z.ZodOptional<z.ZodString>;
                        dirty: z.ZodOptional<z.ZodBoolean>;
                        remoteUrl: z.ZodOptional<z.ZodString>;
                        pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                        pullRequestTitle: z.ZodOptional<z.ZodString>;
                        pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                    }, "strip", z.ZodTypeAny, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }, {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }, {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                }>>;
                attempt: z.ZodObject<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
                    number: z.ZodNumber;
                    startedAt: z.ZodDate;
                }, z.ZodTypeAny, "passthrough">>;
                run: z.ZodIntersection<z.ZodObject<{
                    id: z.ZodString;
                    payload: z.ZodString;
                    payloadType: z.ZodString;
                    tags: z.ZodArray<z.ZodString, "many">;
                    isTest: z.ZodDefault<z.ZodBoolean>;
                    createdAt: z.ZodDate;
                    startedAt: z.ZodDefault<z.ZodDate>;
                    idempotencyKey: z.ZodOptional<z.ZodString>;
                    maxAttempts: z.ZodOptional<z.ZodNumber>;
                    version: z.ZodOptional<z.ZodString>;
                    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                    maxDuration: z.ZodOptional<z.ZodNumber>;
                    priority: z.ZodOptional<z.ZodNumber>;
                    baseCostInCents: z.ZodOptional<z.ZodNumber>;
                    parentTaskRunId: z.ZodOptional<z.ZodString>;
                    rootTaskRunId: z.ZodOptional<z.ZodString>;
                    durationMs: z.ZodOptional<z.ZodNumber>;
                    costInCents: z.ZodOptional<z.ZodNumber>;
                    region: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                }, {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                }>, z.ZodObject<{
                    traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                }, "strip", z.ZodTypeAny, {
                    traceContext?: Record<string, unknown> | undefined;
                }, {
                    traceContext?: Record<string, unknown> | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            }, {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            attemptId: string;
            completions: ({
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            } | {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            })[];
            executions: {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    isTest: boolean;
                    createdAt: Date;
                    startedAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            }[];
        }, {
            attemptId: string;
            completions: ({
                error: {
                    message: string;
                    type: "BUILT_IN_ERROR";
                    name: string;
                    stackTrace: string;
                } | {
                    type: "CUSTOM_ERROR";
                    raw: string;
                } | {
                    type: "STRING_ERROR";
                    raw: string;
                } | {
                    code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
                    type: "INTERNAL_ERROR";
                    message?: string | undefined;
                    stackTrace?: string | undefined;
                };
                ok: false;
                id: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                retry?: {
                    timestamp: number;
                    delay: number;
                    error?: unknown;
                } | undefined;
                skippedRetrying?: boolean | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
            } | {
                ok: true;
                id: string;
                outputType: string;
                metadata?: {
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    operations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    parentOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                    rootOperations?: ({
                        value: Record<string, unknown>;
                        type: "update";
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "set";
                        key: string;
                    } | {
                        type: "delete";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "append";
                        key: string;
                    } | {
                        value: import("../../index.js").DeserializedJson;
                        type: "remove";
                        key: string;
                    } | {
                        value: number;
                        type: "increment";
                        key: string;
                    })[] | undefined;
                } | undefined;
                usage?: {
                    durationMs: number;
                } | undefined;
                taskIdentifier?: string | undefined;
                flushedMetadata?: {
                    dataType: string;
                    data?: string | undefined;
                } | undefined;
                output?: string | undefined;
            })[];
            executions: {
                task: {
                    id: string;
                    filePath: string;
                } & {
                    [k: string]: unknown;
                };
                queue: {
                    name: string;
                    id: string;
                };
                environment: {
                    type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                    id: string;
                    slug: string;
                    branchName?: string | undefined;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                };
                organization: {
                    name: string;
                    id: string;
                    slug: string;
                };
                project: {
                    name: string;
                    id: string;
                    slug: string;
                    ref: string;
                };
                machine: {
                    cpu: number;
                    memory: number;
                    name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                    centsPerMs: number;
                };
                attempt: {
                    number: number;
                    startedAt: Date;
                } & {
                    [k: string]: unknown;
                };
                run: {
                    payload: string;
                    id: string;
                    payloadType: string;
                    tags: string[];
                    createdAt: Date;
                    metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                    isTest?: boolean | undefined;
                    startedAt?: Date | undefined;
                    idempotencyKey?: string | undefined;
                    maxAttempts?: number | undefined;
                    version?: string | undefined;
                    maxDuration?: number | undefined;
                    priority?: number | undefined;
                    baseCostInCents?: number | undefined;
                    parentTaskRunId?: string | undefined;
                    rootTaskRunId?: string | undefined;
                    durationMs?: number | undefined;
                    costInCents?: number | undefined;
                    region?: string | undefined;
                } & {
                    traceContext?: Record<string, unknown> | undefined;
                };
                batch?: {
                    id: string;
                } | undefined;
                deployment?: {
                    id: string;
                    version: string;
                    shortCode: string;
                    runtime: string;
                    runtimeVersion: string;
                    git?: {
                        dirty?: boolean | undefined;
                        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                        provider?: string | undefined;
                        ghUsername?: string | undefined;
                        ghUserAvatarUrl?: string | undefined;
                        commitAuthorName?: string | undefined;
                        commitMessage?: string | undefined;
                        commitRef?: string | undefined;
                        commitSha?: string | undefined;
                        remoteUrl?: string | undefined;
                        pullRequestNumber?: number | undefined;
                        pullRequestTitle?: string | undefined;
                        pullRequestState?: "open" | "closed" | "merged" | undefined;
                    } | undefined;
                } | undefined;
            }[];
            version?: "v1" | undefined;
        }>;
    };
    RESUME_AFTER_DURATION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            attemptId: string;
        }, {
            attemptId: string;
            version?: "v1" | undefined;
        }>;
    };
    EXECUTE_TASK_RUN: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            executionPayload: z.ZodObject<{
                execution: z.ZodObject<{
                    task: z.ZodObject<{
                        id: z.ZodString;
                        filePath: z.ZodString;
                        exportName: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    }, {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    }>;
                    attempt: z.ZodObject<{
                        number: z.ZodNumber;
                        startedAt: z.ZodDate;
                        id: z.ZodString;
                        backgroundWorkerId: z.ZodString;
                        backgroundWorkerTaskId: z.ZodString;
                        status: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }, {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    }>;
                    run: z.ZodIntersection<z.ZodObject<{
                        id: z.ZodString;
                        payload: z.ZodString;
                        payloadType: z.ZodString;
                        tags: z.ZodArray<z.ZodString, "many">;
                        isTest: z.ZodDefault<z.ZodBoolean>;
                        createdAt: z.ZodDate;
                        startedAt: z.ZodDefault<z.ZodDate>;
                        idempotencyKey: z.ZodOptional<z.ZodString>;
                        maxAttempts: z.ZodOptional<z.ZodNumber>;
                        version: z.ZodOptional<z.ZodString>;
                        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
                        maxDuration: z.ZodOptional<z.ZodNumber>;
                        context: z.ZodUnknown;
                        durationMs: z.ZodNumber;
                        costInCents: z.ZodNumber;
                        baseCostInCents: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    }, {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    }>, z.ZodObject<{
                        traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
                    }, "strip", z.ZodTypeAny, {
                        traceContext?: Record<string, unknown> | undefined;
                    }, {
                        traceContext?: Record<string, unknown> | undefined;
                    }>>;
                    queue: z.ZodObject<{
                        id: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                    }, {
                        name: string;
                        id: string;
                    }>;
                    environment: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
                        branchName: z.ZodOptional<z.ZodString>;
                        git: z.ZodOptional<z.ZodObject<{
                            provider: z.ZodOptional<z.ZodString>;
                            source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                            ghUsername: z.ZodOptional<z.ZodString>;
                            ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                            commitAuthorName: z.ZodOptional<z.ZodString>;
                            commitMessage: z.ZodOptional<z.ZodString>;
                            commitRef: z.ZodOptional<z.ZodString>;
                            commitSha: z.ZodOptional<z.ZodString>;
                            dirty: z.ZodOptional<z.ZodBoolean>;
                            remoteUrl: z.ZodOptional<z.ZodString>;
                            pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                            pullRequestTitle: z.ZodOptional<z.ZodString>;
                            pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
                        }, "strip", z.ZodTypeAny, {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        }, {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        }>>;
                    }, "strip", z.ZodTypeAny, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    }, {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    }>;
                    organization: z.ZodObject<{
                        id: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                    }>;
                    project: z.ZodObject<{
                        id: z.ZodString;
                        ref: z.ZodString;
                        slug: z.ZodString;
                        name: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }, {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    }>;
                    batch: z.ZodOptional<z.ZodObject<{
                        id: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                    }, {
                        id: string;
                    }>>;
                } & {
                    worker: z.ZodObject<{
                        id: z.ZodString;
                        contentHash: z.ZodString;
                        version: z.ZodString;
                        type: z.ZodOptional<z.ZodEnum<["V1", "V2"]>>;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    }, {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    }>;
                    machine: z.ZodDefault<z.ZodObject<{
                        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                        cpu: z.ZodNumber;
                        memory: z.ZodNumber;
                        centsPerMs: z.ZodNumber;
                    }, "strip", z.ZodTypeAny, {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    }, {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    }>>;
                }, "strip", z.ZodTypeAny, {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    machine: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                }, {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    machine?: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    } | undefined;
                    batch?: {
                        id: string;
                    } | undefined;
                }>;
                traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                metrics: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    event: z.ZodString;
                    timestamp: z.ZodNumber;
                    duration: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }, {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                traceContext: Record<string, unknown>;
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    machine: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                environment?: Record<string, string> | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            }, {
                traceContext: Record<string, unknown>;
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    machine?: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    } | undefined;
                    batch?: {
                        id: string;
                    } | undefined;
                };
                environment?: Record<string, string> | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            executionPayload: {
                traceContext: Record<string, unknown>;
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    machine: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        isTest: boolean;
                        createdAt: Date;
                        startedAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    batch?: {
                        id: string;
                    } | undefined;
                };
                environment?: Record<string, string> | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            };
        }, {
            executionPayload: {
                traceContext: Record<string, unknown>;
                execution: {
                    task: {
                        id: string;
                        filePath: string;
                        exportName?: string | undefined;
                    };
                    queue: {
                        name: string;
                        id: string;
                    };
                    environment: {
                        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
                        id: string;
                        slug: string;
                        branchName?: string | undefined;
                        git?: {
                            dirty?: boolean | undefined;
                            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                            provider?: string | undefined;
                            ghUsername?: string | undefined;
                            ghUserAvatarUrl?: string | undefined;
                            commitAuthorName?: string | undefined;
                            commitMessage?: string | undefined;
                            commitRef?: string | undefined;
                            commitSha?: string | undefined;
                            remoteUrl?: string | undefined;
                            pullRequestNumber?: number | undefined;
                            pullRequestTitle?: string | undefined;
                            pullRequestState?: "open" | "closed" | "merged" | undefined;
                        } | undefined;
                    };
                    organization: {
                        name: string;
                        id: string;
                        slug: string;
                    };
                    project: {
                        name: string;
                        id: string;
                        slug: string;
                        ref: string;
                    };
                    attempt: {
                        number: number;
                        status: string;
                        id: string;
                        startedAt: Date;
                        backgroundWorkerId: string;
                        backgroundWorkerTaskId: string;
                    };
                    run: {
                        payload: string;
                        id: string;
                        payloadType: string;
                        tags: string[];
                        createdAt: Date;
                        baseCostInCents: number;
                        durationMs: number;
                        costInCents: number;
                        context?: unknown;
                        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
                        isTest?: boolean | undefined;
                        startedAt?: Date | undefined;
                        idempotencyKey?: string | undefined;
                        maxAttempts?: number | undefined;
                        version?: string | undefined;
                        maxDuration?: number | undefined;
                    } & {
                        traceContext?: Record<string, unknown> | undefined;
                    };
                    worker: {
                        id: string;
                        version: string;
                        contentHash: string;
                        type?: "V1" | "V2" | undefined;
                    };
                    machine?: {
                        cpu: number;
                        memory: number;
                        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                        centsPerMs: number;
                    } | undefined;
                    batch?: {
                        id: string;
                    } | undefined;
                };
                environment?: Record<string, string> | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            };
            version?: "v1" | undefined;
        }>;
    };
    EXECUTE_TASK_RUN_LAZY_ATTEMPT: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            lazyPayload: z.ZodObject<{
                runId: z.ZodString;
                attemptCount: z.ZodOptional<z.ZodNumber>;
                messageId: z.ZodString;
                isTest: z.ZodBoolean;
                traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
                environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
                metrics: z.ZodOptional<z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    event: z.ZodString;
                    timestamp: z.ZodNumber;
                    duration: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }, {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                environment?: Record<string, string> | undefined;
                attemptCount?: number | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            }, {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                environment?: Record<string, string> | undefined;
                attemptCount?: number | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            lazyPayload: {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                environment?: Record<string, string> | undefined;
                attemptCount?: number | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            };
        }, {
            lazyPayload: {
                isTest: boolean;
                traceContext: Record<string, unknown>;
                runId: string;
                messageId: string;
                environment?: Record<string, string> | undefined;
                attemptCount?: number | undefined;
                metrics?: {
                    event: string;
                    name: string;
                    timestamp: number;
                    duration: number;
                }[] | undefined;
            };
            version?: "v1" | undefined;
        }>;
    };
    REQUEST_ATTEMPT_CANCELLATION: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            attemptId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            attemptId: string;
        }, {
            attemptId: string;
            version?: "v1" | undefined;
        }>;
    };
    REQUEST_EXIT: {
        message: z.ZodDiscriminatedUnion<"version", [z.ZodObject<{
            version: z.ZodLiteral<"v1">;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
        }, {
            version: "v1";
        }>, z.ZodObject<{
            version: z.ZodLiteral<"v2">;
            delayInMs: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            version: "v2";
            delayInMs?: number | undefined;
        }, {
            version: "v2";
            delayInMs?: number | undefined;
        }>]>;
    };
    READY_FOR_RETRY: {
        message: z.ZodObject<{
            version: z.ZodDefault<z.ZodLiteral<"v1">>;
            runId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            version: "v1";
            runId: string;
        }, {
            runId: string;
            version?: "v1" | undefined;
        }>;
    };
};
export declare const ProdWorkerSocketData: z.ZodObject<{
    contentHash: z.ZodString;
    projectRef: z.ZodString;
    envId: z.ZodString;
    runId: z.ZodString;
    attemptFriendlyId: z.ZodOptional<z.ZodString>;
    attemptNumber: z.ZodOptional<z.ZodString>;
    podName: z.ZodString;
    deploymentId: z.ZodString;
    deploymentVersion: z.ZodString;
    requiresCheckpointResumeWithMessage: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    contentHash: string;
    runId: string;
    envId: string;
    deploymentId: string;
    projectRef: string;
    podName: string;
    deploymentVersion: string;
    attemptNumber?: string | undefined;
    attemptFriendlyId?: string | undefined;
    requiresCheckpointResumeWithMessage?: string | undefined;
}, {
    contentHash: string;
    runId: string;
    envId: string;
    deploymentId: string;
    projectRef: string;
    podName: string;
    deploymentVersion: string;
    attemptNumber?: string | undefined;
    attemptFriendlyId?: string | undefined;
    requiresCheckpointResumeWithMessage?: string | undefined;
}>;
export declare const CoordinatorSocketData: z.ZodObject<{
    supportsDynamicConfig: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    supportsDynamicConfig?: string | undefined;
}, {
    supportsDynamicConfig?: string | undefined;
}>;
