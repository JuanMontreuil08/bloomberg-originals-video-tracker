import { z } from "zod";
/**
 * The type of queue, either "task" or "custom"
 * "task" are created automatically for each task.
 * "custom" are created by you explicitly in your code.
 * */
export declare const QueueType: z.ZodEnum<["task", "custom"]>;
export type QueueType = z.infer<typeof QueueType>;
export declare const RetrieveQueueType: z.ZodEnum<["task", "custom", "id"]>;
export type RetrieveQueueType = z.infer<typeof RetrieveQueueType>;
export declare const QueueItem: z.ZodObject<{
    /** The queue id, e.g. queue_12345 */
    id: z.ZodString;
    /** The queue name */
    name: z.ZodString;
    /**
     * The queue type, either "task" or "custom"
     * "task" are created automatically for each task.
     * "custom" are created by you explicitly in your code.
     * */
    type: z.ZodEnum<["task", "custom"]>;
    /** The number of runs currently running */
    running: z.ZodNumber;
    /** The number of runs currently queued */
    queued: z.ZodNumber;
    /** The concurrency limit of the queue */
    concurrencyLimit: z.ZodNullable<z.ZodNumber>;
    /** Whether the queue is paused. If it's paused, no new runs will be started. */
    paused: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    type: "custom" | "task";
    name: string;
    id: string;
    concurrencyLimit: number | null;
    running: number;
    queued: number;
    paused: boolean;
}, {
    type: "custom" | "task";
    name: string;
    id: string;
    concurrencyLimit: number | null;
    running: number;
    queued: number;
    paused: boolean;
}>;
export type QueueItem = z.infer<typeof QueueItem>;
export declare const ListQueueOptions: z.ZodObject<{
    /** The page number */
    page: z.ZodOptional<z.ZodNumber>;
    /** The number of queues per page */
    perPage: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    page?: number | undefined;
    perPage?: number | undefined;
}, {
    page?: number | undefined;
    perPage?: number | undefined;
}>;
export type ListQueueOptions = z.infer<typeof ListQueueOptions>;
export declare const QueueTypeName: z.ZodObject<{
    /** "task" or "custom" */
    type: z.ZodEnum<["task", "custom"]>;
    /** The name of your queue.
     * For "task" type it will be the task id, for "custom" it will be the name you specified.
     * */
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "custom" | "task";
    name: string;
}, {
    type: "custom" | "task";
    name: string;
}>;
export type QueueTypeName = z.infer<typeof QueueTypeName>;
/**
 * When retrieving a queue you can either use the queue id,
 * or the type and name.
 *
 * @example
 *
 * ```ts
 * // Use a queue id (they start with queue_
 * const q1 = await queues.retrieve("queue_12345");
 *
 * // Or use the type and name
 * // The default queue for your "my-task-id"
 * const q2 = await queues.retrieve({ type: "task", name: "my-task-id"});
 *
 * // The custom queue you defined in your code
 * const q3 = await queues.retrieve({ type: "custom", name: "my-custom-queue" });
 * ```
 */
export declare const RetrieveQueueParam: z.ZodUnion<[z.ZodString, z.ZodObject<{
    /** "task" or "custom" */
    type: z.ZodEnum<["task", "custom"]>;
    /** The name of your queue.
     * For "task" type it will be the task id, for "custom" it will be the name you specified.
     * */
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "custom" | "task";
    name: string;
}, {
    type: "custom" | "task";
    name: string;
}>]>;
export type RetrieveQueueParam = z.infer<typeof RetrieveQueueParam>;
