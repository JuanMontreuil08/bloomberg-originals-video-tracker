import { z } from "zod";
export declare const TaskResource: z.ZodObject<{
    id: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    filePath: z.ZodString;
    exportName: z.ZodOptional<z.ZodString>;
    queue: z.ZodOptional<z.ZodObject<{
        concurrencyLimit: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
    } & {
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        concurrencyLimit?: number | null | undefined;
    }, {
        name?: string | undefined;
        concurrencyLimit?: number | null | undefined;
    }>>;
    retry: z.ZodOptional<z.ZodObject<{
        maxAttempts: z.ZodOptional<z.ZodNumber>;
        factor: z.ZodOptional<z.ZodNumber>;
        minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
        maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
        randomize: z.ZodOptional<z.ZodBoolean>;
        outOfMemory: z.ZodOptional<z.ZodObject<{
            machine: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
        }, "strip", z.ZodTypeAny, {
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        }, {
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
        outOfMemory?: {
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
    }, {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
        outOfMemory?: {
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
    }>>;
    machine: z.ZodOptional<z.ZodObject<{
        cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
        memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
        preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
    }, "strip", z.ZodTypeAny, {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    }, {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    }>>;
    triggerSource: z.ZodOptional<z.ZodString>;
    schedule: z.ZodOptional<z.ZodObject<{
        cron: z.ZodString;
        timezone: z.ZodString;
        environments: z.ZodOptional<z.ZodArray<z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        cron: string;
        timezone: string;
        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
    }, {
        cron: string;
        timezone: string;
        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
    }>>;
    maxDuration: z.ZodOptional<z.ZodNumber>;
    payloadSchema: z.ZodOptional<z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    id: string;
    filePath: string;
    maxDuration?: number | undefined;
    queue?: {
        name?: string | undefined;
        concurrencyLimit?: number | null | undefined;
    } | undefined;
    machine?: {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    } | undefined;
    exportName?: string | undefined;
    retry?: {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
        outOfMemory?: {
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
    } | undefined;
    description?: string | undefined;
    triggerSource?: string | undefined;
    schedule?: {
        cron: string;
        timezone: string;
        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
    } | undefined;
    payloadSchema?: unknown;
}, {
    id: string;
    filePath: string;
    maxDuration?: number | undefined;
    queue?: {
        name?: string | undefined;
        concurrencyLimit?: number | null | undefined;
    } | undefined;
    machine?: {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    } | undefined;
    exportName?: string | undefined;
    retry?: {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
        outOfMemory?: {
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
    } | undefined;
    description?: string | undefined;
    triggerSource?: string | undefined;
    schedule?: {
        cron: string;
        timezone: string;
        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
    } | undefined;
    payloadSchema?: unknown;
}>;
export type TaskResource = z.infer<typeof TaskResource>;
export declare const BackgroundWorkerSourceFileMetadata: z.ZodObject<{
    filePath: z.ZodString;
    contents: z.ZodString;
    contentHash: z.ZodString;
    taskIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    filePath: string;
    contentHash: string;
    contents: string;
    taskIds: string[];
}, {
    filePath: string;
    contentHash: string;
    contents: string;
    taskIds: string[];
}>;
export type BackgroundWorkerSourceFileMetadata = z.infer<typeof BackgroundWorkerSourceFileMetadata>;
export declare const BackgroundWorkerMetadata: z.ZodObject<{
    packageVersion: z.ZodString;
    contentHash: z.ZodString;
    cliPackageVersion: z.ZodOptional<z.ZodString>;
    tasks: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        filePath: z.ZodString;
        exportName: z.ZodOptional<z.ZodString>;
        queue: z.ZodOptional<z.ZodObject<{
            concurrencyLimit: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
        } & {
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            concurrencyLimit?: number | null | undefined;
        }, {
            name?: string | undefined;
            concurrencyLimit?: number | null | undefined;
        }>>;
        retry: z.ZodOptional<z.ZodObject<{
            maxAttempts: z.ZodOptional<z.ZodNumber>;
            factor: z.ZodOptional<z.ZodNumber>;
            minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
            maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
            randomize: z.ZodOptional<z.ZodBoolean>;
            outOfMemory: z.ZodOptional<z.ZodObject<{
                machine: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
            }, "strip", z.ZodTypeAny, {
                machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            }, {
                machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
            outOfMemory?: {
                machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            } | undefined;
        }, {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
            outOfMemory?: {
                machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            } | undefined;
        }>>;
        machine: z.ZodOptional<z.ZodObject<{
            cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
            memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
            preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
        }, "strip", z.ZodTypeAny, {
            cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
            preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        }, {
            cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
            preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        }>>;
        triggerSource: z.ZodOptional<z.ZodString>;
        schedule: z.ZodOptional<z.ZodObject<{
            cron: z.ZodString;
            timezone: z.ZodString;
            environments: z.ZodOptional<z.ZodArray<z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>, "many">>;
        }, "strip", z.ZodTypeAny, {
            cron: string;
            timezone: string;
            environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
        }, {
            cron: string;
            timezone: string;
            environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
        }>>;
        maxDuration: z.ZodOptional<z.ZodNumber>;
        payloadSchema: z.ZodOptional<z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        filePath: string;
        maxDuration?: number | undefined;
        queue?: {
            name?: string | undefined;
            concurrencyLimit?: number | null | undefined;
        } | undefined;
        machine?: {
            cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
            preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
        exportName?: string | undefined;
        retry?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
            outOfMemory?: {
                machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            } | undefined;
        } | undefined;
        description?: string | undefined;
        triggerSource?: string | undefined;
        schedule?: {
            cron: string;
            timezone: string;
            environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
        } | undefined;
        payloadSchema?: unknown;
    }, {
        id: string;
        filePath: string;
        maxDuration?: number | undefined;
        queue?: {
            name?: string | undefined;
            concurrencyLimit?: number | null | undefined;
        } | undefined;
        machine?: {
            cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
            preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
        exportName?: string | undefined;
        retry?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
            outOfMemory?: {
                machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            } | undefined;
        } | undefined;
        description?: string | undefined;
        triggerSource?: string | undefined;
        schedule?: {
            cron: string;
            timezone: string;
            environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
        } | undefined;
        payloadSchema?: unknown;
    }>, "many">;
    queues: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        concurrencyLimit: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        concurrencyLimit?: number | null | undefined;
    }, {
        name: string;
        concurrencyLimit?: number | null | undefined;
    }>, "many">>;
    sourceFiles: z.ZodOptional<z.ZodArray<z.ZodObject<{
        filePath: z.ZodString;
        contents: z.ZodString;
        contentHash: z.ZodString;
        taskIds: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        filePath: string;
        contentHash: string;
        contents: string;
        taskIds: string[];
    }, {
        filePath: string;
        contentHash: string;
        contents: string;
        taskIds: string[];
    }>, "many">>;
    runtime: z.ZodOptional<z.ZodString>;
    runtimeVersion: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    contentHash: string;
    packageVersion: string;
    tasks: {
        id: string;
        filePath: string;
        maxDuration?: number | undefined;
        queue?: {
            name?: string | undefined;
            concurrencyLimit?: number | null | undefined;
        } | undefined;
        machine?: {
            cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
            preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
        exportName?: string | undefined;
        retry?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
            outOfMemory?: {
                machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            } | undefined;
        } | undefined;
        description?: string | undefined;
        triggerSource?: string | undefined;
        schedule?: {
            cron: string;
            timezone: string;
            environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
        } | undefined;
        payloadSchema?: unknown;
    }[];
    runtime?: string | undefined;
    runtimeVersion?: string | undefined;
    queues?: {
        name: string;
        concurrencyLimit?: number | null | undefined;
    }[] | undefined;
    cliPackageVersion?: string | undefined;
    sourceFiles?: {
        filePath: string;
        contentHash: string;
        contents: string;
        taskIds: string[];
    }[] | undefined;
}, {
    contentHash: string;
    packageVersion: string;
    tasks: {
        id: string;
        filePath: string;
        maxDuration?: number | undefined;
        queue?: {
            name?: string | undefined;
            concurrencyLimit?: number | null | undefined;
        } | undefined;
        machine?: {
            cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
            memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
            preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
        exportName?: string | undefined;
        retry?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
            outOfMemory?: {
                machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            } | undefined;
        } | undefined;
        description?: string | undefined;
        triggerSource?: string | undefined;
        schedule?: {
            cron: string;
            timezone: string;
            environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
        } | undefined;
        payloadSchema?: unknown;
    }[];
    runtime?: string | undefined;
    runtimeVersion?: string | undefined;
    queues?: {
        name: string;
        concurrencyLimit?: number | null | undefined;
    }[] | undefined;
    cliPackageVersion?: string | undefined;
    sourceFiles?: {
        filePath: string;
        contentHash: string;
        contents: string;
        taskIds: string[];
    }[] | undefined;
}>;
export type BackgroundWorkerMetadata = z.infer<typeof BackgroundWorkerMetadata>;
export declare const ImageDetailsMetadata: z.ZodObject<{
    contentHash: z.ZodString;
    imageTag: z.ZodString;
}, "strip", z.ZodTypeAny, {
    contentHash: string;
    imageTag: string;
}, {
    contentHash: string;
    imageTag: string;
}>;
export type ImageDetailsMetadata = z.infer<typeof ImageDetailsMetadata>;
