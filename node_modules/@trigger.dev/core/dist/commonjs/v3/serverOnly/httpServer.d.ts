import { createServer, type IncomingMessage, type ServerResponse } from "node:http";
import { z } from "zod";
import { HttpReply } from "../apps/http.js";
import { Registry } from "prom-client";
type RouteHandler<TParams extends z.ZodFirstPartySchemaTypes = z.ZodUnknown, TQuery extends z.ZodFirstPartySchemaTypes = z.ZodUnknown, TBody extends z.ZodFirstPartySchemaTypes = z.ZodUnknown> = (ctx: {
    params: z.infer<TParams>;
    queryParams: z.infer<TQuery>;
    body: z.infer<TBody>;
    req: IncomingMessage;
    res: ServerResponse;
    reply: HttpReply;
}) => Promise<any>;
interface RouteDefinition<TParams extends z.ZodFirstPartySchemaTypes = z.ZodUnknown, TQuery extends z.ZodFirstPartySchemaTypes = z.ZodUnknown, TBody extends z.ZodFirstPartySchemaTypes = z.ZodUnknown> {
    paramsSchema?: TParams;
    querySchema?: TQuery;
    bodySchema?: TBody;
    keepConnectionAlive?: boolean;
    handler: RouteHandler<TParams, TQuery, TBody>;
}
declare const HttpMethod: z.ZodEnum<["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS", "HEAD", "CONNECT", "TRACE"]>;
type HttpMethod = z.infer<typeof HttpMethod>;
type HttpServerOptions = {
    port: number;
    host: string;
    metrics?: {
        register?: Registry;
        expose?: boolean;
        collect?: boolean;
    };
};
export declare class HttpServer {
    private static httpRequestDuration?;
    private static httpRequestTotal?;
    private readonly metricsRegister?;
    private readonly port;
    private readonly host;
    private routes;
    readonly server: ReturnType<typeof createServer>;
    constructor(options: HttpServerOptions);
    route<TParams extends z.ZodFirstPartySchemaTypes = z.ZodUnknown, TQuery extends z.ZodFirstPartySchemaTypes = z.ZodUnknown, TBody extends z.ZodFirstPartySchemaTypes = z.ZodUnknown>(path: `/${string}`, method: HttpMethod, definition: RouteDefinition<TParams, TQuery, TBody>): this;
    start(): Promise<void>;
    stop(): Promise<void>;
    private collectMetrics;
    private optionalSchema;
    private parseQueryParams;
    private parseRouteParams;
    private findRoute;
    private formatError;
}
export {};
