import { AnyOnCatchErrorHookFunction, AnyOnCleanupHookFunction, AnyOnCompleteHookFunction, AnyOnFailureHookFunction, AnyOnInitHookFunction, AnyOnMiddlewareHookFunction, AnyOnResumeHookFunction, AnyOnStartHookFunction, AnyOnSuccessHookFunction, AnyOnWaitHookFunction, AnyOnCancelHookFunction, RegisteredHookFunction, RegisterHookFunctionParams, TaskWait, type LifecycleHooksManager } from "./types.js";
export declare class LifecycleHooksAPI {
    #private;
    private static _instance?;
    private constructor();
    static getInstance(): LifecycleHooksAPI;
    setGlobalLifecycleHooksManager(lifecycleHooksManager: LifecycleHooksManager): boolean;
    disable(): void;
    registerGlobalInitHook(hook: RegisterHookFunctionParams<AnyOnInitHookFunction>): void;
    registerTaskInitHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnInitHookFunction>): void;
    getTaskInitHook(taskId: string): AnyOnInitHookFunction | undefined;
    getGlobalInitHooks(): RegisteredHookFunction<AnyOnInitHookFunction>[];
    registerTaskStartHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnStartHookFunction>): void;
    registerGlobalStartHook(hook: RegisterHookFunctionParams<AnyOnStartHookFunction>): void;
    getTaskStartHook(taskId: string): AnyOnStartHookFunction | undefined;
    getGlobalStartHooks(): RegisteredHookFunction<AnyOnStartHookFunction>[];
    registerGlobalFailureHook(hook: RegisterHookFunctionParams<AnyOnFailureHookFunction>): void;
    registerTaskFailureHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnFailureHookFunction>): void;
    getTaskFailureHook(taskId: string): AnyOnFailureHookFunction | undefined;
    getGlobalFailureHooks(): RegisteredHookFunction<AnyOnFailureHookFunction>[];
    registerGlobalSuccessHook(hook: RegisterHookFunctionParams<AnyOnSuccessHookFunction>): void;
    registerTaskSuccessHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnSuccessHookFunction>): void;
    getTaskSuccessHook(taskId: string): AnyOnSuccessHookFunction | undefined;
    getGlobalSuccessHooks(): RegisteredHookFunction<AnyOnSuccessHookFunction>[];
    registerGlobalCompleteHook(hook: RegisterHookFunctionParams<AnyOnCompleteHookFunction>): void;
    registerTaskCompleteHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnCompleteHookFunction>): void;
    getTaskCompleteHook(taskId: string): AnyOnCompleteHookFunction | undefined;
    getGlobalCompleteHooks(): RegisteredHookFunction<AnyOnCompleteHookFunction>[];
    registerGlobalWaitHook(hook: RegisterHookFunctionParams<AnyOnWaitHookFunction>): void;
    registerTaskWaitHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnWaitHookFunction>): void;
    getTaskWaitHook(taskId: string): AnyOnWaitHookFunction | undefined;
    getGlobalWaitHooks(): RegisteredHookFunction<AnyOnWaitHookFunction>[];
    registerGlobalResumeHook(hook: RegisterHookFunctionParams<AnyOnResumeHookFunction>): void;
    registerTaskResumeHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnResumeHookFunction>): void;
    getTaskResumeHook(taskId: string): AnyOnResumeHookFunction | undefined;
    getGlobalResumeHooks(): RegisteredHookFunction<AnyOnResumeHookFunction>[];
    registerGlobalCatchErrorHook(hook: RegisterHookFunctionParams<AnyOnCatchErrorHookFunction>): void;
    registerTaskCatchErrorHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnCatchErrorHookFunction>): void;
    getTaskCatchErrorHook(taskId: string): AnyOnCatchErrorHookFunction | undefined;
    getGlobalCatchErrorHooks(): RegisteredHookFunction<AnyOnCatchErrorHookFunction>[];
    registerGlobalMiddlewareHook(hook: RegisterHookFunctionParams<AnyOnMiddlewareHookFunction>): void;
    registerTaskMiddlewareHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnMiddlewareHookFunction>): void;
    getTaskMiddlewareHook(taskId: string): AnyOnMiddlewareHookFunction | undefined;
    getGlobalMiddlewareHooks(): RegisteredHookFunction<AnyOnMiddlewareHookFunction>[];
    registerGlobalCleanupHook(hook: RegisterHookFunctionParams<AnyOnCleanupHookFunction>): void;
    registerTaskCleanupHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnCleanupHookFunction>): void;
    getTaskCleanupHook(taskId: string): AnyOnCleanupHookFunction | undefined;
    getGlobalCleanupHooks(): RegisteredHookFunction<AnyOnCleanupHookFunction>[];
    callOnWaitHookListeners(wait: TaskWait): Promise<void>;
    callOnResumeHookListeners(wait: TaskWait): Promise<void>;
    registerOnWaitHookListener(listener: (wait: TaskWait) => Promise<void>): void;
    registerOnResumeHookListener(listener: (wait: TaskWait) => Promise<void>): void;
    registerGlobalCancelHook(hook: RegisterHookFunctionParams<AnyOnCancelHookFunction>): void;
    registerTaskCancelHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnCancelHookFunction>): void;
    getTaskCancelHook(taskId: string): AnyOnCancelHookFunction | undefined;
    getGlobalCancelHooks(): RegisteredHookFunction<AnyOnCancelHookFunction>[];
    callOnCancelHookListeners(): Promise<void>;
    registerOnCancelHookListener(listener: () => Promise<void>): void;
}
