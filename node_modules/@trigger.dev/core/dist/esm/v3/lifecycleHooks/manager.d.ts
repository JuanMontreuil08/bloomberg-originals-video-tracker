import { AnyOnInitHookFunction, AnyOnStartHookFunction, LifecycleHooksManager, RegisteredHookFunction, RegisterHookFunctionParams, AnyOnFailureHookFunction, AnyOnSuccessHookFunction, AnyOnCompleteHookFunction, AnyOnWaitHookFunction, AnyOnResumeHookFunction, AnyOnCatchErrorHookFunction, AnyOnMiddlewareHookFunction, AnyOnCleanupHookFunction, TaskWait, AnyOnCancelHookFunction } from "./types.js";
export declare class StandardLifecycleHooksManager implements LifecycleHooksManager {
    private globalInitHooks;
    private taskInitHooks;
    private globalStartHooks;
    private taskStartHooks;
    private globalFailureHooks;
    private taskFailureHooks;
    private globalSuccessHooks;
    private taskSuccessHooks;
    private globalCompleteHooks;
    private taskCompleteHooks;
    private globalResumeHooks;
    private taskResumeHooks;
    private globalCatchErrorHooks;
    private taskCatchErrorHooks;
    private globalMiddlewareHooks;
    private taskMiddlewareHooks;
    private globalCleanupHooks;
    private taskCleanupHooks;
    private globalWaitHooks;
    private taskWaitHooks;
    private onWaitHookListeners;
    private onResumeHookListeners;
    private globalCancelHooks;
    private taskCancelHooks;
    private onCancelHookListeners;
    reset(): void;
    registerOnCancelHookListener(listener: () => Promise<void>): void;
    callOnCancelHookListeners(): Promise<void>;
    registerOnWaitHookListener(listener: (wait: TaskWait) => Promise<void>): void;
    callOnWaitHookListeners(wait: TaskWait): Promise<void>;
    registerOnResumeHookListener(listener: (wait: TaskWait) => Promise<void>): void;
    callOnResumeHookListeners(wait: TaskWait): Promise<void>;
    registerGlobalStartHook(hook: RegisterHookFunctionParams<AnyOnStartHookFunction>): void;
    registerTaskStartHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnStartHookFunction>): void;
    getTaskStartHook(taskId: string): AnyOnStartHookFunction | undefined;
    getGlobalStartHooks(): RegisteredHookFunction<AnyOnStartHookFunction>[];
    registerGlobalInitHook(hook: RegisterHookFunctionParams<AnyOnInitHookFunction>): void;
    registerTaskInitHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnInitHookFunction>): void;
    getTaskInitHook(taskId: string): AnyOnInitHookFunction | undefined;
    getGlobalInitHooks(): RegisteredHookFunction<AnyOnInitHookFunction>[];
    registerGlobalFailureHook(hook: RegisterHookFunctionParams<AnyOnFailureHookFunction>): void;
    registerTaskFailureHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnFailureHookFunction>): void;
    getTaskFailureHook(taskId: string): AnyOnFailureHookFunction | undefined;
    getGlobalFailureHooks(): RegisteredHookFunction<AnyOnFailureHookFunction>[];
    registerGlobalSuccessHook(hook: RegisterHookFunctionParams<AnyOnSuccessHookFunction>): void;
    registerTaskSuccessHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnSuccessHookFunction>): void;
    getTaskSuccessHook(taskId: string): AnyOnSuccessHookFunction | undefined;
    getGlobalSuccessHooks(): RegisteredHookFunction<AnyOnSuccessHookFunction>[];
    registerGlobalCompleteHook(hook: RegisterHookFunctionParams<AnyOnCompleteHookFunction>): void;
    registerTaskCompleteHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnCompleteHookFunction>): void;
    getTaskCompleteHook(taskId: string): AnyOnCompleteHookFunction | undefined;
    getGlobalCompleteHooks(): RegisteredHookFunction<AnyOnCompleteHookFunction>[];
    registerGlobalWaitHook(hook: RegisterHookFunctionParams<AnyOnWaitHookFunction>): void;
    registerTaskWaitHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnWaitHookFunction>): void;
    getTaskWaitHook(taskId: string): AnyOnWaitHookFunction | undefined;
    getGlobalWaitHooks(): RegisteredHookFunction<AnyOnWaitHookFunction>[];
    registerGlobalResumeHook(hook: RegisterHookFunctionParams<AnyOnResumeHookFunction>): void;
    registerTaskResumeHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnResumeHookFunction>): void;
    getTaskResumeHook(taskId: string): AnyOnResumeHookFunction | undefined;
    getGlobalResumeHooks(): RegisteredHookFunction<AnyOnResumeHookFunction>[];
    registerGlobalCatchErrorHook(hook: RegisterHookFunctionParams<AnyOnCatchErrorHookFunction>): void;
    registerTaskCatchErrorHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnCatchErrorHookFunction>): void;
    getTaskCatchErrorHook(taskId: string): AnyOnCatchErrorHookFunction | undefined;
    getGlobalCatchErrorHooks(): RegisteredHookFunction<AnyOnCatchErrorHookFunction>[];
    registerGlobalMiddlewareHook(hook: RegisterHookFunctionParams<AnyOnMiddlewareHookFunction>): void;
    registerTaskMiddlewareHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnMiddlewareHookFunction>): void;
    getTaskMiddlewareHook(taskId: string): AnyOnMiddlewareHookFunction | undefined;
    getGlobalMiddlewareHooks(): RegisteredHookFunction<AnyOnMiddlewareHookFunction>[];
    registerGlobalCleanupHook(hook: RegisterHookFunctionParams<AnyOnCleanupHookFunction>): void;
    registerTaskCleanupHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnCleanupHookFunction>): void;
    getTaskCleanupHook(taskId: string): AnyOnCleanupHookFunction | undefined;
    getGlobalCleanupHooks(): RegisteredHookFunction<AnyOnCleanupHookFunction>[];
    registerGlobalCancelHook(hook: RegisterHookFunctionParams<AnyOnCancelHookFunction>): void;
    registerTaskCancelHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnCancelHookFunction>): void;
    getGlobalCancelHooks(): RegisteredHookFunction<AnyOnCancelHookFunction>[];
    getTaskCancelHook(taskId: string): AnyOnCancelHookFunction | undefined;
}
export declare class NoopLifecycleHooksManager implements LifecycleHooksManager {
    registerOnCancelHookListener(listener: () => Promise<void>): void;
    callOnCancelHookListeners(): Promise<void>;
    registerGlobalCancelHook(hook: RegisterHookFunctionParams<AnyOnCancelHookFunction>): void;
    registerTaskCancelHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnCancelHookFunction>): void;
    getTaskCancelHook(taskId: string): AnyOnCancelHookFunction | undefined;
    getGlobalCancelHooks(): RegisteredHookFunction<AnyOnCancelHookFunction>[];
    registerOnWaitHookListener(listener: (wait: TaskWait) => Promise<void>): void;
    callOnWaitHookListeners(wait: TaskWait): Promise<void>;
    registerOnResumeHookListener(listener: (wait: TaskWait) => Promise<void>): void;
    callOnResumeHookListeners(wait: TaskWait): Promise<void>;
    registerGlobalInitHook(hook: RegisterHookFunctionParams<AnyOnInitHookFunction>): void;
    registerTaskInitHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnInitHookFunction>): void;
    getTaskInitHook(taskId: string): AnyOnInitHookFunction | undefined;
    getGlobalInitHooks(): RegisteredHookFunction<AnyOnInitHookFunction>[];
    registerGlobalStartHook(hook: RegisterHookFunctionParams<AnyOnStartHookFunction>): void;
    registerTaskStartHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnStartHookFunction>): void;
    getTaskStartHook(taskId: string): AnyOnStartHookFunction | undefined;
    getGlobalStartHooks(): RegisteredHookFunction<AnyOnStartHookFunction>[];
    registerGlobalFailureHook(hook: RegisterHookFunctionParams<AnyOnFailureHookFunction>): void;
    registerTaskFailureHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnFailureHookFunction>): void;
    getTaskFailureHook(taskId: string): AnyOnFailureHookFunction | undefined;
    getGlobalFailureHooks(): RegisteredHookFunction<AnyOnFailureHookFunction>[];
    registerGlobalSuccessHook(hook: RegisterHookFunctionParams<AnyOnSuccessHookFunction>): void;
    registerTaskSuccessHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnSuccessHookFunction>): void;
    getTaskSuccessHook(taskId: string): AnyOnSuccessHookFunction | undefined;
    getGlobalSuccessHooks(): RegisteredHookFunction<AnyOnSuccessHookFunction>[];
    registerGlobalCompleteHook(hook: RegisterHookFunctionParams<AnyOnCompleteHookFunction>): void;
    registerTaskCompleteHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnCompleteHookFunction>): void;
    getTaskCompleteHook(taskId: string): AnyOnCompleteHookFunction | undefined;
    getGlobalCompleteHooks(): RegisteredHookFunction<AnyOnCompleteHookFunction>[];
    registerGlobalWaitHook(hook: RegisterHookFunctionParams<AnyOnWaitHookFunction>): void;
    registerTaskWaitHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnWaitHookFunction>): void;
    getTaskWaitHook(taskId: string): AnyOnWaitHookFunction | undefined;
    getGlobalWaitHooks(): RegisteredHookFunction<AnyOnWaitHookFunction>[];
    registerGlobalResumeHook(hook: RegisterHookFunctionParams<AnyOnResumeHookFunction>): void;
    registerTaskResumeHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnResumeHookFunction>): void;
    getTaskResumeHook(taskId: string): AnyOnResumeHookFunction | undefined;
    getGlobalResumeHooks(): RegisteredHookFunction<AnyOnResumeHookFunction>[];
    registerGlobalCatchErrorHook(): void;
    registerTaskCatchErrorHook(): void;
    getTaskCatchErrorHook(): undefined;
    getGlobalCatchErrorHooks(): [];
    registerGlobalMiddlewareHook(): void;
    registerTaskMiddlewareHook(): void;
    getTaskMiddlewareHook(): undefined;
    getGlobalMiddlewareHooks(): [];
    registerGlobalCleanupHook(hook: RegisterHookFunctionParams<AnyOnCleanupHookFunction>): void;
    registerTaskCleanupHook(taskId: string, hook: RegisterHookFunctionParams<AnyOnCleanupHookFunction>): void;
    getTaskCleanupHook(taskId: string): AnyOnCleanupHookFunction | undefined;
    getGlobalCleanupHooks(): RegisteredHookFunction<AnyOnCleanupHookFunction>[];
}
