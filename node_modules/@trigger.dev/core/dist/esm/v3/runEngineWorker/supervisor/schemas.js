import { z } from "zod";
import { TaskRunExecutionResult } from "../../schemas/common.js";
import { MachineResources, DequeuedMessage, StartRunAttemptResult, CompleteRunAttemptResult, RunExecutionData, CheckpointInput, ExecutionResult, } from "../../schemas/runEngine.js";
export const WorkerApiHeartbeatRequestBody = z.object({
    cpu: z.object({
        used: z.number(),
        available: z.number(),
    }),
    memory: z.object({
        used: z.number(),
        available: z.number(),
    }),
    tasks: z.array(z.string()),
});
export const WorkerApiHeartbeatResponseBody = z.object({
    ok: z.literal(true),
});
export const WorkerApiSuspendRunRequestBody = z.discriminatedUnion("success", [
    z.object({
        success: z.literal(true),
        checkpoint: CheckpointInput,
    }),
    z.object({
        success: z.literal(false),
        error: z.string(),
    }),
]);
export const WorkerApiSuspendRunResponseBody = z.object({
    ok: z.literal(true),
});
export const WorkerApiContinueRunExecutionRequestBody = ExecutionResult;
export const WorkerApiConnectRequestBody = z.object({
    metadata: z.record(z.any()),
});
export const WorkerApiConnectResponseBody = z.object({
    ok: z.literal(true),
    workerGroup: z.object({
        type: z.string(),
        name: z.string(),
    }),
});
export const WorkerApiDequeueRequestBody = z.object({
    maxResources: MachineResources.optional(),
    maxRunCount: z.number().optional(),
});
export const WorkerApiDequeueResponseBody = DequeuedMessage.array();
export const WorkerApiRunHeartbeatRequestBody = z.object({
    cpu: z.number().optional(),
    memory: z.number().optional(),
});
export const WorkerApiRunHeartbeatResponseBody = z.object({
    ok: z.literal(true),
});
export const WorkerApiRunAttemptStartRequestBody = z.object({
    isWarmStart: z.boolean().optional(),
});
export const WorkerApiRunAttemptStartResponseBody = StartRunAttemptResult.and(z.object({
    envVars: z.record(z.string()),
}));
export const WorkerApiRunAttemptCompleteRequestBody = z.object({
    completion: TaskRunExecutionResult,
});
export const WorkerApiRunAttemptCompleteResponseBody = z.object({
    result: CompleteRunAttemptResult,
});
export const WorkerApiRunLatestSnapshotResponseBody = z.object({
    execution: RunExecutionData,
});
export const WorkerApiDequeueFromVersionResponseBody = DequeuedMessage.array();
export const DebugLogPropertiesValue = z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.array(z.string().nullish()),
    z.array(z.number().nullish()),
    z.array(z.boolean().nullish()),
]);
export const DebugLogProperties = z.record(z.string(), DebugLogPropertiesValue.optional());
export const DebugLogPropertiesInput = z.record(z.string(), z.unknown());
export const WorkerApiDebugLogBodyInput = z.object({
    time: z.coerce.date(),
    message: z.string(),
    properties: DebugLogPropertiesInput.optional(),
});
export const WorkerApiDebugLogBody = z.object({
    time: z.coerce.date(),
    message: z.string(),
    properties: DebugLogProperties.optional(),
});
export const WorkerApiSuspendCompletionResponseBody = z.object({
    success: z.boolean(),
    error: z.string().optional(),
});
export const WorkerApiRunSnapshotsSinceResponseBody = z.object({
    snapshots: z.array(RunExecutionData),
});
//# sourceMappingURL=schemas.js.map