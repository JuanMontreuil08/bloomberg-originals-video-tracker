import { z } from "zod";
export declare const WorkloadHeartbeatRequestBody: z.ZodObject<{
    cpu: z.ZodOptional<z.ZodNumber>;
    memory: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    cpu?: number | undefined;
    memory?: number | undefined;
}, {
    cpu?: number | undefined;
    memory?: number | undefined;
}>;
export type WorkloadHeartbeatRequestBody = z.infer<typeof WorkloadHeartbeatRequestBody>;
export declare const WorkloadHeartbeatResponseBody: z.ZodObject<{
    ok: z.ZodLiteral<true>;
}, "strip", z.ZodTypeAny, {
    ok: true;
}, {
    ok: true;
}>;
export type WorkloadHeartbeatResponseBody = z.infer<typeof WorkloadHeartbeatResponseBody>;
export declare const WorkloadSuspendRunResponseBody: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
    ok: z.ZodLiteral<true>;
}, "strip", z.ZodTypeAny, {
    ok: true;
}, {
    ok: true;
}>, z.ZodObject<{
    ok: z.ZodLiteral<false>;
    error: z.ZodString;
}, "strip", z.ZodTypeAny, {
    error: string;
    ok: false;
}, {
    error: string;
    ok: false;
}>]>;
export type WorkloadSuspendRunResponseBody = z.infer<typeof WorkloadSuspendRunResponseBody>;
export declare const WorkloadContinueRunExecutionResponseBody: z.ZodObject<{
    snapshot: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        executionStatus: z.ZodEnum<[import("../../index.js").TaskRunExecutionStatus]>;
        description: z.ZodString;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: import("../../index.js").TaskRunExecutionStatus;
    }, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: import("../../index.js").TaskRunExecutionStatus;
    }>;
    run: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        status: z.ZodEnum<[import("../../index.js").TaskRunStatus]>;
        attemptNumber: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        status: import("../../index.js").TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    }, {
        status: import("../../index.js").TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    run: {
        status: import("../../index.js").TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: import("../../index.js").TaskRunExecutionStatus;
    };
}, {
    run: {
        status: import("../../index.js").TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: import("../../index.js").TaskRunExecutionStatus;
    };
}>;
export type WorkloadContinueRunExecutionResponseBody = z.infer<typeof WorkloadContinueRunExecutionResponseBody>;
export declare const WorkloadRunAttemptCompleteRequestBody: z.ZodObject<{
    completion: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
        ok: z.ZodLiteral<true>;
        id: z.ZodString;
        output: z.ZodOptional<z.ZodString>;
        outputType: z.ZodString;
        usage: z.ZodOptional<z.ZodObject<{
            durationMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            durationMs: number;
        }, {
            durationMs: number;
        }>>;
        taskIdentifier: z.ZodOptional<z.ZodString>;
        metadata: z.ZodOptional<z.ZodObject<{
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>>>;
            operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
            parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
            rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
        }, "strip", z.ZodTypeAny, {
            metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        }, {
            metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        }>>;
        flushedMetadata: z.ZodOptional<z.ZodObject<{
            data: z.ZodOptional<z.ZodString>;
            dataType: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dataType: string;
            data?: string | undefined;
        }, {
            dataType: string;
            data?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        ok: true;
        id: string;
        outputType: string;
        metadata?: {
            metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
        output?: string | undefined;
    }, {
        ok: true;
        id: string;
        outputType: string;
        metadata?: {
            metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
        output?: string | undefined;
    }>, z.ZodObject<{
        ok: z.ZodLiteral<false>;
        id: z.ZodString;
        error: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"BUILT_IN_ERROR">;
            name: z.ZodString;
            message: z.ZodString;
            stackTrace: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        }, {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"CUSTOM_ERROR">;
            raw: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "CUSTOM_ERROR";
            raw: string;
        }, {
            type: "CUSTOM_ERROR";
            raw: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"STRING_ERROR">;
            raw: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "STRING_ERROR";
            raw: string;
        }, {
            type: "STRING_ERROR";
            raw: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"INTERNAL_ERROR">;
            code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
            message: z.ZodOptional<z.ZodString>;
            stackTrace: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        }, {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        }>]>;
        retry: z.ZodOptional<z.ZodObject<{
            timestamp: z.ZodNumber;
            delay: z.ZodNumber;
            error: z.ZodOptional<z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            timestamp: number;
            delay: number;
            error?: unknown;
        }, {
            timestamp: number;
            delay: number;
            error?: unknown;
        }>>;
        skippedRetrying: z.ZodOptional<z.ZodBoolean>;
        usage: z.ZodOptional<z.ZodObject<{
            durationMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            durationMs: number;
        }, {
            durationMs: number;
        }>>;
        taskIdentifier: z.ZodOptional<z.ZodString>;
        metadata: z.ZodOptional<z.ZodObject<{
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>>>;
            operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
            parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
            rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"update">;
                value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                value: Record<string, unknown>;
                type: "update";
            }, {
                value: Record<string, unknown>;
                type: "update";
            }>, z.ZodObject<{
                type: z.ZodLiteral<"set">;
                key: z.ZodString;
                value: z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }, {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"delete">;
                key: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "delete";
                key: string;
            }, {
                type: "delete";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"append">;
                key: z.ZodString;
                value: z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }, {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"remove">;
                key: z.ZodString;
                value: z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>;
            }, "strip", z.ZodTypeAny, {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }, {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"increment">;
                key: z.ZodString;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "increment";
                key: string;
            }, {
                value: number;
                type: "increment";
                key: string;
            }>]>, "many">>;
        }, "strip", z.ZodTypeAny, {
            metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        }, {
            metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        }>>;
        flushedMetadata: z.ZodOptional<z.ZodObject<{
            data: z.ZodOptional<z.ZodString>;
            dataType: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dataType: string;
            data?: string | undefined;
        }, {
            dataType: string;
            data?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        ok: false;
        id: string;
        metadata?: {
            metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
    }, {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        ok: false;
        id: string;
        metadata?: {
            metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    completion: {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        ok: false;
        id: string;
        metadata?: {
            metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
    } | {
        ok: true;
        id: string;
        outputType: string;
        metadata?: {
            metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
        output?: string | undefined;
    };
}, {
    completion: {
        error: {
            message: string;
            type: "BUILT_IN_ERROR";
            name: string;
            stackTrace: string;
        } | {
            type: "CUSTOM_ERROR";
            raw: string;
        } | {
            type: "STRING_ERROR";
            raw: string;
        } | {
            code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
            type: "INTERNAL_ERROR";
            message?: string | undefined;
            stackTrace?: string | undefined;
        };
        ok: false;
        id: string;
        metadata?: {
            metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        retry?: {
            timestamp: number;
            delay: number;
            error?: unknown;
        } | undefined;
        skippedRetrying?: boolean | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
    } | {
        ok: true;
        id: string;
        outputType: string;
        metadata?: {
            metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
            operations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            parentOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
            rootOperations?: ({
                value: Record<string, unknown>;
                type: "update";
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "set";
                key: string;
            } | {
                type: "delete";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "append";
                key: string;
            } | {
                value: import("../../../index.js").DeserializedJson;
                type: "remove";
                key: string;
            } | {
                value: number;
                type: "increment";
                key: string;
            })[] | undefined;
        } | undefined;
        usage?: {
            durationMs: number;
        } | undefined;
        taskIdentifier?: string | undefined;
        flushedMetadata?: {
            dataType: string;
            data?: string | undefined;
        } | undefined;
        output?: string | undefined;
    };
}>;
export type WorkloadRunAttemptCompleteRequestBody = z.infer<typeof WorkloadRunAttemptCompleteRequestBody>;
export declare const WorkloadRunAttemptCompleteResponseBody: z.ZodObject<{
    result: z.ZodIntersection<z.ZodObject<{
        attemptStatus: z.ZodEnum<["RUN_FINISHED", "RUN_PENDING_CANCEL", "RETRY_QUEUED", "RETRY_IMMEDIATELY"]>;
    }, "strip", z.ZodTypeAny, {
        attemptStatus: "RUN_FINISHED" | "RUN_PENDING_CANCEL" | "RETRY_QUEUED" | "RETRY_IMMEDIATELY";
    }, {
        attemptStatus: "RUN_FINISHED" | "RUN_PENDING_CANCEL" | "RETRY_QUEUED" | "RETRY_IMMEDIATELY";
    }>, z.ZodObject<{
        snapshot: z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
            executionStatus: z.ZodEnum<[import("../../index.js").TaskRunExecutionStatus]>;
            description: z.ZodString;
            createdAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        }, {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        }>;
        run: z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
            status: z.ZodEnum<[import("../../index.js").TaskRunStatus]>;
            attemptNumber: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        }, {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        run: {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        };
    }, {
        run: {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        };
    }>>;
}, "strip", z.ZodTypeAny, {
    result: {
        attemptStatus: "RUN_FINISHED" | "RUN_PENDING_CANCEL" | "RETRY_QUEUED" | "RETRY_IMMEDIATELY";
    } & {
        run: {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        };
    };
}, {
    result: {
        attemptStatus: "RUN_FINISHED" | "RUN_PENDING_CANCEL" | "RETRY_QUEUED" | "RETRY_IMMEDIATELY";
    } & {
        run: {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        };
    };
}>;
export type WorkloadRunAttemptCompleteResponseBody = z.infer<typeof WorkloadRunAttemptCompleteResponseBody>;
export declare const WorkloadRunAttemptStartRequestBody: z.ZodObject<{
    isWarmStart: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    isWarmStart?: boolean | undefined;
}, {
    isWarmStart?: boolean | undefined;
}>;
export type WorkloadRunAttemptStartRequestBody = z.infer<typeof WorkloadRunAttemptStartRequestBody>;
export declare const WorkloadRunAttemptStartResponseBody: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
    snapshot: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        executionStatus: z.ZodEnum<[import("../../index.js").TaskRunExecutionStatus]>;
        description: z.ZodString;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: import("../../index.js").TaskRunExecutionStatus;
    }, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: import("../../index.js").TaskRunExecutionStatus;
    }>;
    run: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        status: z.ZodEnum<[import("../../index.js").TaskRunStatus]>;
        attemptNumber: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        status: import("../../index.js").TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    }, {
        status: import("../../index.js").TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    run: {
        status: import("../../index.js").TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: import("../../index.js").TaskRunExecutionStatus;
    };
}, {
    run: {
        status: import("../../index.js").TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: import("../../index.js").TaskRunExecutionStatus;
    };
}>, z.ZodObject<{
    execution: z.ZodObject<{
        task: z.ZodObject<{
            id: z.ZodString;
            filePath: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            id: z.ZodString;
            filePath: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            id: z.ZodString;
            filePath: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
        queue: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
        }, {
            name: string;
            id: string;
        }>;
        environment: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
            branchName: z.ZodOptional<z.ZodString>;
            git: z.ZodOptional<z.ZodObject<{
                provider: z.ZodOptional<z.ZodString>;
                source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                ghUsername: z.ZodOptional<z.ZodString>;
                ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                commitAuthorName: z.ZodOptional<z.ZodString>;
                commitMessage: z.ZodOptional<z.ZodString>;
                commitRef: z.ZodOptional<z.ZodString>;
                commitSha: z.ZodOptional<z.ZodString>;
                dirty: z.ZodOptional<z.ZodBoolean>;
                remoteUrl: z.ZodOptional<z.ZodString>;
                pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                pullRequestTitle: z.ZodOptional<z.ZodString>;
                pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
            }, "strip", z.ZodTypeAny, {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            }, {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        }, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        }>;
        organization: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
        }, {
            name: string;
            id: string;
            slug: string;
        }>;
        project: z.ZodObject<{
            id: z.ZodString;
            ref: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }>;
        machine: z.ZodObject<{
            name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
            cpu: z.ZodNumber;
            memory: z.ZodNumber;
            centsPerMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        }, {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        }>;
        batch: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>>;
        deployment: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            shortCode: z.ZodString;
            version: z.ZodString;
            runtime: z.ZodString;
            runtimeVersion: z.ZodString;
            git: z.ZodOptional<z.ZodObject<{
                provider: z.ZodOptional<z.ZodString>;
                source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                ghUsername: z.ZodOptional<z.ZodString>;
                ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                commitAuthorName: z.ZodOptional<z.ZodString>;
                commitMessage: z.ZodOptional<z.ZodString>;
                commitRef: z.ZodOptional<z.ZodString>;
                commitSha: z.ZodOptional<z.ZodString>;
                dirty: z.ZodOptional<z.ZodBoolean>;
                remoteUrl: z.ZodOptional<z.ZodString>;
                pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                pullRequestTitle: z.ZodOptional<z.ZodString>;
                pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
            }, "strip", z.ZodTypeAny, {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            }, {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            version: string;
            shortCode: string;
            runtime: string;
            runtimeVersion: string;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        }, {
            id: string;
            version: string;
            shortCode: string;
            runtime: string;
            runtimeVersion: string;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        }>>;
        attempt: z.ZodObject<{
            number: z.ZodNumber;
            startedAt: z.ZodDate;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            number: z.ZodNumber;
            startedAt: z.ZodDate;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            number: z.ZodNumber;
            startedAt: z.ZodDate;
        }, z.ZodTypeAny, "passthrough">>;
        run: z.ZodIntersection<z.ZodObject<{
            id: z.ZodString;
            payload: z.ZodString;
            payloadType: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
            isTest: z.ZodDefault<z.ZodBoolean>;
            createdAt: z.ZodDate;
            startedAt: z.ZodDefault<z.ZodDate>;
            idempotencyKey: z.ZodOptional<z.ZodString>;
            maxAttempts: z.ZodOptional<z.ZodNumber>;
            version: z.ZodOptional<z.ZodString>;
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../../index.js").DeserializedJson, z.ZodTypeDef, import("../../../index.js").DeserializedJson>>>;
            maxDuration: z.ZodOptional<z.ZodNumber>;
            priority: z.ZodOptional<z.ZodNumber>;
            baseCostInCents: z.ZodOptional<z.ZodNumber>;
            parentTaskRunId: z.ZodOptional<z.ZodString>;
            rootTaskRunId: z.ZodOptional<z.ZodString>;
            durationMs: z.ZodOptional<z.ZodNumber>;
            costInCents: z.ZodOptional<z.ZodNumber>;
            region: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            startedAt: Date;
            metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            baseCostInCents?: number | undefined;
            parentTaskRunId?: string | undefined;
            rootTaskRunId?: string | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            region?: string | undefined;
        }, {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            createdAt: Date;
            metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            baseCostInCents?: number | undefined;
            parentTaskRunId?: string | undefined;
            rootTaskRunId?: string | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            region?: string | undefined;
        }>, z.ZodObject<{
            traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
        }, "strip", z.ZodTypeAny, {
            traceContext?: Record<string, unknown> | undefined;
        }, {
            traceContext?: Record<string, unknown> | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        task: {
            id: string;
            filePath: string;
        } & {
            [k: string]: unknown;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        attempt: {
            number: number;
            startedAt: Date;
        } & {
            [k: string]: unknown;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            startedAt: Date;
            metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            baseCostInCents?: number | undefined;
            parentTaskRunId?: string | undefined;
            rootTaskRunId?: string | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            region?: string | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        batch?: {
            id: string;
        } | undefined;
        deployment?: {
            id: string;
            version: string;
            shortCode: string;
            runtime: string;
            runtimeVersion: string;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        } | undefined;
    }, {
        task: {
            id: string;
            filePath: string;
        } & {
            [k: string]: unknown;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        attempt: {
            number: number;
            startedAt: Date;
        } & {
            [k: string]: unknown;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            createdAt: Date;
            metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            baseCostInCents?: number | undefined;
            parentTaskRunId?: string | undefined;
            rootTaskRunId?: string | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            region?: string | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        batch?: {
            id: string;
        } | undefined;
        deployment?: {
            id: string;
            version: string;
            shortCode: string;
            runtime: string;
            runtimeVersion: string;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    execution: {
        task: {
            id: string;
            filePath: string;
        } & {
            [k: string]: unknown;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        attempt: {
            number: number;
            startedAt: Date;
        } & {
            [k: string]: unknown;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            startedAt: Date;
            metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            baseCostInCents?: number | undefined;
            parentTaskRunId?: string | undefined;
            rootTaskRunId?: string | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            region?: string | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        batch?: {
            id: string;
        } | undefined;
        deployment?: {
            id: string;
            version: string;
            shortCode: string;
            runtime: string;
            runtimeVersion: string;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        } | undefined;
    };
}, {
    execution: {
        task: {
            id: string;
            filePath: string;
        } & {
            [k: string]: unknown;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        attempt: {
            number: number;
            startedAt: Date;
        } & {
            [k: string]: unknown;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            createdAt: Date;
            metadata?: Record<string, import("../../../index.js").DeserializedJson> | undefined;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            baseCostInCents?: number | undefined;
            parentTaskRunId?: string | undefined;
            rootTaskRunId?: string | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            region?: string | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        batch?: {
            id: string;
        } | undefined;
        deployment?: {
            id: string;
            version: string;
            shortCode: string;
            runtime: string;
            runtimeVersion: string;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        } | undefined;
    };
}>>, z.ZodObject<{
    envVars: z.ZodRecord<z.ZodString, z.ZodString>;
}, "strip", z.ZodTypeAny, {
    envVars: Record<string, string>;
}, {
    envVars: Record<string, string>;
}>>;
export type WorkloadRunAttemptStartResponseBody = z.infer<typeof WorkloadRunAttemptStartResponseBody>;
export declare const WorkloadRunLatestSnapshotResponseBody: z.ZodObject<{
    execution: z.ZodObject<{
        version: z.ZodLiteral<"1">;
        snapshot: z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
            executionStatus: z.ZodEnum<[import("../../index.js").TaskRunExecutionStatus]>;
            description: z.ZodString;
            createdAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        }, {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        }>;
        run: z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
            status: z.ZodEnum<[import("../../index.js").TaskRunStatus]>;
            attemptNumber: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        }, {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        }>;
        batch: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            friendlyId: string;
        }, {
            id: string;
            friendlyId: string;
        }>>;
        checkpoint: z.ZodOptional<z.ZodObject<{
            type: z.ZodEnum<[import("../../index.js").CheckpointTypeEnum]>;
            location: z.ZodString;
            imageRef: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        } & {
            id: z.ZodString;
            friendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: import("../../index.js").CheckpointTypeEnum;
            id: string;
            friendlyId: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        }, {
            type: import("../../index.js").CheckpointTypeEnum;
            id: string;
            friendlyId: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        }>>;
        completedWaitpoints: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            index: z.ZodOptional<z.ZodNumber>;
            friendlyId: z.ZodString;
            type: z.ZodEnum<[import("../../index.js").WaitpointType]>;
            completedAt: z.ZodDate;
            idempotencyKey: z.ZodOptional<z.ZodString>;
            completedByTaskRun: z.ZodOptional<z.ZodObject<{
                id: z.ZodString;
                friendlyId: z.ZodString;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                    friendlyId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    friendlyId: string;
                }, {
                    id: string;
                    friendlyId: string;
                }>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            }, {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            }>>;
            completedAfter: z.ZodOptional<z.ZodDate>;
            completedByBatch: z.ZodOptional<z.ZodObject<{
                id: z.ZodString;
                friendlyId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                friendlyId: string;
            }, {
                id: string;
                friendlyId: string;
            }>>;
            output: z.ZodOptional<z.ZodString>;
            outputType: z.ZodOptional<z.ZodString>;
            outputIsError: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            type: import("../../index.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }, {
            type: import("../../index.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        version: "1";
        run: {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        };
        completedWaitpoints: {
            type: import("../../index.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }[];
        batch?: {
            id: string;
            friendlyId: string;
        } | undefined;
        checkpoint?: {
            type: import("../../index.js").CheckpointTypeEnum;
            id: string;
            friendlyId: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        } | undefined;
    }, {
        version: "1";
        run: {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        };
        completedWaitpoints: {
            type: import("../../index.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }[];
        batch?: {
            id: string;
            friendlyId: string;
        } | undefined;
        checkpoint?: {
            type: import("../../index.js").CheckpointTypeEnum;
            id: string;
            friendlyId: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    execution: {
        version: "1";
        run: {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        };
        completedWaitpoints: {
            type: import("../../index.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }[];
        batch?: {
            id: string;
            friendlyId: string;
        } | undefined;
        checkpoint?: {
            type: import("../../index.js").CheckpointTypeEnum;
            id: string;
            friendlyId: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        } | undefined;
    };
}, {
    execution: {
        version: "1";
        run: {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        };
        completedWaitpoints: {
            type: import("../../index.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }[];
        batch?: {
            id: string;
            friendlyId: string;
        } | undefined;
        checkpoint?: {
            type: import("../../index.js").CheckpointTypeEnum;
            id: string;
            friendlyId: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        } | undefined;
    };
}>;
export type WorkloadRunLatestSnapshotResponseBody = z.infer<typeof WorkloadRunLatestSnapshotResponseBody>;
export declare const WorkloadDebugLogRequestBody: z.ZodObject<{
    time: z.ZodDate;
    message: z.ZodString;
    properties: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean, z.ZodArray<z.ZodOptional<z.ZodNullable<z.ZodString>>, "many">, z.ZodArray<z.ZodOptional<z.ZodNullable<z.ZodNumber>>, "many">, z.ZodArray<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>, "many">]>>>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    time: Date;
    properties?: Record<string, string | number | boolean | (string | null | undefined)[] | (number | null | undefined)[] | (boolean | null | undefined)[] | undefined> | undefined;
}, {
    message: string;
    time: Date;
    properties?: Record<string, string | number | boolean | (string | null | undefined)[] | (number | null | undefined)[] | (boolean | null | undefined)[] | undefined> | undefined;
}>;
export type WorkloadDebugLogRequestBody = z.infer<typeof WorkloadDebugLogRequestBody>;
export declare const WorkloadDequeueFromVersionResponseBody: z.ZodArray<z.ZodObject<{
    version: z.ZodLiteral<"1">;
    snapshot: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        executionStatus: z.ZodEnum<[import("../../index.js").TaskRunExecutionStatus]>;
        description: z.ZodString;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: import("../../index.js").TaskRunExecutionStatus;
    }, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: import("../../index.js").TaskRunExecutionStatus;
    }>;
    dequeuedAt: z.ZodDate;
    image: z.ZodOptional<z.ZodString>;
    checkpoint: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        type: z.ZodEnum<[import("../../index.js").CheckpointTypeEnum]>;
        location: z.ZodString;
        imageRef: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: import("../../index.js").CheckpointTypeEnum;
        id: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    }, {
        type: import("../../index.js").CheckpointTypeEnum;
        id: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    }>>;
    completedWaitpoints: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        index: z.ZodOptional<z.ZodNumber>;
        friendlyId: z.ZodString;
        type: z.ZodEnum<[import("../../index.js").WaitpointType]>;
        completedAt: z.ZodDate;
        idempotencyKey: z.ZodOptional<z.ZodString>;
        completedByTaskRun: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
            batch: z.ZodOptional<z.ZodObject<{
                id: z.ZodString;
                friendlyId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                friendlyId: string;
            }, {
                id: string;
                friendlyId: string;
            }>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }, {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }>>;
        completedAfter: z.ZodOptional<z.ZodDate>;
        completedByBatch: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            friendlyId: string;
        }, {
            id: string;
            friendlyId: string;
        }>>;
        output: z.ZodOptional<z.ZodString>;
        outputType: z.ZodOptional<z.ZodString>;
        outputIsError: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        type: import("../../index.js").WaitpointType;
        id: string;
        friendlyId: string;
        completedAt: Date;
        outputIsError: boolean;
        idempotencyKey?: string | undefined;
        output?: string | undefined;
        outputType?: string | undefined;
        index?: number | undefined;
        completedByTaskRun?: {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        } | undefined;
        completedAfter?: Date | undefined;
        completedByBatch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    }, {
        type: import("../../index.js").WaitpointType;
        id: string;
        friendlyId: string;
        completedAt: Date;
        outputIsError: boolean;
        idempotencyKey?: string | undefined;
        output?: string | undefined;
        outputType?: string | undefined;
        index?: number | undefined;
        completedByTaskRun?: {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        } | undefined;
        completedAfter?: Date | undefined;
        completedByBatch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    }>, "many">;
    backgroundWorker: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        version: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        version: string;
        friendlyId: string;
    }, {
        id: string;
        version: string;
        friendlyId: string;
    }>;
    deployment: z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        friendlyId: z.ZodOptional<z.ZodString>;
        imagePlatform: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id?: string | undefined;
        friendlyId?: string | undefined;
        imagePlatform?: string | undefined;
    }, {
        id?: string | undefined;
        friendlyId?: string | undefined;
        imagePlatform?: string | undefined;
    }>;
    run: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        isTest: z.ZodBoolean;
        machine: z.ZodObject<{
            name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
            cpu: z.ZodNumber;
            memory: z.ZodNumber;
            centsPerMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        }, {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        }>;
        attemptNumber: z.ZodNumber;
        masterQueue: z.ZodString;
        traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        isTest: boolean;
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        traceContext: Record<string, unknown>;
        friendlyId: string;
        attemptNumber: number;
        masterQueue: string;
    }, {
        id: string;
        isTest: boolean;
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        traceContext: Record<string, unknown>;
        friendlyId: string;
        attemptNumber: number;
        masterQueue: string;
    }>;
    environment: z.ZodObject<{
        id: z.ZodString;
        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
    }, "strip", z.ZodTypeAny, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
    }, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
    }>;
    organization: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
    project: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
    placementTags: z.ZodOptional<z.ZodArray<z.ZodObject<{
        key: z.ZodString;
        values: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        key: string;
        values?: string[] | undefined;
    }, {
        key: string;
        values?: string[] | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    version: "1";
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
    };
    organization: {
        id: string;
    };
    project: {
        id: string;
    };
    deployment: {
        id?: string | undefined;
        friendlyId?: string | undefined;
        imagePlatform?: string | undefined;
    };
    run: {
        id: string;
        isTest: boolean;
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        traceContext: Record<string, unknown>;
        friendlyId: string;
        attemptNumber: number;
        masterQueue: string;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: import("../../index.js").TaskRunExecutionStatus;
    };
    completedWaitpoints: {
        type: import("../../index.js").WaitpointType;
        id: string;
        friendlyId: string;
        completedAt: Date;
        outputIsError: boolean;
        idempotencyKey?: string | undefined;
        output?: string | undefined;
        outputType?: string | undefined;
        index?: number | undefined;
        completedByTaskRun?: {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        } | undefined;
        completedAfter?: Date | undefined;
        completedByBatch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    }[];
    dequeuedAt: Date;
    backgroundWorker: {
        id: string;
        version: string;
        friendlyId: string;
    };
    checkpoint?: {
        type: import("../../index.js").CheckpointTypeEnum;
        id: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    } | undefined;
    image?: string | undefined;
    placementTags?: {
        key: string;
        values?: string[] | undefined;
    }[] | undefined;
}, {
    version: "1";
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
    };
    organization: {
        id: string;
    };
    project: {
        id: string;
    };
    deployment: {
        id?: string | undefined;
        friendlyId?: string | undefined;
        imagePlatform?: string | undefined;
    };
    run: {
        id: string;
        isTest: boolean;
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        traceContext: Record<string, unknown>;
        friendlyId: string;
        attemptNumber: number;
        masterQueue: string;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: import("../../index.js").TaskRunExecutionStatus;
    };
    completedWaitpoints: {
        type: import("../../index.js").WaitpointType;
        id: string;
        friendlyId: string;
        completedAt: Date;
        outputIsError: boolean;
        idempotencyKey?: string | undefined;
        output?: string | undefined;
        outputType?: string | undefined;
        index?: number | undefined;
        completedByTaskRun?: {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        } | undefined;
        completedAfter?: Date | undefined;
        completedByBatch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    }[];
    dequeuedAt: Date;
    backgroundWorker: {
        id: string;
        version: string;
        friendlyId: string;
    };
    checkpoint?: {
        type: import("../../index.js").CheckpointTypeEnum;
        id: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    } | undefined;
    image?: string | undefined;
    placementTags?: {
        key: string;
        values?: string[] | undefined;
    }[] | undefined;
}>, "many">;
export type WorkloadDequeueFromVersionResponseBody = z.infer<typeof WorkloadDequeueFromVersionResponseBody>;
export declare const WorkloadRunSnapshotsSinceResponseBody: z.ZodObject<{
    snapshots: z.ZodArray<z.ZodObject<{
        version: z.ZodLiteral<"1">;
        snapshot: z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
            executionStatus: z.ZodEnum<[import("../../index.js").TaskRunExecutionStatus]>;
            description: z.ZodString;
            createdAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        }, {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        }>;
        run: z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
            status: z.ZodEnum<[import("../../index.js").TaskRunStatus]>;
            attemptNumber: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        }, {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        }>;
        batch: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            friendlyId: string;
        }, {
            id: string;
            friendlyId: string;
        }>>;
        checkpoint: z.ZodOptional<z.ZodObject<{
            type: z.ZodEnum<[import("../../index.js").CheckpointTypeEnum]>;
            location: z.ZodString;
            imageRef: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        } & {
            id: z.ZodString;
            friendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: import("../../index.js").CheckpointTypeEnum;
            id: string;
            friendlyId: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        }, {
            type: import("../../index.js").CheckpointTypeEnum;
            id: string;
            friendlyId: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        }>>;
        completedWaitpoints: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            index: z.ZodOptional<z.ZodNumber>;
            friendlyId: z.ZodString;
            type: z.ZodEnum<[import("../../index.js").WaitpointType]>;
            completedAt: z.ZodDate;
            idempotencyKey: z.ZodOptional<z.ZodString>;
            completedByTaskRun: z.ZodOptional<z.ZodObject<{
                id: z.ZodString;
                friendlyId: z.ZodString;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                    friendlyId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    friendlyId: string;
                }, {
                    id: string;
                    friendlyId: string;
                }>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            }, {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            }>>;
            completedAfter: z.ZodOptional<z.ZodDate>;
            completedByBatch: z.ZodOptional<z.ZodObject<{
                id: z.ZodString;
                friendlyId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                friendlyId: string;
            }, {
                id: string;
                friendlyId: string;
            }>>;
            output: z.ZodOptional<z.ZodString>;
            outputType: z.ZodOptional<z.ZodString>;
            outputIsError: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            type: import("../../index.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }, {
            type: import("../../index.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        version: "1";
        run: {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        };
        completedWaitpoints: {
            type: import("../../index.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }[];
        batch?: {
            id: string;
            friendlyId: string;
        } | undefined;
        checkpoint?: {
            type: import("../../index.js").CheckpointTypeEnum;
            id: string;
            friendlyId: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        } | undefined;
    }, {
        version: "1";
        run: {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        };
        completedWaitpoints: {
            type: import("../../index.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }[];
        batch?: {
            id: string;
            friendlyId: string;
        } | undefined;
        checkpoint?: {
            type: import("../../index.js").CheckpointTypeEnum;
            id: string;
            friendlyId: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        } | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    snapshots: {
        version: "1";
        run: {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        };
        completedWaitpoints: {
            type: import("../../index.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }[];
        batch?: {
            id: string;
            friendlyId: string;
        } | undefined;
        checkpoint?: {
            type: import("../../index.js").CheckpointTypeEnum;
            id: string;
            friendlyId: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        } | undefined;
    }[];
}, {
    snapshots: {
        version: "1";
        run: {
            status: import("../../index.js").TaskRunStatus;
            id: string;
            friendlyId: string;
            attemptNumber?: number | null | undefined;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("../../index.js").TaskRunExecutionStatus;
        };
        completedWaitpoints: {
            type: import("../../index.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }[];
        batch?: {
            id: string;
            friendlyId: string;
        } | undefined;
        checkpoint?: {
            type: import("../../index.js").CheckpointTypeEnum;
            id: string;
            friendlyId: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        } | undefined;
    }[];
}>;
export type WorkloadRunSnapshotsSinceResponseBody = z.infer<typeof WorkloadRunSnapshotsSinceResponseBody>;
