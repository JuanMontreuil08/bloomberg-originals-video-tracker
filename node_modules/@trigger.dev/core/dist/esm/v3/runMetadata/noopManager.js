export class NoopRunMetadataManager {
    append(key, value) {
        throw new Error("Method not implemented.");
    }
    remove(key, value) {
        throw new Error("Method not implemented.");
    }
    increment(key, value) {
        throw new Error("Method not implemented.");
    }
    decrement(key, value) {
        throw new Error("Method not implemented.");
    }
    stream(key, value) {
        throw new Error("Method not implemented.");
    }
    fetchStream(key, signal) {
        throw new Error("Method not implemented.");
    }
    flush(requestOptions) {
        throw new Error("Method not implemented.");
    }
    refresh(requestOptions) {
        throw new Error("Method not implemented.");
    }
    enterWithMetadata(metadata) { }
    current() {
        throw new Error("Method not implemented.");
    }
    getKey(key) {
        throw new Error("Method not implemented.");
    }
    set(key, value) {
        throw new Error("Method not implemented.");
    }
    del(key) {
        throw new Error("Method not implemented.");
    }
    update(metadata) {
        throw new Error("Method not implemented.");
    }
    get parent() {
        // Store a reference to this object
        const self = this;
        // Create a local reference to ensure proper context
        const parentUpdater = {
            append: () => parentUpdater,
            set: () => parentUpdater,
            del: () => parentUpdater,
            increment: () => parentUpdater,
            decrement: () => parentUpdater,
            remove: () => parentUpdater,
            stream: () => Promise.resolve({
                [Symbol.asyncIterator]: () => ({
                    next: () => Promise.resolve({ done: true, value: undefined }),
                }),
            }),
            update: () => parentUpdater,
        };
        return parentUpdater;
    }
    get root() {
        // Store a reference to this object
        const self = this;
        // Create a local reference to ensure proper context
        const rootUpdater = {
            append: () => rootUpdater,
            set: () => rootUpdater,
            del: () => rootUpdater,
            increment: () => rootUpdater,
            decrement: () => rootUpdater,
            remove: () => rootUpdater,
            stream: () => Promise.resolve({
                [Symbol.asyncIterator]: () => ({
                    next: () => Promise.resolve({ done: true, value: undefined }),
                }),
            }),
            update: () => rootUpdater,
        };
        return rootUpdater;
    }
}
//# sourceMappingURL=noopManager.js.map