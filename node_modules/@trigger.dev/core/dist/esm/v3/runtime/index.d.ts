import { BatchTaskRunExecutionResult, TaskRunContext, TaskRunExecutionResult, WaitpointTokenResult } from "../schemas/index.js";
import { type RuntimeManager } from "./manager.js";
/**
 * All state must be inside the RuntimeManager, do NOT store it on this class.
 * This is because of the "dual package hazard", this can be bundled multiple times.
 */
export declare class RuntimeAPI {
    #private;
    private static _instance?;
    private constructor();
    static getInstance(): RuntimeAPI;
    waitUntil(waitpointFriendlyId: string, finishDate?: Date): Promise<WaitpointTokenResult>;
    waitForTask(params: {
        id: string;
        ctx: TaskRunContext;
    }): Promise<TaskRunExecutionResult>;
    waitForToken(waitpointFriendlyId: string): Promise<WaitpointTokenResult>;
    waitForBatch(params: {
        id: string;
        runCount: number;
        ctx: TaskRunContext;
    }): Promise<BatchTaskRunExecutionResult>;
    setGlobalRuntimeManager(runtimeManager: RuntimeManager): boolean;
    disable(): void;
}
