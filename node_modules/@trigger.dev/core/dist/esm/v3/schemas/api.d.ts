import { z } from "zod";
export declare const RunEngineVersion: z.ZodUnion<[z.ZodLiteral<"V1">, z.ZodLiteral<"V2">]>;
export declare const WhoAmIResponseSchema: z.ZodObject<{
    userId: z.ZodString;
    email: z.ZodString;
    dashboardUrl: z.ZodString;
    project: z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
        url: z.ZodString;
        orgTitle: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        name: string;
        orgTitle: string;
    }, {
        url: string;
        name: string;
        orgTitle: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    userId: string;
    email: string;
    dashboardUrl: string;
    project?: {
        url: string;
        name: string;
        orgTitle: string;
    } | undefined;
}, {
    userId: string;
    email: string;
    dashboardUrl: string;
    project?: {
        url: string;
        name: string;
        orgTitle: string;
    } | undefined;
}>;
export type WhoAmIResponse = z.infer<typeof WhoAmIResponseSchema>;
export declare const GetProjectResponseBody: z.ZodObject<{
    id: z.ZodString;
    externalRef: z.ZodString;
    name: z.ZodString;
    slug: z.ZodString;
    createdAt: z.ZodDate;
    organization: z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        slug: z.ZodString;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        slug: string;
        title: string;
    }, {
        id: string;
        createdAt: Date;
        slug: string;
        title: string;
    }>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    createdAt: Date;
    slug: string;
    organization: {
        id: string;
        createdAt: Date;
        slug: string;
        title: string;
    };
    externalRef: string;
}, {
    name: string;
    id: string;
    createdAt: Date;
    slug: string;
    organization: {
        id: string;
        createdAt: Date;
        slug: string;
        title: string;
    };
    externalRef: string;
}>;
export type GetProjectResponseBody = z.infer<typeof GetProjectResponseBody>;
export declare const GetProjectsResponseBody: z.ZodArray<z.ZodObject<{
    id: z.ZodString;
    externalRef: z.ZodString;
    name: z.ZodString;
    slug: z.ZodString;
    createdAt: z.ZodDate;
    organization: z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        slug: z.ZodString;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        slug: string;
        title: string;
    }, {
        id: string;
        createdAt: Date;
        slug: string;
        title: string;
    }>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    createdAt: Date;
    slug: string;
    organization: {
        id: string;
        createdAt: Date;
        slug: string;
        title: string;
    };
    externalRef: string;
}, {
    name: string;
    id: string;
    createdAt: Date;
    slug: string;
    organization: {
        id: string;
        createdAt: Date;
        slug: string;
        title: string;
    };
    externalRef: string;
}>, "many">;
export type GetProjectsResponseBody = z.infer<typeof GetProjectsResponseBody>;
export declare const GetProjectEnvResponse: z.ZodObject<{
    apiKey: z.ZodString;
    name: z.ZodString;
    apiUrl: z.ZodString;
    projectId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    apiKey: string;
    apiUrl: string;
    projectId: string;
}, {
    name: string;
    apiKey: string;
    apiUrl: string;
    projectId: string;
}>;
export type GetProjectEnvResponse = z.infer<typeof GetProjectEnvResponse>;
export declare const CreateBackgroundWorkerRequestBody: z.ZodObject<{
    localOnly: z.ZodBoolean;
    metadata: z.ZodObject<{
        packageVersion: z.ZodString;
        contentHash: z.ZodString;
        cliPackageVersion: z.ZodOptional<z.ZodString>;
        tasks: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            description: z.ZodOptional<z.ZodString>;
            filePath: z.ZodString;
            exportName: z.ZodOptional<z.ZodString>;
            queue: z.ZodOptional<z.ZodObject<{
                concurrencyLimit: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
            } & {
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                concurrencyLimit?: number | null | undefined;
            }, {
                name?: string | undefined;
                concurrencyLimit?: number | null | undefined;
            }>>;
            retry: z.ZodOptional<z.ZodObject<{
                maxAttempts: z.ZodOptional<z.ZodNumber>;
                factor: z.ZodOptional<z.ZodNumber>;
                minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
                randomize: z.ZodOptional<z.ZodBoolean>;
                outOfMemory: z.ZodOptional<z.ZodObject<{
                    machine: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
                }, "strip", z.ZodTypeAny, {
                    machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                }, {
                    machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                maxAttempts?: number | undefined;
                factor?: number | undefined;
                minTimeoutInMs?: number | undefined;
                maxTimeoutInMs?: number | undefined;
                randomize?: boolean | undefined;
                outOfMemory?: {
                    machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
            }, {
                maxAttempts?: number | undefined;
                factor?: number | undefined;
                minTimeoutInMs?: number | undefined;
                maxTimeoutInMs?: number | undefined;
                randomize?: boolean | undefined;
                outOfMemory?: {
                    machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
            }>>;
            machine: z.ZodOptional<z.ZodObject<{
                cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
                memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
                preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
            }, "strip", z.ZodTypeAny, {
                cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            }, {
                cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            }>>;
            triggerSource: z.ZodOptional<z.ZodString>;
            schedule: z.ZodOptional<z.ZodObject<{
                cron: z.ZodString;
                timezone: z.ZodString;
                environments: z.ZodOptional<z.ZodArray<z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>, "many">>;
            }, "strip", z.ZodTypeAny, {
                cron: string;
                timezone: string;
                environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
            }, {
                cron: string;
                timezone: string;
                environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
            }>>;
            maxDuration: z.ZodOptional<z.ZodNumber>;
            payloadSchema: z.ZodOptional<z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            filePath: string;
            maxDuration?: number | undefined;
            queue?: {
                name?: string | undefined;
                concurrencyLimit?: number | null | undefined;
            } | undefined;
            machine?: {
                cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            } | undefined;
            exportName?: string | undefined;
            retry?: {
                maxAttempts?: number | undefined;
                factor?: number | undefined;
                minTimeoutInMs?: number | undefined;
                maxTimeoutInMs?: number | undefined;
                randomize?: boolean | undefined;
                outOfMemory?: {
                    machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
            } | undefined;
            description?: string | undefined;
            triggerSource?: string | undefined;
            schedule?: {
                cron: string;
                timezone: string;
                environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
            } | undefined;
            payloadSchema?: unknown;
        }, {
            id: string;
            filePath: string;
            maxDuration?: number | undefined;
            queue?: {
                name?: string | undefined;
                concurrencyLimit?: number | null | undefined;
            } | undefined;
            machine?: {
                cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            } | undefined;
            exportName?: string | undefined;
            retry?: {
                maxAttempts?: number | undefined;
                factor?: number | undefined;
                minTimeoutInMs?: number | undefined;
                maxTimeoutInMs?: number | undefined;
                randomize?: boolean | undefined;
                outOfMemory?: {
                    machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
            } | undefined;
            description?: string | undefined;
            triggerSource?: string | undefined;
            schedule?: {
                cron: string;
                timezone: string;
                environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
            } | undefined;
            payloadSchema?: unknown;
        }>, "many">;
        queues: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            concurrencyLimit: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            concurrencyLimit?: number | null | undefined;
        }, {
            name: string;
            concurrencyLimit?: number | null | undefined;
        }>, "many">>;
        sourceFiles: z.ZodOptional<z.ZodArray<z.ZodObject<{
            filePath: z.ZodString;
            contents: z.ZodString;
            contentHash: z.ZodString;
            taskIds: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            filePath: string;
            contentHash: string;
            contents: string;
            taskIds: string[];
        }, {
            filePath: string;
            contentHash: string;
            contents: string;
            taskIds: string[];
        }>, "many">>;
        runtime: z.ZodOptional<z.ZodString>;
        runtimeVersion: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        contentHash: string;
        packageVersion: string;
        tasks: {
            id: string;
            filePath: string;
            maxDuration?: number | undefined;
            queue?: {
                name?: string | undefined;
                concurrencyLimit?: number | null | undefined;
            } | undefined;
            machine?: {
                cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            } | undefined;
            exportName?: string | undefined;
            retry?: {
                maxAttempts?: number | undefined;
                factor?: number | undefined;
                minTimeoutInMs?: number | undefined;
                maxTimeoutInMs?: number | undefined;
                randomize?: boolean | undefined;
                outOfMemory?: {
                    machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
            } | undefined;
            description?: string | undefined;
            triggerSource?: string | undefined;
            schedule?: {
                cron: string;
                timezone: string;
                environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
            } | undefined;
            payloadSchema?: unknown;
        }[];
        runtime?: string | undefined;
        runtimeVersion?: string | undefined;
        queues?: {
            name: string;
            concurrencyLimit?: number | null | undefined;
        }[] | undefined;
        cliPackageVersion?: string | undefined;
        sourceFiles?: {
            filePath: string;
            contentHash: string;
            contents: string;
            taskIds: string[];
        }[] | undefined;
    }, {
        contentHash: string;
        packageVersion: string;
        tasks: {
            id: string;
            filePath: string;
            maxDuration?: number | undefined;
            queue?: {
                name?: string | undefined;
                concurrencyLimit?: number | null | undefined;
            } | undefined;
            machine?: {
                cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            } | undefined;
            exportName?: string | undefined;
            retry?: {
                maxAttempts?: number | undefined;
                factor?: number | undefined;
                minTimeoutInMs?: number | undefined;
                maxTimeoutInMs?: number | undefined;
                randomize?: boolean | undefined;
                outOfMemory?: {
                    machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
            } | undefined;
            description?: string | undefined;
            triggerSource?: string | undefined;
            schedule?: {
                cron: string;
                timezone: string;
                environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
            } | undefined;
            payloadSchema?: unknown;
        }[];
        runtime?: string | undefined;
        runtimeVersion?: string | undefined;
        queues?: {
            name: string;
            concurrencyLimit?: number | null | undefined;
        }[] | undefined;
        cliPackageVersion?: string | undefined;
        sourceFiles?: {
            filePath: string;
            contentHash: string;
            contents: string;
            taskIds: string[];
        }[] | undefined;
    }>;
    engine: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"V1">, z.ZodLiteral<"V2">]>>;
    supportsLazyAttempts: z.ZodOptional<z.ZodBoolean>;
    buildPlatform: z.ZodOptional<z.ZodString>;
    targetPlatform: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    metadata: {
        contentHash: string;
        packageVersion: string;
        tasks: {
            id: string;
            filePath: string;
            maxDuration?: number | undefined;
            queue?: {
                name?: string | undefined;
                concurrencyLimit?: number | null | undefined;
            } | undefined;
            machine?: {
                cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            } | undefined;
            exportName?: string | undefined;
            retry?: {
                maxAttempts?: number | undefined;
                factor?: number | undefined;
                minTimeoutInMs?: number | undefined;
                maxTimeoutInMs?: number | undefined;
                randomize?: boolean | undefined;
                outOfMemory?: {
                    machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
            } | undefined;
            description?: string | undefined;
            triggerSource?: string | undefined;
            schedule?: {
                cron: string;
                timezone: string;
                environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
            } | undefined;
            payloadSchema?: unknown;
        }[];
        runtime?: string | undefined;
        runtimeVersion?: string | undefined;
        queues?: {
            name: string;
            concurrencyLimit?: number | null | undefined;
        }[] | undefined;
        cliPackageVersion?: string | undefined;
        sourceFiles?: {
            filePath: string;
            contentHash: string;
            contents: string;
            taskIds: string[];
        }[] | undefined;
    };
    localOnly: boolean;
    engine?: "V1" | "V2" | undefined;
    supportsLazyAttempts?: boolean | undefined;
    buildPlatform?: string | undefined;
    targetPlatform?: string | undefined;
}, {
    metadata: {
        contentHash: string;
        packageVersion: string;
        tasks: {
            id: string;
            filePath: string;
            maxDuration?: number | undefined;
            queue?: {
                name?: string | undefined;
                concurrencyLimit?: number | null | undefined;
            } | undefined;
            machine?: {
                cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
                memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
                preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            } | undefined;
            exportName?: string | undefined;
            retry?: {
                maxAttempts?: number | undefined;
                factor?: number | undefined;
                minTimeoutInMs?: number | undefined;
                maxTimeoutInMs?: number | undefined;
                randomize?: boolean | undefined;
                outOfMemory?: {
                    machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
                } | undefined;
            } | undefined;
            description?: string | undefined;
            triggerSource?: string | undefined;
            schedule?: {
                cron: string;
                timezone: string;
                environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
            } | undefined;
            payloadSchema?: unknown;
        }[];
        runtime?: string | undefined;
        runtimeVersion?: string | undefined;
        queues?: {
            name: string;
            concurrencyLimit?: number | null | undefined;
        }[] | undefined;
        cliPackageVersion?: string | undefined;
        sourceFiles?: {
            filePath: string;
            contentHash: string;
            contents: string;
            taskIds: string[];
        }[] | undefined;
    };
    localOnly: boolean;
    engine?: "V1" | "V2" | undefined;
    supportsLazyAttempts?: boolean | undefined;
    buildPlatform?: string | undefined;
    targetPlatform?: string | undefined;
}>;
export type CreateBackgroundWorkerRequestBody = z.infer<typeof CreateBackgroundWorkerRequestBody>;
export declare const CreateBackgroundWorkerResponse: z.ZodObject<{
    id: z.ZodString;
    version: z.ZodString;
    contentHash: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    version: string;
    contentHash: string;
}, {
    id: string;
    version: string;
    contentHash: string;
}>;
export type CreateBackgroundWorkerResponse = z.infer<typeof CreateBackgroundWorkerResponse>;
export declare const RunTags: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
export type RunTags = z.infer<typeof RunTags>;
export declare const TriggerTaskRequestBody: z.ZodObject<{
    payload: z.ZodAny;
    context: z.ZodAny;
    options: z.ZodOptional<z.ZodObject<{
        /** @deprecated engine v1 only */
        dependentAttempt: z.ZodOptional<z.ZodString>;
        /** @deprecated engine v1 only */
        parentAttempt: z.ZodOptional<z.ZodString>;
        /** @deprecated engine v1 only */
        dependentBatch: z.ZodOptional<z.ZodString>;
        /**
         * If triggered in a batch, this is the BatchTaskRun id
         */
        parentBatch: z.ZodOptional<z.ZodString>;
        /**
         * RunEngine v2
         * If triggered inside another run, the parentRunId is the friendly ID of the parent run.
         */
        parentRunId: z.ZodOptional<z.ZodString>;
        /**
         * RunEngine v2
         * Should be `true` if `triggerAndWait` or `batchTriggerAndWait`
         */
        resumeParentOnCompletion: z.ZodOptional<z.ZodBoolean>;
        /**
         * Locks the version to the passed value.
         * Automatically set when using `triggerAndWait` or `batchTriggerAndWait`
         */
        lockToVersion: z.ZodOptional<z.ZodString>;
        queue: z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            concurrencyLimit: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            concurrencyLimit?: number | undefined;
        }, {
            name: string;
            concurrencyLimit?: number | undefined;
        }>>;
        concurrencyKey: z.ZodOptional<z.ZodString>;
        delay: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodDate]>>;
        idempotencyKey: z.ZodOptional<z.ZodString>;
        idempotencyKeyTTL: z.ZodOptional<z.ZodString>;
        machine: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
        maxAttempts: z.ZodOptional<z.ZodNumber>;
        maxDuration: z.ZodOptional<z.ZodNumber>;
        metadata: z.ZodAny;
        metadataType: z.ZodOptional<z.ZodString>;
        payloadType: z.ZodOptional<z.ZodString>;
        tags: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        test: z.ZodOptional<z.ZodBoolean>;
        ttl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        priority: z.ZodOptional<z.ZodNumber>;
        bulkActionId: z.ZodOptional<z.ZodString>;
        region: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        metadata?: any;
        payloadType?: string | undefined;
        tags?: string | string[] | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        maxDuration?: number | undefined;
        priority?: number | undefined;
        region?: string | undefined;
        queue?: {
            name: string;
            concurrencyLimit?: number | undefined;
        } | undefined;
        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        delay?: string | Date | undefined;
        idempotencyKeyTTL?: string | undefined;
        concurrencyKey?: string | undefined;
        ttl?: string | number | undefined;
        dependentAttempt?: string | undefined;
        parentAttempt?: string | undefined;
        dependentBatch?: string | undefined;
        parentBatch?: string | undefined;
        parentRunId?: string | undefined;
        resumeParentOnCompletion?: boolean | undefined;
        lockToVersion?: string | undefined;
        metadataType?: string | undefined;
        test?: boolean | undefined;
        bulkActionId?: string | undefined;
    }, {
        metadata?: any;
        payloadType?: string | undefined;
        tags?: string | string[] | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        maxDuration?: number | undefined;
        priority?: number | undefined;
        region?: string | undefined;
        queue?: {
            name: string;
            concurrencyLimit?: number | undefined;
        } | undefined;
        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        delay?: string | Date | undefined;
        idempotencyKeyTTL?: string | undefined;
        concurrencyKey?: string | undefined;
        ttl?: string | number | undefined;
        dependentAttempt?: string | undefined;
        parentAttempt?: string | undefined;
        dependentBatch?: string | undefined;
        parentBatch?: string | undefined;
        parentRunId?: string | undefined;
        resumeParentOnCompletion?: boolean | undefined;
        lockToVersion?: string | undefined;
        metadataType?: string | undefined;
        test?: boolean | undefined;
        bulkActionId?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    options?: {
        metadata?: any;
        payloadType?: string | undefined;
        tags?: string | string[] | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        maxDuration?: number | undefined;
        priority?: number | undefined;
        region?: string | undefined;
        queue?: {
            name: string;
            concurrencyLimit?: number | undefined;
        } | undefined;
        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        delay?: string | Date | undefined;
        idempotencyKeyTTL?: string | undefined;
        concurrencyKey?: string | undefined;
        ttl?: string | number | undefined;
        dependentAttempt?: string | undefined;
        parentAttempt?: string | undefined;
        dependentBatch?: string | undefined;
        parentBatch?: string | undefined;
        parentRunId?: string | undefined;
        resumeParentOnCompletion?: boolean | undefined;
        lockToVersion?: string | undefined;
        metadataType?: string | undefined;
        test?: boolean | undefined;
        bulkActionId?: string | undefined;
    } | undefined;
    payload?: any;
    context?: any;
}, {
    options?: {
        metadata?: any;
        payloadType?: string | undefined;
        tags?: string | string[] | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        maxDuration?: number | undefined;
        priority?: number | undefined;
        region?: string | undefined;
        queue?: {
            name: string;
            concurrencyLimit?: number | undefined;
        } | undefined;
        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        delay?: string | Date | undefined;
        idempotencyKeyTTL?: string | undefined;
        concurrencyKey?: string | undefined;
        ttl?: string | number | undefined;
        dependentAttempt?: string | undefined;
        parentAttempt?: string | undefined;
        dependentBatch?: string | undefined;
        parentBatch?: string | undefined;
        parentRunId?: string | undefined;
        resumeParentOnCompletion?: boolean | undefined;
        lockToVersion?: string | undefined;
        metadataType?: string | undefined;
        test?: boolean | undefined;
        bulkActionId?: string | undefined;
    } | undefined;
    payload?: any;
    context?: any;
}>;
export type TriggerTaskRequestBody = z.infer<typeof TriggerTaskRequestBody>;
export declare const TriggerTaskResponse: z.ZodObject<{
    id: z.ZodString;
    isCached: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    id: string;
    isCached?: boolean | undefined;
}, {
    id: string;
    isCached?: boolean | undefined;
}>;
export type TriggerTaskResponse = z.infer<typeof TriggerTaskResponse>;
export declare const BatchTriggerTaskRequestBody: z.ZodObject<{
    items: z.ZodArray<z.ZodObject<{
        payload: z.ZodAny;
        context: z.ZodAny;
        options: z.ZodOptional<z.ZodObject<{
            /** @deprecated engine v1 only */
            dependentAttempt: z.ZodOptional<z.ZodString>;
            /** @deprecated engine v1 only */
            parentAttempt: z.ZodOptional<z.ZodString>;
            /** @deprecated engine v1 only */
            dependentBatch: z.ZodOptional<z.ZodString>;
            /**
             * If triggered in a batch, this is the BatchTaskRun id
             */
            parentBatch: z.ZodOptional<z.ZodString>;
            /**
             * RunEngine v2
             * If triggered inside another run, the parentRunId is the friendly ID of the parent run.
             */
            parentRunId: z.ZodOptional<z.ZodString>;
            /**
             * RunEngine v2
             * Should be `true` if `triggerAndWait` or `batchTriggerAndWait`
             */
            resumeParentOnCompletion: z.ZodOptional<z.ZodBoolean>;
            /**
             * Locks the version to the passed value.
             * Automatically set when using `triggerAndWait` or `batchTriggerAndWait`
             */
            lockToVersion: z.ZodOptional<z.ZodString>;
            queue: z.ZodOptional<z.ZodObject<{
                name: z.ZodString;
                concurrencyLimit: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                concurrencyLimit?: number | undefined;
            }, {
                name: string;
                concurrencyLimit?: number | undefined;
            }>>;
            concurrencyKey: z.ZodOptional<z.ZodString>;
            delay: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodDate]>>;
            idempotencyKey: z.ZodOptional<z.ZodString>;
            idempotencyKeyTTL: z.ZodOptional<z.ZodString>;
            machine: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
            maxAttempts: z.ZodOptional<z.ZodNumber>;
            maxDuration: z.ZodOptional<z.ZodNumber>;
            metadata: z.ZodAny;
            metadataType: z.ZodOptional<z.ZodString>;
            payloadType: z.ZodOptional<z.ZodString>;
            tags: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
            test: z.ZodOptional<z.ZodBoolean>;
            ttl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
            priority: z.ZodOptional<z.ZodNumber>;
            bulkActionId: z.ZodOptional<z.ZodString>;
            region: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            metadata?: any;
            payloadType?: string | undefined;
            tags?: string | string[] | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            region?: string | undefined;
            queue?: {
                name: string;
                concurrencyLimit?: number | undefined;
            } | undefined;
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            delay?: string | Date | undefined;
            idempotencyKeyTTL?: string | undefined;
            concurrencyKey?: string | undefined;
            ttl?: string | number | undefined;
            dependentAttempt?: string | undefined;
            parentAttempt?: string | undefined;
            dependentBatch?: string | undefined;
            parentBatch?: string | undefined;
            parentRunId?: string | undefined;
            resumeParentOnCompletion?: boolean | undefined;
            lockToVersion?: string | undefined;
            metadataType?: string | undefined;
            test?: boolean | undefined;
            bulkActionId?: string | undefined;
        }, {
            metadata?: any;
            payloadType?: string | undefined;
            tags?: string | string[] | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            region?: string | undefined;
            queue?: {
                name: string;
                concurrencyLimit?: number | undefined;
            } | undefined;
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            delay?: string | Date | undefined;
            idempotencyKeyTTL?: string | undefined;
            concurrencyKey?: string | undefined;
            ttl?: string | number | undefined;
            dependentAttempt?: string | undefined;
            parentAttempt?: string | undefined;
            dependentBatch?: string | undefined;
            parentBatch?: string | undefined;
            parentRunId?: string | undefined;
            resumeParentOnCompletion?: boolean | undefined;
            lockToVersion?: string | undefined;
            metadataType?: string | undefined;
            test?: boolean | undefined;
            bulkActionId?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        options?: {
            metadata?: any;
            payloadType?: string | undefined;
            tags?: string | string[] | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            region?: string | undefined;
            queue?: {
                name: string;
                concurrencyLimit?: number | undefined;
            } | undefined;
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            delay?: string | Date | undefined;
            idempotencyKeyTTL?: string | undefined;
            concurrencyKey?: string | undefined;
            ttl?: string | number | undefined;
            dependentAttempt?: string | undefined;
            parentAttempt?: string | undefined;
            dependentBatch?: string | undefined;
            parentBatch?: string | undefined;
            parentRunId?: string | undefined;
            resumeParentOnCompletion?: boolean | undefined;
            lockToVersion?: string | undefined;
            metadataType?: string | undefined;
            test?: boolean | undefined;
            bulkActionId?: string | undefined;
        } | undefined;
        payload?: any;
        context?: any;
    }, {
        options?: {
            metadata?: any;
            payloadType?: string | undefined;
            tags?: string | string[] | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            region?: string | undefined;
            queue?: {
                name: string;
                concurrencyLimit?: number | undefined;
            } | undefined;
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            delay?: string | Date | undefined;
            idempotencyKeyTTL?: string | undefined;
            concurrencyKey?: string | undefined;
            ttl?: string | number | undefined;
            dependentAttempt?: string | undefined;
            parentAttempt?: string | undefined;
            dependentBatch?: string | undefined;
            parentBatch?: string | undefined;
            parentRunId?: string | undefined;
            resumeParentOnCompletion?: boolean | undefined;
            lockToVersion?: string | undefined;
            metadataType?: string | undefined;
            test?: boolean | undefined;
            bulkActionId?: string | undefined;
        } | undefined;
        payload?: any;
        context?: any;
    }>, "many">;
    dependentAttempt: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    items: {
        options?: {
            metadata?: any;
            payloadType?: string | undefined;
            tags?: string | string[] | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            region?: string | undefined;
            queue?: {
                name: string;
                concurrencyLimit?: number | undefined;
            } | undefined;
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            delay?: string | Date | undefined;
            idempotencyKeyTTL?: string | undefined;
            concurrencyKey?: string | undefined;
            ttl?: string | number | undefined;
            dependentAttempt?: string | undefined;
            parentAttempt?: string | undefined;
            dependentBatch?: string | undefined;
            parentBatch?: string | undefined;
            parentRunId?: string | undefined;
            resumeParentOnCompletion?: boolean | undefined;
            lockToVersion?: string | undefined;
            metadataType?: string | undefined;
            test?: boolean | undefined;
            bulkActionId?: string | undefined;
        } | undefined;
        payload?: any;
        context?: any;
    }[];
    dependentAttempt?: string | undefined;
}, {
    items: {
        options?: {
            metadata?: any;
            payloadType?: string | undefined;
            tags?: string | string[] | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            region?: string | undefined;
            queue?: {
                name: string;
                concurrencyLimit?: number | undefined;
            } | undefined;
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            delay?: string | Date | undefined;
            idempotencyKeyTTL?: string | undefined;
            concurrencyKey?: string | undefined;
            ttl?: string | number | undefined;
            dependentAttempt?: string | undefined;
            parentAttempt?: string | undefined;
            dependentBatch?: string | undefined;
            parentBatch?: string | undefined;
            parentRunId?: string | undefined;
            resumeParentOnCompletion?: boolean | undefined;
            lockToVersion?: string | undefined;
            metadataType?: string | undefined;
            test?: boolean | undefined;
            bulkActionId?: string | undefined;
        } | undefined;
        payload?: any;
        context?: any;
    }[];
    dependentAttempt?: string | undefined;
}>;
export type BatchTriggerTaskRequestBody = z.infer<typeof BatchTriggerTaskRequestBody>;
export declare const BatchTriggerTaskItem: z.ZodObject<{
    task: z.ZodString;
    payload: z.ZodAny;
    context: z.ZodAny;
    options: z.ZodOptional<z.ZodObject<{
        concurrencyKey: z.ZodOptional<z.ZodString>;
        delay: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodDate]>>;
        idempotencyKey: z.ZodOptional<z.ZodString>;
        idempotencyKeyTTL: z.ZodOptional<z.ZodString>;
        lockToVersion: z.ZodOptional<z.ZodString>;
        machine: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
        maxAttempts: z.ZodOptional<z.ZodNumber>;
        maxDuration: z.ZodOptional<z.ZodNumber>;
        metadata: z.ZodAny;
        metadataType: z.ZodOptional<z.ZodString>;
        parentAttempt: z.ZodOptional<z.ZodString>;
        payloadType: z.ZodOptional<z.ZodString>;
        queue: z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>>;
        tags: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
        test: z.ZodOptional<z.ZodBoolean>;
        ttl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        priority: z.ZodOptional<z.ZodNumber>;
        region: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        metadata?: any;
        payloadType?: string | undefined;
        tags?: string | string[] | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        maxDuration?: number | undefined;
        priority?: number | undefined;
        region?: string | undefined;
        queue?: {
            name: string;
        } | undefined;
        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        delay?: string | Date | undefined;
        idempotencyKeyTTL?: string | undefined;
        concurrencyKey?: string | undefined;
        ttl?: string | number | undefined;
        parentAttempt?: string | undefined;
        lockToVersion?: string | undefined;
        metadataType?: string | undefined;
        test?: boolean | undefined;
    }, {
        metadata?: any;
        payloadType?: string | undefined;
        tags?: string | string[] | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        maxDuration?: number | undefined;
        priority?: number | undefined;
        region?: string | undefined;
        queue?: {
            name: string;
        } | undefined;
        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        delay?: string | Date | undefined;
        idempotencyKeyTTL?: string | undefined;
        concurrencyKey?: string | undefined;
        ttl?: string | number | undefined;
        parentAttempt?: string | undefined;
        lockToVersion?: string | undefined;
        metadataType?: string | undefined;
        test?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    task: string;
    options?: {
        metadata?: any;
        payloadType?: string | undefined;
        tags?: string | string[] | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        maxDuration?: number | undefined;
        priority?: number | undefined;
        region?: string | undefined;
        queue?: {
            name: string;
        } | undefined;
        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        delay?: string | Date | undefined;
        idempotencyKeyTTL?: string | undefined;
        concurrencyKey?: string | undefined;
        ttl?: string | number | undefined;
        parentAttempt?: string | undefined;
        lockToVersion?: string | undefined;
        metadataType?: string | undefined;
        test?: boolean | undefined;
    } | undefined;
    payload?: any;
    context?: any;
}, {
    task: string;
    options?: {
        metadata?: any;
        payloadType?: string | undefined;
        tags?: string | string[] | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        maxDuration?: number | undefined;
        priority?: number | undefined;
        region?: string | undefined;
        queue?: {
            name: string;
        } | undefined;
        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        delay?: string | Date | undefined;
        idempotencyKeyTTL?: string | undefined;
        concurrencyKey?: string | undefined;
        ttl?: string | number | undefined;
        parentAttempt?: string | undefined;
        lockToVersion?: string | undefined;
        metadataType?: string | undefined;
        test?: boolean | undefined;
    } | undefined;
    payload?: any;
    context?: any;
}>;
export type BatchTriggerTaskItem = z.infer<typeof BatchTriggerTaskItem>;
export declare const BatchTriggerTaskV2RequestBody: z.ZodObject<{
    items: z.ZodArray<z.ZodObject<{
        task: z.ZodString;
        payload: z.ZodAny;
        context: z.ZodAny;
        options: z.ZodOptional<z.ZodObject<{
            concurrencyKey: z.ZodOptional<z.ZodString>;
            delay: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodDate]>>;
            idempotencyKey: z.ZodOptional<z.ZodString>;
            idempotencyKeyTTL: z.ZodOptional<z.ZodString>;
            lockToVersion: z.ZodOptional<z.ZodString>;
            machine: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
            maxAttempts: z.ZodOptional<z.ZodNumber>;
            maxDuration: z.ZodOptional<z.ZodNumber>;
            metadata: z.ZodAny;
            metadataType: z.ZodOptional<z.ZodString>;
            parentAttempt: z.ZodOptional<z.ZodString>;
            payloadType: z.ZodOptional<z.ZodString>;
            queue: z.ZodOptional<z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>>;
            tags: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
            test: z.ZodOptional<z.ZodBoolean>;
            ttl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
            priority: z.ZodOptional<z.ZodNumber>;
            region: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            metadata?: any;
            payloadType?: string | undefined;
            tags?: string | string[] | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            region?: string | undefined;
            queue?: {
                name: string;
            } | undefined;
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            delay?: string | Date | undefined;
            idempotencyKeyTTL?: string | undefined;
            concurrencyKey?: string | undefined;
            ttl?: string | number | undefined;
            parentAttempt?: string | undefined;
            lockToVersion?: string | undefined;
            metadataType?: string | undefined;
            test?: boolean | undefined;
        }, {
            metadata?: any;
            payloadType?: string | undefined;
            tags?: string | string[] | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            region?: string | undefined;
            queue?: {
                name: string;
            } | undefined;
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            delay?: string | Date | undefined;
            idempotencyKeyTTL?: string | undefined;
            concurrencyKey?: string | undefined;
            ttl?: string | number | undefined;
            parentAttempt?: string | undefined;
            lockToVersion?: string | undefined;
            metadataType?: string | undefined;
            test?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        task: string;
        options?: {
            metadata?: any;
            payloadType?: string | undefined;
            tags?: string | string[] | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            region?: string | undefined;
            queue?: {
                name: string;
            } | undefined;
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            delay?: string | Date | undefined;
            idempotencyKeyTTL?: string | undefined;
            concurrencyKey?: string | undefined;
            ttl?: string | number | undefined;
            parentAttempt?: string | undefined;
            lockToVersion?: string | undefined;
            metadataType?: string | undefined;
            test?: boolean | undefined;
        } | undefined;
        payload?: any;
        context?: any;
    }, {
        task: string;
        options?: {
            metadata?: any;
            payloadType?: string | undefined;
            tags?: string | string[] | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            region?: string | undefined;
            queue?: {
                name: string;
            } | undefined;
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            delay?: string | Date | undefined;
            idempotencyKeyTTL?: string | undefined;
            concurrencyKey?: string | undefined;
            ttl?: string | number | undefined;
            parentAttempt?: string | undefined;
            lockToVersion?: string | undefined;
            metadataType?: string | undefined;
            test?: boolean | undefined;
        } | undefined;
        payload?: any;
        context?: any;
    }>, "many">;
    /** @deprecated engine v1 only */
    dependentAttempt: z.ZodOptional<z.ZodString>;
    /**
     * RunEngine v2
     * If triggered inside another run, the parentRunId is the friendly ID of the parent run.
     */
    parentRunId: z.ZodOptional<z.ZodString>;
    /**
     * RunEngine v2
     * Should be `true` if `triggerAndWait` or `batchTriggerAndWait`
     */
    resumeParentOnCompletion: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    items: {
        task: string;
        options?: {
            metadata?: any;
            payloadType?: string | undefined;
            tags?: string | string[] | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            region?: string | undefined;
            queue?: {
                name: string;
            } | undefined;
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            delay?: string | Date | undefined;
            idempotencyKeyTTL?: string | undefined;
            concurrencyKey?: string | undefined;
            ttl?: string | number | undefined;
            parentAttempt?: string | undefined;
            lockToVersion?: string | undefined;
            metadataType?: string | undefined;
            test?: boolean | undefined;
        } | undefined;
        payload?: any;
        context?: any;
    }[];
    dependentAttempt?: string | undefined;
    parentRunId?: string | undefined;
    resumeParentOnCompletion?: boolean | undefined;
}, {
    items: {
        task: string;
        options?: {
            metadata?: any;
            payloadType?: string | undefined;
            tags?: string | string[] | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            region?: string | undefined;
            queue?: {
                name: string;
            } | undefined;
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            delay?: string | Date | undefined;
            idempotencyKeyTTL?: string | undefined;
            concurrencyKey?: string | undefined;
            ttl?: string | number | undefined;
            parentAttempt?: string | undefined;
            lockToVersion?: string | undefined;
            metadataType?: string | undefined;
            test?: boolean | undefined;
        } | undefined;
        payload?: any;
        context?: any;
    }[];
    dependentAttempt?: string | undefined;
    parentRunId?: string | undefined;
    resumeParentOnCompletion?: boolean | undefined;
}>;
export type BatchTriggerTaskV2RequestBody = z.infer<typeof BatchTriggerTaskV2RequestBody>;
export declare const BatchTriggerTaskV2Response: z.ZodObject<{
    id: z.ZodString;
    isCached: z.ZodBoolean;
    idempotencyKey: z.ZodOptional<z.ZodString>;
    runs: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        taskIdentifier: z.ZodString;
        isCached: z.ZodBoolean;
        idempotencyKey: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        taskIdentifier: string;
        isCached: boolean;
        idempotencyKey?: string | undefined;
    }, {
        id: string;
        taskIdentifier: string;
        isCached: boolean;
        idempotencyKey?: string | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    id: string;
    isCached: boolean;
    runs: {
        id: string;
        taskIdentifier: string;
        isCached: boolean;
        idempotencyKey?: string | undefined;
    }[];
    idempotencyKey?: string | undefined;
}, {
    id: string;
    isCached: boolean;
    runs: {
        id: string;
        taskIdentifier: string;
        isCached: boolean;
        idempotencyKey?: string | undefined;
    }[];
    idempotencyKey?: string | undefined;
}>;
export type BatchTriggerTaskV2Response = z.infer<typeof BatchTriggerTaskV2Response>;
export declare const BatchTriggerTaskV3RequestBody: z.ZodObject<{
    items: z.ZodArray<z.ZodObject<{
        task: z.ZodString;
        payload: z.ZodAny;
        context: z.ZodAny;
        options: z.ZodOptional<z.ZodObject<{
            concurrencyKey: z.ZodOptional<z.ZodString>;
            delay: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodDate]>>;
            idempotencyKey: z.ZodOptional<z.ZodString>;
            idempotencyKeyTTL: z.ZodOptional<z.ZodString>;
            lockToVersion: z.ZodOptional<z.ZodString>;
            machine: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
            maxAttempts: z.ZodOptional<z.ZodNumber>;
            maxDuration: z.ZodOptional<z.ZodNumber>;
            metadata: z.ZodAny;
            metadataType: z.ZodOptional<z.ZodString>;
            parentAttempt: z.ZodOptional<z.ZodString>;
            payloadType: z.ZodOptional<z.ZodString>;
            queue: z.ZodOptional<z.ZodObject<{
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
            }, {
                name: string;
            }>>;
            tags: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
            test: z.ZodOptional<z.ZodBoolean>;
            ttl: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
            priority: z.ZodOptional<z.ZodNumber>;
            region: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            metadata?: any;
            payloadType?: string | undefined;
            tags?: string | string[] | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            region?: string | undefined;
            queue?: {
                name: string;
            } | undefined;
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            delay?: string | Date | undefined;
            idempotencyKeyTTL?: string | undefined;
            concurrencyKey?: string | undefined;
            ttl?: string | number | undefined;
            parentAttempt?: string | undefined;
            lockToVersion?: string | undefined;
            metadataType?: string | undefined;
            test?: boolean | undefined;
        }, {
            metadata?: any;
            payloadType?: string | undefined;
            tags?: string | string[] | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            region?: string | undefined;
            queue?: {
                name: string;
            } | undefined;
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            delay?: string | Date | undefined;
            idempotencyKeyTTL?: string | undefined;
            concurrencyKey?: string | undefined;
            ttl?: string | number | undefined;
            parentAttempt?: string | undefined;
            lockToVersion?: string | undefined;
            metadataType?: string | undefined;
            test?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        task: string;
        options?: {
            metadata?: any;
            payloadType?: string | undefined;
            tags?: string | string[] | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            region?: string | undefined;
            queue?: {
                name: string;
            } | undefined;
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            delay?: string | Date | undefined;
            idempotencyKeyTTL?: string | undefined;
            concurrencyKey?: string | undefined;
            ttl?: string | number | undefined;
            parentAttempt?: string | undefined;
            lockToVersion?: string | undefined;
            metadataType?: string | undefined;
            test?: boolean | undefined;
        } | undefined;
        payload?: any;
        context?: any;
    }, {
        task: string;
        options?: {
            metadata?: any;
            payloadType?: string | undefined;
            tags?: string | string[] | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            region?: string | undefined;
            queue?: {
                name: string;
            } | undefined;
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            delay?: string | Date | undefined;
            idempotencyKeyTTL?: string | undefined;
            concurrencyKey?: string | undefined;
            ttl?: string | number | undefined;
            parentAttempt?: string | undefined;
            lockToVersion?: string | undefined;
            metadataType?: string | undefined;
            test?: boolean | undefined;
        } | undefined;
        payload?: any;
        context?: any;
    }>, "many">;
    /**
     * RunEngine v2
     * If triggered inside another run, the parentRunId is the friendly ID of the parent run.
     */
    parentRunId: z.ZodOptional<z.ZodString>;
    /**
     * RunEngine v2
     * Should be `true` if `triggerAndWait` or `batchTriggerAndWait`
     */
    resumeParentOnCompletion: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    items: {
        task: string;
        options?: {
            metadata?: any;
            payloadType?: string | undefined;
            tags?: string | string[] | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            region?: string | undefined;
            queue?: {
                name: string;
            } | undefined;
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            delay?: string | Date | undefined;
            idempotencyKeyTTL?: string | undefined;
            concurrencyKey?: string | undefined;
            ttl?: string | number | undefined;
            parentAttempt?: string | undefined;
            lockToVersion?: string | undefined;
            metadataType?: string | undefined;
            test?: boolean | undefined;
        } | undefined;
        payload?: any;
        context?: any;
    }[];
    parentRunId?: string | undefined;
    resumeParentOnCompletion?: boolean | undefined;
}, {
    items: {
        task: string;
        options?: {
            metadata?: any;
            payloadType?: string | undefined;
            tags?: string | string[] | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            region?: string | undefined;
            queue?: {
                name: string;
            } | undefined;
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            delay?: string | Date | undefined;
            idempotencyKeyTTL?: string | undefined;
            concurrencyKey?: string | undefined;
            ttl?: string | number | undefined;
            parentAttempt?: string | undefined;
            lockToVersion?: string | undefined;
            metadataType?: string | undefined;
            test?: boolean | undefined;
        } | undefined;
        payload?: any;
        context?: any;
    }[];
    parentRunId?: string | undefined;
    resumeParentOnCompletion?: boolean | undefined;
}>;
export type BatchTriggerTaskV3RequestBody = z.infer<typeof BatchTriggerTaskV3RequestBody>;
export declare const BatchTriggerTaskV3Response: z.ZodObject<{
    id: z.ZodString;
    runCount: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    id: string;
    runCount: number;
}, {
    id: string;
    runCount: number;
}>;
export type BatchTriggerTaskV3Response = z.infer<typeof BatchTriggerTaskV3Response>;
export declare const BatchTriggerTaskResponse: z.ZodObject<{
    batchId: z.ZodString;
    runs: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    batchId: string;
    runs: string[];
}, {
    batchId: string;
    runs: string[];
}>;
export type BatchTriggerTaskResponse = z.infer<typeof BatchTriggerTaskResponse>;
export declare const GetBatchResponseBody: z.ZodObject<{
    id: z.ZodString;
    items: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        taskRunId: z.ZodString;
        status: z.ZodEnum<["PENDING", "CANCELED", "COMPLETED", "FAILED"]>;
    }, "strip", z.ZodTypeAny, {
        status: "COMPLETED" | "CANCELED" | "FAILED" | "PENDING";
        id: string;
        taskRunId: string;
    }, {
        status: "COMPLETED" | "CANCELED" | "FAILED" | "PENDING";
        id: string;
        taskRunId: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    id: string;
    items: {
        status: "COMPLETED" | "CANCELED" | "FAILED" | "PENDING";
        id: string;
        taskRunId: string;
    }[];
}, {
    id: string;
    items: {
        status: "COMPLETED" | "CANCELED" | "FAILED" | "PENDING";
        id: string;
        taskRunId: string;
    }[];
}>;
export type GetBatchResponseBody = z.infer<typeof GetBatchResponseBody>;
export declare const AddTagsRequestBody: z.ZodObject<{
    tags: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
}, "strip", z.ZodTypeAny, {
    tags: string | string[];
}, {
    tags: string | string[];
}>;
export type AddTagsRequestBody = z.infer<typeof AddTagsRequestBody>;
export declare const RescheduleRunRequestBody: z.ZodObject<{
    delay: z.ZodUnion<[z.ZodString, z.ZodDate]>;
}, "strip", z.ZodTypeAny, {
    delay: string | Date;
}, {
    delay: string | Date;
}>;
export type RescheduleRunRequestBody = z.infer<typeof RescheduleRunRequestBody>;
export declare const GetEnvironmentVariablesResponseBody: z.ZodObject<{
    variables: z.ZodRecord<z.ZodString, z.ZodString>;
}, "strip", z.ZodTypeAny, {
    variables: Record<string, string>;
}, {
    variables: Record<string, string>;
}>;
export type GetEnvironmentVariablesResponseBody = z.infer<typeof GetEnvironmentVariablesResponseBody>;
export declare const StartDeploymentIndexingRequestBody: z.ZodObject<{
    imageReference: z.ZodString;
    selfHosted: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    imageReference: string;
    selfHosted?: boolean | undefined;
}, {
    imageReference: string;
    selfHosted?: boolean | undefined;
}>;
export type StartDeploymentIndexingRequestBody = z.infer<typeof StartDeploymentIndexingRequestBody>;
export declare const StartDeploymentIndexingResponseBody: z.ZodObject<{
    id: z.ZodString;
    contentHash: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    contentHash: string;
}, {
    id: string;
    contentHash: string;
}>;
export type StartDeploymentIndexingResponseBody = z.infer<typeof StartDeploymentIndexingResponseBody>;
export declare const FinalizeDeploymentRequestBody: z.ZodObject<{
    skipPromotion: z.ZodOptional<z.ZodBoolean>;
    imageDigest: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    skipPromotion?: boolean | undefined;
    imageDigest?: string | undefined;
}, {
    skipPromotion?: boolean | undefined;
    imageDigest?: string | undefined;
}>;
export type FinalizeDeploymentRequestBody = z.infer<typeof FinalizeDeploymentRequestBody>;
export declare const ExternalBuildData: z.ZodObject<{
    buildId: z.ZodString;
    buildToken: z.ZodString;
    projectId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    projectId: string;
    buildId: string;
    buildToken: string;
}, {
    projectId: string;
    buildId: string;
    buildToken: string;
}>;
export type ExternalBuildData = z.infer<typeof ExternalBuildData>;
export declare const UpsertBranchRequestBody: z.ZodObject<{
    git: z.ZodOptional<z.ZodObject<{
        provider: z.ZodOptional<z.ZodString>;
        source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
        ghUsername: z.ZodOptional<z.ZodString>;
        ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
        commitAuthorName: z.ZodOptional<z.ZodString>;
        commitMessage: z.ZodOptional<z.ZodString>;
        commitRef: z.ZodOptional<z.ZodString>;
        commitSha: z.ZodOptional<z.ZodString>;
        dirty: z.ZodOptional<z.ZodBoolean>;
        remoteUrl: z.ZodOptional<z.ZodString>;
        pullRequestNumber: z.ZodOptional<z.ZodNumber>;
        pullRequestTitle: z.ZodOptional<z.ZodString>;
        pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
    }, "strip", z.ZodTypeAny, {
        dirty?: boolean | undefined;
        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
        provider?: string | undefined;
        ghUsername?: string | undefined;
        ghUserAvatarUrl?: string | undefined;
        commitAuthorName?: string | undefined;
        commitMessage?: string | undefined;
        commitRef?: string | undefined;
        commitSha?: string | undefined;
        remoteUrl?: string | undefined;
        pullRequestNumber?: number | undefined;
        pullRequestTitle?: string | undefined;
        pullRequestState?: "open" | "closed" | "merged" | undefined;
    }, {
        dirty?: boolean | undefined;
        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
        provider?: string | undefined;
        ghUsername?: string | undefined;
        ghUserAvatarUrl?: string | undefined;
        commitAuthorName?: string | undefined;
        commitMessage?: string | undefined;
        commitRef?: string | undefined;
        commitSha?: string | undefined;
        remoteUrl?: string | undefined;
        pullRequestNumber?: number | undefined;
        pullRequestTitle?: string | undefined;
        pullRequestState?: "open" | "closed" | "merged" | undefined;
    }>>;
    env: z.ZodEnum<["preview"]>;
    branch: z.ZodString;
}, "strip", z.ZodTypeAny, {
    env: "preview";
    branch: string;
    git?: {
        dirty?: boolean | undefined;
        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
        provider?: string | undefined;
        ghUsername?: string | undefined;
        ghUserAvatarUrl?: string | undefined;
        commitAuthorName?: string | undefined;
        commitMessage?: string | undefined;
        commitRef?: string | undefined;
        commitSha?: string | undefined;
        remoteUrl?: string | undefined;
        pullRequestNumber?: number | undefined;
        pullRequestTitle?: string | undefined;
        pullRequestState?: "open" | "closed" | "merged" | undefined;
    } | undefined;
}, {
    env: "preview";
    branch: string;
    git?: {
        dirty?: boolean | undefined;
        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
        provider?: string | undefined;
        ghUsername?: string | undefined;
        ghUserAvatarUrl?: string | undefined;
        commitAuthorName?: string | undefined;
        commitMessage?: string | undefined;
        commitRef?: string | undefined;
        commitSha?: string | undefined;
        remoteUrl?: string | undefined;
        pullRequestNumber?: number | undefined;
        pullRequestTitle?: string | undefined;
        pullRequestState?: "open" | "closed" | "merged" | undefined;
    } | undefined;
}>;
export type UpsertBranchRequestBody = z.infer<typeof UpsertBranchRequestBody>;
export declare const UpsertBranchResponseBody: z.ZodObject<{
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
export type UpsertBranchResponseBody = z.infer<typeof UpsertBranchResponseBody>;
export declare const InitializeDeploymentResponseBody: z.ZodObject<{
    id: z.ZodString;
    contentHash: z.ZodString;
    shortCode: z.ZodString;
    version: z.ZodString;
    imageTag: z.ZodString;
    imagePlatform: z.ZodString;
    externalBuildData: z.ZodNullable<z.ZodOptional<z.ZodObject<{
        buildId: z.ZodString;
        buildToken: z.ZodString;
        projectId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        projectId: string;
        buildId: string;
        buildToken: string;
    }, {
        projectId: string;
        buildId: string;
        buildToken: string;
    }>>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    version: string;
    shortCode: string;
    contentHash: string;
    imageTag: string;
    imagePlatform: string;
    externalBuildData?: {
        projectId: string;
        buildId: string;
        buildToken: string;
    } | null | undefined;
}, {
    id: string;
    version: string;
    shortCode: string;
    contentHash: string;
    imageTag: string;
    imagePlatform: string;
    externalBuildData?: {
        projectId: string;
        buildId: string;
        buildToken: string;
    } | null | undefined;
}>;
export type InitializeDeploymentResponseBody = z.infer<typeof InitializeDeploymentResponseBody>;
export declare const InitializeDeploymentRequestBody: z.ZodObject<{
    contentHash: z.ZodString;
    userId: z.ZodOptional<z.ZodString>;
    /** @deprecated This is now determined by the webapp. This is only used to warn users with old CLI versions. */
    selfHosted: z.ZodOptional<z.ZodBoolean>;
    gitMeta: z.ZodOptional<z.ZodObject<{
        provider: z.ZodOptional<z.ZodString>;
        source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
        ghUsername: z.ZodOptional<z.ZodString>;
        ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
        commitAuthorName: z.ZodOptional<z.ZodString>;
        commitMessage: z.ZodOptional<z.ZodString>;
        commitRef: z.ZodOptional<z.ZodString>;
        commitSha: z.ZodOptional<z.ZodString>;
        dirty: z.ZodOptional<z.ZodBoolean>;
        remoteUrl: z.ZodOptional<z.ZodString>;
        pullRequestNumber: z.ZodOptional<z.ZodNumber>;
        pullRequestTitle: z.ZodOptional<z.ZodString>;
        pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
    }, "strip", z.ZodTypeAny, {
        dirty?: boolean | undefined;
        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
        provider?: string | undefined;
        ghUsername?: string | undefined;
        ghUserAvatarUrl?: string | undefined;
        commitAuthorName?: string | undefined;
        commitMessage?: string | undefined;
        commitRef?: string | undefined;
        commitSha?: string | undefined;
        remoteUrl?: string | undefined;
        pullRequestNumber?: number | undefined;
        pullRequestTitle?: string | undefined;
        pullRequestState?: "open" | "closed" | "merged" | undefined;
    }, {
        dirty?: boolean | undefined;
        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
        provider?: string | undefined;
        ghUsername?: string | undefined;
        ghUserAvatarUrl?: string | undefined;
        commitAuthorName?: string | undefined;
        commitMessage?: string | undefined;
        commitRef?: string | undefined;
        commitSha?: string | undefined;
        remoteUrl?: string | undefined;
        pullRequestNumber?: number | undefined;
        pullRequestTitle?: string | undefined;
        pullRequestState?: "open" | "closed" | "merged" | undefined;
    }>>;
    type: z.ZodOptional<z.ZodEnum<["MANAGED", "UNMANAGED", "V1"]>>;
    runtime: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    contentHash: string;
    type?: "V1" | "MANAGED" | "UNMANAGED" | undefined;
    runtime?: string | undefined;
    userId?: string | undefined;
    selfHosted?: boolean | undefined;
    gitMeta?: {
        dirty?: boolean | undefined;
        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
        provider?: string | undefined;
        ghUsername?: string | undefined;
        ghUserAvatarUrl?: string | undefined;
        commitAuthorName?: string | undefined;
        commitMessage?: string | undefined;
        commitRef?: string | undefined;
        commitSha?: string | undefined;
        remoteUrl?: string | undefined;
        pullRequestNumber?: number | undefined;
        pullRequestTitle?: string | undefined;
        pullRequestState?: "open" | "closed" | "merged" | undefined;
    } | undefined;
}, {
    contentHash: string;
    type?: "V1" | "MANAGED" | "UNMANAGED" | undefined;
    runtime?: string | undefined;
    userId?: string | undefined;
    selfHosted?: boolean | undefined;
    gitMeta?: {
        dirty?: boolean | undefined;
        source?: "trigger_github_app" | "github_actions" | "local" | undefined;
        provider?: string | undefined;
        ghUsername?: string | undefined;
        ghUserAvatarUrl?: string | undefined;
        commitAuthorName?: string | undefined;
        commitMessage?: string | undefined;
        commitRef?: string | undefined;
        commitSha?: string | undefined;
        remoteUrl?: string | undefined;
        pullRequestNumber?: number | undefined;
        pullRequestTitle?: string | undefined;
        pullRequestState?: "open" | "closed" | "merged" | undefined;
    } | undefined;
}>;
export type InitializeDeploymentRequestBody = z.infer<typeof InitializeDeploymentRequestBody>;
export declare const DeploymentErrorData: z.ZodObject<{
    name: z.ZodString;
    message: z.ZodString;
    stack: z.ZodOptional<z.ZodString>;
    stderr: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    name: string;
    stack?: string | undefined;
    stderr?: string | undefined;
}, {
    message: string;
    name: string;
    stack?: string | undefined;
    stderr?: string | undefined;
}>;
export type DeploymentErrorData = z.infer<typeof DeploymentErrorData>;
export declare const FailDeploymentRequestBody: z.ZodObject<{
    error: z.ZodObject<{
        name: z.ZodString;
        message: z.ZodString;
        stack: z.ZodOptional<z.ZodString>;
        stderr: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    }, {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    error: {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    };
}, {
    error: {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    };
}>;
export type FailDeploymentRequestBody = z.infer<typeof FailDeploymentRequestBody>;
export declare const FailDeploymentResponseBody: z.ZodObject<{
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
export type FailDeploymentResponseBody = z.infer<typeof FailDeploymentResponseBody>;
export declare const PromoteDeploymentResponseBody: z.ZodObject<{
    id: z.ZodString;
    version: z.ZodString;
    shortCode: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    version: string;
    shortCode: string;
}, {
    id: string;
    version: string;
    shortCode: string;
}>;
export type PromoteDeploymentResponseBody = z.infer<typeof PromoteDeploymentResponseBody>;
export declare const GetDeploymentResponseBody: z.ZodObject<{
    id: z.ZodString;
    status: z.ZodEnum<["PENDING", "BUILDING", "DEPLOYING", "DEPLOYED", "FAILED", "CANCELED", "TIMED_OUT"]>;
    contentHash: z.ZodString;
    shortCode: z.ZodString;
    version: z.ZodString;
    imageReference: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    errorData: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        name: z.ZodString;
        message: z.ZodString;
        stack: z.ZodOptional<z.ZodString>;
        stderr: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    }, {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    }>>>;
    worker: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        version: z.ZodString;
        tasks: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            filePath: z.ZodString;
            exportName: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            filePath: string;
            slug: string;
            exportName?: string | undefined;
        }, {
            id: string;
            filePath: string;
            slug: string;
            exportName?: string | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        id: string;
        version: string;
        tasks: {
            id: string;
            filePath: string;
            slug: string;
            exportName?: string | undefined;
        }[];
    }, {
        id: string;
        version: string;
        tasks: {
            id: string;
            filePath: string;
            slug: string;
            exportName?: string | undefined;
        }[];
    }>>;
}, "strip", z.ZodTypeAny, {
    status: "CANCELED" | "FAILED" | "TIMED_OUT" | "PENDING" | "BUILDING" | "DEPLOYING" | "DEPLOYED";
    id: string;
    version: string;
    shortCode: string;
    contentHash: string;
    worker?: {
        id: string;
        version: string;
        tasks: {
            id: string;
            filePath: string;
            slug: string;
            exportName?: string | undefined;
        }[];
    } | undefined;
    imageReference?: string | null | undefined;
    errorData?: {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    } | null | undefined;
}, {
    status: "CANCELED" | "FAILED" | "TIMED_OUT" | "PENDING" | "BUILDING" | "DEPLOYING" | "DEPLOYED";
    id: string;
    version: string;
    shortCode: string;
    contentHash: string;
    worker?: {
        id: string;
        version: string;
        tasks: {
            id: string;
            filePath: string;
            slug: string;
            exportName?: string | undefined;
        }[];
    } | undefined;
    imageReference?: string | null | undefined;
    errorData?: {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    } | null | undefined;
}>;
export type GetDeploymentResponseBody = z.infer<typeof GetDeploymentResponseBody>;
export declare const GetLatestDeploymentResponseBody: z.ZodObject<Omit<{
    id: z.ZodString;
    status: z.ZodEnum<["PENDING", "BUILDING", "DEPLOYING", "DEPLOYED", "FAILED", "CANCELED", "TIMED_OUT"]>;
    contentHash: z.ZodString;
    shortCode: z.ZodString;
    version: z.ZodString;
    imageReference: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    errorData: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        name: z.ZodString;
        message: z.ZodString;
        stack: z.ZodOptional<z.ZodString>;
        stderr: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    }, {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    }>>>;
    worker: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        version: z.ZodString;
        tasks: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            filePath: z.ZodString;
            exportName: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            filePath: string;
            slug: string;
            exportName?: string | undefined;
        }, {
            id: string;
            filePath: string;
            slug: string;
            exportName?: string | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        id: string;
        version: string;
        tasks: {
            id: string;
            filePath: string;
            slug: string;
            exportName?: string | undefined;
        }[];
    }, {
        id: string;
        version: string;
        tasks: {
            id: string;
            filePath: string;
            slug: string;
            exportName?: string | undefined;
        }[];
    }>>;
}, "worker">, "strip", z.ZodTypeAny, {
    status: "CANCELED" | "FAILED" | "TIMED_OUT" | "PENDING" | "BUILDING" | "DEPLOYING" | "DEPLOYED";
    id: string;
    version: string;
    shortCode: string;
    contentHash: string;
    imageReference?: string | null | undefined;
    errorData?: {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    } | null | undefined;
}, {
    status: "CANCELED" | "FAILED" | "TIMED_OUT" | "PENDING" | "BUILDING" | "DEPLOYING" | "DEPLOYED";
    id: string;
    version: string;
    shortCode: string;
    contentHash: string;
    imageReference?: string | null | undefined;
    errorData?: {
        message: string;
        name: string;
        stack?: string | undefined;
        stderr?: string | undefined;
    } | null | undefined;
}>;
export type GetLatestDeploymentResponseBody = z.infer<typeof GetLatestDeploymentResponseBody>;
export declare const CreateUploadPayloadUrlResponseBody: z.ZodObject<{
    presignedUrl: z.ZodString;
}, "strip", z.ZodTypeAny, {
    presignedUrl: string;
}, {
    presignedUrl: string;
}>;
export declare const WorkersListResponseBody: z.ZodArray<z.ZodObject<{
    type: z.ZodString;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    latestVersion: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    lastHeartbeatAt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    isDefault: z.ZodBoolean;
    updatedAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    type: string;
    name: string;
    updatedAt: Date;
    isDefault: boolean;
    description?: string | null | undefined;
    latestVersion?: string | null | undefined;
    lastHeartbeatAt?: string | null | undefined;
}, {
    type: string;
    name: string;
    updatedAt: Date;
    isDefault: boolean;
    description?: string | null | undefined;
    latestVersion?: string | null | undefined;
    lastHeartbeatAt?: string | null | undefined;
}>, "many">;
export type WorkersListResponseBody = z.infer<typeof WorkersListResponseBody>;
export declare const WorkersCreateRequestBody: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name?: string | undefined;
    description?: string | undefined;
}, {
    name?: string | undefined;
    description?: string | undefined;
}>;
export type WorkersCreateRequestBody = z.infer<typeof WorkersCreateRequestBody>;
export declare const WorkersCreateResponseBody: z.ZodObject<{
    workerGroup: z.ZodObject<{
        name: z.ZodString;
        description: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        description?: string | null | undefined;
    }, {
        name: string;
        description?: string | null | undefined;
    }>;
    token: z.ZodObject<{
        plaintext: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        plaintext: string;
    }, {
        plaintext: string;
    }>;
}, "strip", z.ZodTypeAny, {
    token: {
        plaintext: string;
    };
    workerGroup: {
        name: string;
        description?: string | null | undefined;
    };
}, {
    token: {
        plaintext: string;
    };
    workerGroup: {
        name: string;
        description?: string | null | undefined;
    };
}>;
export type WorkersCreateResponseBody = z.infer<typeof WorkersCreateResponseBody>;
export declare const DevConfigResponseBody: z.ZodObject<{
    environmentId: z.ZodString;
    dequeueIntervalWithRun: z.ZodNumber;
    dequeueIntervalWithoutRun: z.ZodNumber;
    maxConcurrentRuns: z.ZodNumber;
    engineUrl: z.ZodString;
}, "strip", z.ZodTypeAny, {
    environmentId: string;
    dequeueIntervalWithRun: number;
    dequeueIntervalWithoutRun: number;
    maxConcurrentRuns: number;
    engineUrl: string;
}, {
    environmentId: string;
    dequeueIntervalWithRun: number;
    dequeueIntervalWithoutRun: number;
    maxConcurrentRuns: number;
    engineUrl: string;
}>;
export type DevConfigResponseBody = z.infer<typeof DevConfigResponseBody>;
export declare const DevDequeueRequestBody: z.ZodObject<{
    currentWorker: z.ZodString;
    oldWorkers: z.ZodArray<z.ZodString, "many">;
    maxResources: z.ZodOptional<z.ZodObject<{
        cpu: z.ZodNumber;
        memory: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        cpu: number;
        memory: number;
    }, {
        cpu: number;
        memory: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    currentWorker: string;
    oldWorkers: string[];
    maxResources?: {
        cpu: number;
        memory: number;
    } | undefined;
}, {
    currentWorker: string;
    oldWorkers: string[];
    maxResources?: {
        cpu: number;
        memory: number;
    } | undefined;
}>;
export type DevDequeueRequestBody = z.infer<typeof DevDequeueRequestBody>;
export declare const DevDequeueResponseBody: z.ZodObject<{
    dequeuedMessages: z.ZodArray<z.ZodObject<{
        version: z.ZodLiteral<"1">;
        snapshot: z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
            executionStatus: z.ZodEnum<[import("./runEngine.js").TaskRunExecutionStatus]>;
            description: z.ZodString;
            createdAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("./runEngine.js").TaskRunExecutionStatus;
        }, {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("./runEngine.js").TaskRunExecutionStatus;
        }>;
        dequeuedAt: z.ZodDate;
        image: z.ZodOptional<z.ZodString>;
        checkpoint: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            type: z.ZodEnum<[import("./runEngine.js").CheckpointTypeEnum]>;
            location: z.ZodString;
            imageRef: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            type: import("./runEngine.js").CheckpointTypeEnum;
            id: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        }, {
            type: import("./runEngine.js").CheckpointTypeEnum;
            id: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        }>>;
        completedWaitpoints: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            index: z.ZodOptional<z.ZodNumber>;
            friendlyId: z.ZodString;
            type: z.ZodEnum<[import("./runEngine.js").WaitpointType]>;
            completedAt: z.ZodDate;
            idempotencyKey: z.ZodOptional<z.ZodString>;
            completedByTaskRun: z.ZodOptional<z.ZodObject<{
                id: z.ZodString;
                friendlyId: z.ZodString;
                batch: z.ZodOptional<z.ZodObject<{
                    id: z.ZodString;
                    friendlyId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    friendlyId: string;
                }, {
                    id: string;
                    friendlyId: string;
                }>>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            }, {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            }>>;
            completedAfter: z.ZodOptional<z.ZodDate>;
            completedByBatch: z.ZodOptional<z.ZodObject<{
                id: z.ZodString;
                friendlyId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                friendlyId: string;
            }, {
                id: string;
                friendlyId: string;
            }>>;
            output: z.ZodOptional<z.ZodString>;
            outputType: z.ZodOptional<z.ZodString>;
            outputIsError: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            type: import("./runEngine.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }, {
            type: import("./runEngine.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }>, "many">;
        backgroundWorker: z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
            version: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            version: string;
            friendlyId: string;
        }, {
            id: string;
            version: string;
            friendlyId: string;
        }>;
        deployment: z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            friendlyId: z.ZodOptional<z.ZodString>;
            imagePlatform: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id?: string | undefined;
            friendlyId?: string | undefined;
            imagePlatform?: string | undefined;
        }, {
            id?: string | undefined;
            friendlyId?: string | undefined;
            imagePlatform?: string | undefined;
        }>;
        run: z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
            isTest: z.ZodBoolean;
            machine: z.ZodObject<{
                name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
                cpu: z.ZodNumber;
                memory: z.ZodNumber;
                centsPerMs: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            }, {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            }>;
            attemptNumber: z.ZodNumber;
            masterQueue: z.ZodString;
            traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            isTest: boolean;
            machine: {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            };
            traceContext: Record<string, unknown>;
            friendlyId: string;
            attemptNumber: number;
            masterQueue: string;
        }, {
            id: string;
            isTest: boolean;
            machine: {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            };
            traceContext: Record<string, unknown>;
            friendlyId: string;
            attemptNumber: number;
            masterQueue: string;
        }>;
        environment: z.ZodObject<{
            id: z.ZodString;
            type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
        }, "strip", z.ZodTypeAny, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
        }, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
        }>;
        organization: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
        project: z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>;
        placementTags: z.ZodOptional<z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            values: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            key: string;
            values?: string[] | undefined;
        }, {
            key: string;
            values?: string[] | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        version: "1";
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
        };
        organization: {
            id: string;
        };
        project: {
            id: string;
        };
        deployment: {
            id?: string | undefined;
            friendlyId?: string | undefined;
            imagePlatform?: string | undefined;
        };
        run: {
            id: string;
            isTest: boolean;
            machine: {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            };
            traceContext: Record<string, unknown>;
            friendlyId: string;
            attemptNumber: number;
            masterQueue: string;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("./runEngine.js").TaskRunExecutionStatus;
        };
        completedWaitpoints: {
            type: import("./runEngine.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }[];
        dequeuedAt: Date;
        backgroundWorker: {
            id: string;
            version: string;
            friendlyId: string;
        };
        checkpoint?: {
            type: import("./runEngine.js").CheckpointTypeEnum;
            id: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        } | undefined;
        image?: string | undefined;
        placementTags?: {
            key: string;
            values?: string[] | undefined;
        }[] | undefined;
    }, {
        version: "1";
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
        };
        organization: {
            id: string;
        };
        project: {
            id: string;
        };
        deployment: {
            id?: string | undefined;
            friendlyId?: string | undefined;
            imagePlatform?: string | undefined;
        };
        run: {
            id: string;
            isTest: boolean;
            machine: {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            };
            traceContext: Record<string, unknown>;
            friendlyId: string;
            attemptNumber: number;
            masterQueue: string;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("./runEngine.js").TaskRunExecutionStatus;
        };
        completedWaitpoints: {
            type: import("./runEngine.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }[];
        dequeuedAt: Date;
        backgroundWorker: {
            id: string;
            version: string;
            friendlyId: string;
        };
        checkpoint?: {
            type: import("./runEngine.js").CheckpointTypeEnum;
            id: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        } | undefined;
        image?: string | undefined;
        placementTags?: {
            key: string;
            values?: string[] | undefined;
        }[] | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    dequeuedMessages: {
        version: "1";
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
        };
        organization: {
            id: string;
        };
        project: {
            id: string;
        };
        deployment: {
            id?: string | undefined;
            friendlyId?: string | undefined;
            imagePlatform?: string | undefined;
        };
        run: {
            id: string;
            isTest: boolean;
            machine: {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            };
            traceContext: Record<string, unknown>;
            friendlyId: string;
            attemptNumber: number;
            masterQueue: string;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("./runEngine.js").TaskRunExecutionStatus;
        };
        completedWaitpoints: {
            type: import("./runEngine.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }[];
        dequeuedAt: Date;
        backgroundWorker: {
            id: string;
            version: string;
            friendlyId: string;
        };
        checkpoint?: {
            type: import("./runEngine.js").CheckpointTypeEnum;
            id: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        } | undefined;
        image?: string | undefined;
        placementTags?: {
            key: string;
            values?: string[] | undefined;
        }[] | undefined;
    }[];
}, {
    dequeuedMessages: {
        version: "1";
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
        };
        organization: {
            id: string;
        };
        project: {
            id: string;
        };
        deployment: {
            id?: string | undefined;
            friendlyId?: string | undefined;
            imagePlatform?: string | undefined;
        };
        run: {
            id: string;
            isTest: boolean;
            machine: {
                cpu: number;
                memory: number;
                name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
                centsPerMs: number;
            };
            traceContext: Record<string, unknown>;
            friendlyId: string;
            attemptNumber: number;
            masterQueue: string;
        };
        snapshot: {
            id: string;
            createdAt: Date;
            description: string;
            friendlyId: string;
            executionStatus: import("./runEngine.js").TaskRunExecutionStatus;
        };
        completedWaitpoints: {
            type: import("./runEngine.js").WaitpointType;
            id: string;
            friendlyId: string;
            completedAt: Date;
            outputIsError: boolean;
            idempotencyKey?: string | undefined;
            output?: string | undefined;
            outputType?: string | undefined;
            index?: number | undefined;
            completedByTaskRun?: {
                id: string;
                friendlyId: string;
                batch?: {
                    id: string;
                    friendlyId: string;
                } | undefined;
            } | undefined;
            completedAfter?: Date | undefined;
            completedByBatch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }[];
        dequeuedAt: Date;
        backgroundWorker: {
            id: string;
            version: string;
            friendlyId: string;
        };
        checkpoint?: {
            type: import("./runEngine.js").CheckpointTypeEnum;
            id: string;
            location: string;
            imageRef?: string | null | undefined;
            reason?: string | null | undefined;
        } | undefined;
        image?: string | undefined;
        placementTags?: {
            key: string;
            values?: string[] | undefined;
        }[] | undefined;
    }[];
}>;
export type DevDequeueResponseBody = z.infer<typeof DevDequeueResponseBody>;
export type CreateUploadPayloadUrlResponseBody = z.infer<typeof CreateUploadPayloadUrlResponseBody>;
export declare const ReplayRunResponse: z.ZodObject<{
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
export type ReplayRunResponse = z.infer<typeof ReplayRunResponse>;
export declare const CanceledRunResponse: z.ZodObject<{
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
export type CanceledRunResponse = z.infer<typeof CanceledRunResponse>;
export declare const ScheduleType: z.ZodUnion<[z.ZodLiteral<"DECLARATIVE">, z.ZodLiteral<"IMPERATIVE">]>;
export declare const ScheduledTaskPayload: z.ZodObject<{
    /** The schedule id associated with this run (you can have many schedules for the same task).
      You can use this to remove the schedule, update it, etc */
    scheduleId: z.ZodString;
    /** The type of schedule – `"DECLARATIVE"` or `"IMPERATIVE"`.
     *
     * **DECLARATIVE** – defined inline on your `schedules.task` using the `cron` property. They can only be created, updated or deleted by modifying the `cron` property on your task.
     *
     * **IMPERATIVE** – created using the `schedules.create` functions or in the dashboard.
     */
    type: z.ZodUnion<[z.ZodLiteral<"DECLARATIVE">, z.ZodLiteral<"IMPERATIVE">]>;
    /** When the task was scheduled to run.
     * Note this will be slightly different from `new Date()` because it takes a few ms to run the task.
     *
     * This date is UTC. To output it as a string with a timezone you would do this:
     * ```ts
     * const formatted = payload.timestamp.toLocaleString("en-US", {
          timeZone: payload.timezone,
      });
      ```  */
    timestamp: z.ZodDate;
    /** When the task was last run (it has been).
      This can be undefined if it's never been run. This date is UTC. */
    lastTimestamp: z.ZodOptional<z.ZodDate>;
    /** You can optionally provide an external id when creating the schedule.
      Usually you would use a userId or some other unique identifier.
      This defaults to undefined if you didn't provide one. */
    externalId: z.ZodOptional<z.ZodString>;
    /** The IANA timezone the schedule is set to. The default is UTC.
     * You can see the full list of supported timezones here: https://cloud.trigger.dev/timezones
     */
    timezone: z.ZodString;
    /** The next 5 dates this task is scheduled to run */
    upcoming: z.ZodArray<z.ZodDate, "many">;
}, "strip", z.ZodTypeAny, {
    type: "DECLARATIVE" | "IMPERATIVE";
    timestamp: Date;
    timezone: string;
    scheduleId: string;
    upcoming: Date[];
    externalId?: string | undefined;
    lastTimestamp?: Date | undefined;
}, {
    type: "DECLARATIVE" | "IMPERATIVE";
    timestamp: Date;
    timezone: string;
    scheduleId: string;
    upcoming: Date[];
    externalId?: string | undefined;
    lastTimestamp?: Date | undefined;
}>;
export type ScheduledTaskPayload = z.infer<typeof ScheduledTaskPayload>;
export declare const CreateScheduleOptions: z.ZodObject<{
    /** The id of the task you want to attach to. */
    task: z.ZodString;
    /**  The schedule in CRON format.
     *
     * ```txt
  *    *    *    *    *    *
  ┬    ┬    ┬    ┬    ┬
  │    │    │    │    |
  │    │    │    │    └ day of week (0 - 7, 1L - 7L) (0 or 7 is Sun)
  │    │    │    └───── month (1 - 12)
  │    │    └────────── day of month (1 - 31, L)
  │    └─────────────── hour (0 - 23)
  └──────────────────── minute (0 - 59)
     * ```
  
  "L" means the last. In the "day of week" field, 1L means the last Monday of the month. In the day of month field, L means the last day of the month.
  
     */
    cron: z.ZodString;
    /** You can only create one schedule with this key. If you use it twice, the second call will update the schedule.
     *
     * This is required to prevent you from creating duplicate schedules. */
    deduplicationKey: z.ZodString;
    /** Optionally, you can specify your own IDs (like a user ID) and then use it inside the run function of your task.
     *
     * This allows you to have per-user CRON tasks.
     */
    externalId: z.ZodOptional<z.ZodString>;
    /** Optionally, you can specify a timezone in the IANA format. If unset it will use UTC.
     * If specified then the CRON will be evaluated in that timezone and will respect daylight savings.
     *
     * If you set the CRON to `0 0 * * *` and the timezone to `America/New_York` then the task will run at midnight in New York time, no matter whether it's daylight savings or not.
     *
     * You can see the full list of supported timezones here: https://cloud.trigger.dev/timezones
     *
     * @example "America/New_York", "Europe/London", "Asia/Tokyo", "Africa/Cairo"
     *
     */
    timezone: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    task: string;
    cron: string;
    deduplicationKey: string;
    timezone?: string | undefined;
    externalId?: string | undefined;
}, {
    task: string;
    cron: string;
    deduplicationKey: string;
    timezone?: string | undefined;
    externalId?: string | undefined;
}>;
export type CreateScheduleOptions = z.infer<typeof CreateScheduleOptions>;
export declare const UpdateScheduleOptions: z.ZodObject<Omit<{
    /** The id of the task you want to attach to. */
    task: z.ZodString;
    /**  The schedule in CRON format.
     *
     * ```txt
  *    *    *    *    *    *
  ┬    ┬    ┬    ┬    ┬
  │    │    │    │    |
  │    │    │    │    └ day of week (0 - 7, 1L - 7L) (0 or 7 is Sun)
  │    │    │    └───── month (1 - 12)
  │    │    └────────── day of month (1 - 31, L)
  │    └─────────────── hour (0 - 23)
  └──────────────────── minute (0 - 59)
     * ```
  
  "L" means the last. In the "day of week" field, 1L means the last Monday of the month. In the day of month field, L means the last day of the month.
  
     */
    cron: z.ZodString;
    /** You can only create one schedule with this key. If you use it twice, the second call will update the schedule.
     *
     * This is required to prevent you from creating duplicate schedules. */
    deduplicationKey: z.ZodString;
    /** Optionally, you can specify your own IDs (like a user ID) and then use it inside the run function of your task.
     *
     * This allows you to have per-user CRON tasks.
     */
    externalId: z.ZodOptional<z.ZodString>;
    /** Optionally, you can specify a timezone in the IANA format. If unset it will use UTC.
     * If specified then the CRON will be evaluated in that timezone and will respect daylight savings.
     *
     * If you set the CRON to `0 0 * * *` and the timezone to `America/New_York` then the task will run at midnight in New York time, no matter whether it's daylight savings or not.
     *
     * You can see the full list of supported timezones here: https://cloud.trigger.dev/timezones
     *
     * @example "America/New_York", "Europe/London", "Asia/Tokyo", "Africa/Cairo"
     *
     */
    timezone: z.ZodOptional<z.ZodString>;
}, "deduplicationKey">, "strip", z.ZodTypeAny, {
    task: string;
    cron: string;
    timezone?: string | undefined;
    externalId?: string | undefined;
}, {
    task: string;
    cron: string;
    timezone?: string | undefined;
    externalId?: string | undefined;
}>;
export type UpdateScheduleOptions = z.infer<typeof UpdateScheduleOptions>;
export declare const ScheduleGenerator: z.ZodObject<{
    type: z.ZodLiteral<"CRON">;
    expression: z.ZodString;
    description: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "CRON";
    description: string;
    expression: string;
}, {
    type: "CRON";
    description: string;
    expression: string;
}>;
export type ScheduleGenerator = z.infer<typeof ScheduleGenerator>;
export declare const ScheduleObject: z.ZodObject<{
    id: z.ZodString;
    type: z.ZodUnion<[z.ZodLiteral<"DECLARATIVE">, z.ZodLiteral<"IMPERATIVE">]>;
    task: z.ZodString;
    active: z.ZodBoolean;
    deduplicationKey: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    externalId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    generator: z.ZodObject<{
        type: z.ZodLiteral<"CRON">;
        expression: z.ZodString;
        description: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "CRON";
        description: string;
        expression: string;
    }, {
        type: "CRON";
        description: string;
        expression: string;
    }>;
    timezone: z.ZodString;
    nextRun: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    environments: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        type: z.ZodString;
        userName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        id: string;
        userName?: string | null | undefined;
    }, {
        type: string;
        id: string;
        userName?: string | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "DECLARATIVE" | "IMPERATIVE";
    id: string;
    task: string;
    timezone: string;
    environments: {
        type: string;
        id: string;
        userName?: string | null | undefined;
    }[];
    generator: {
        type: "CRON";
        description: string;
        expression: string;
    };
    active: boolean;
    externalId?: string | null | undefined;
    deduplicationKey?: string | null | undefined;
    nextRun?: Date | null | undefined;
}, {
    type: "DECLARATIVE" | "IMPERATIVE";
    id: string;
    task: string;
    timezone: string;
    environments: {
        type: string;
        id: string;
        userName?: string | null | undefined;
    }[];
    generator: {
        type: "CRON";
        description: string;
        expression: string;
    };
    active: boolean;
    externalId?: string | null | undefined;
    deduplicationKey?: string | null | undefined;
    nextRun?: Date | null | undefined;
}>;
export type ScheduleObject = z.infer<typeof ScheduleObject>;
export declare const DeletedScheduleObject: z.ZodObject<{
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
export type DeletedScheduleObject = z.infer<typeof DeletedScheduleObject>;
export declare const ListSchedulesResult: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        type: z.ZodUnion<[z.ZodLiteral<"DECLARATIVE">, z.ZodLiteral<"IMPERATIVE">]>;
        task: z.ZodString;
        active: z.ZodBoolean;
        deduplicationKey: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        externalId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        generator: z.ZodObject<{
            type: z.ZodLiteral<"CRON">;
            expression: z.ZodString;
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "CRON";
            description: string;
            expression: string;
        }, {
            type: "CRON";
            description: string;
            expression: string;
        }>;
        timezone: z.ZodString;
        nextRun: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
        environments: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            type: z.ZodString;
            userName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            id: string;
            userName?: string | null | undefined;
        }, {
            type: string;
            id: string;
            userName?: string | null | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "DECLARATIVE" | "IMPERATIVE";
        id: string;
        task: string;
        timezone: string;
        environments: {
            type: string;
            id: string;
            userName?: string | null | undefined;
        }[];
        generator: {
            type: "CRON";
            description: string;
            expression: string;
        };
        active: boolean;
        externalId?: string | null | undefined;
        deduplicationKey?: string | null | undefined;
        nextRun?: Date | null | undefined;
    }, {
        type: "DECLARATIVE" | "IMPERATIVE";
        id: string;
        task: string;
        timezone: string;
        environments: {
            type: string;
            id: string;
            userName?: string | null | undefined;
        }[];
        generator: {
            type: "CRON";
            description: string;
            expression: string;
        };
        active: boolean;
        externalId?: string | null | undefined;
        deduplicationKey?: string | null | undefined;
        nextRun?: Date | null | undefined;
    }>, "many">;
    pagination: z.ZodObject<{
        currentPage: z.ZodNumber;
        totalPages: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        currentPage: number;
        totalPages: number;
        count: number;
    }, {
        currentPage: number;
        totalPages: number;
        count: number;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        type: "DECLARATIVE" | "IMPERATIVE";
        id: string;
        task: string;
        timezone: string;
        environments: {
            type: string;
            id: string;
            userName?: string | null | undefined;
        }[];
        generator: {
            type: "CRON";
            description: string;
            expression: string;
        };
        active: boolean;
        externalId?: string | null | undefined;
        deduplicationKey?: string | null | undefined;
        nextRun?: Date | null | undefined;
    }[];
    pagination: {
        currentPage: number;
        totalPages: number;
        count: number;
    };
}, {
    data: {
        type: "DECLARATIVE" | "IMPERATIVE";
        id: string;
        task: string;
        timezone: string;
        environments: {
            type: string;
            id: string;
            userName?: string | null | undefined;
        }[];
        generator: {
            type: "CRON";
            description: string;
            expression: string;
        };
        active: boolean;
        externalId?: string | null | undefined;
        deduplicationKey?: string | null | undefined;
        nextRun?: Date | null | undefined;
    }[];
    pagination: {
        currentPage: number;
        totalPages: number;
        count: number;
    };
}>;
export type ListSchedulesResult = z.infer<typeof ListSchedulesResult>;
export declare const ListScheduleOptions: z.ZodObject<{
    page: z.ZodOptional<z.ZodNumber>;
    perPage: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    page?: number | undefined;
    perPage?: number | undefined;
}, {
    page?: number | undefined;
    perPage?: number | undefined;
}>;
export type ListScheduleOptions = z.infer<typeof ListScheduleOptions>;
export declare const TimezonesResult: z.ZodObject<{
    timezones: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    timezones: string[];
}, {
    timezones: string[];
}>;
export type TimezonesResult = z.infer<typeof TimezonesResult>;
export declare const RunStatus: z.ZodEnum<["PENDING_VERSION", "QUEUED", "DEQUEUED", "EXECUTING", "WAITING", "COMPLETED", "CANCELED", "FAILED", "CRASHED", "SYSTEM_FAILURE", "DELAYED", "EXPIRED", "TIMED_OUT"]>;
export type RunStatus = z.infer<typeof RunStatus>;
export declare const AttemptStatus: z.ZodEnum<["PENDING", "EXECUTING", "PAUSED", "COMPLETED", "FAILED", "CANCELED"]>;
export type AttemptStatus = z.infer<typeof AttemptStatus>;
export declare const RunEnvironmentDetails: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    user: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    user?: string | undefined;
}, {
    name: string;
    id: string;
    user?: string | undefined;
}>;
export type RunEnvironmentDetails = z.infer<typeof RunEnvironmentDetails>;
export declare const RunScheduleDetails: z.ZodObject<{
    id: z.ZodString;
    externalId: z.ZodOptional<z.ZodString>;
    deduplicationKey: z.ZodOptional<z.ZodString>;
    generator: z.ZodObject<{
        type: z.ZodLiteral<"CRON">;
        expression: z.ZodString;
        description: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "CRON";
        description: string;
        expression: string;
    }, {
        type: "CRON";
        description: string;
        expression: string;
    }>;
}, "strip", z.ZodTypeAny, {
    id: string;
    generator: {
        type: "CRON";
        description: string;
        expression: string;
    };
    externalId?: string | undefined;
    deduplicationKey?: string | undefined;
}, {
    id: string;
    generator: {
        type: "CRON";
        description: string;
        expression: string;
    };
    externalId?: string | undefined;
    deduplicationKey?: string | undefined;
}>;
export type RunScheduleDetails = z.infer<typeof RunScheduleDetails>;
export declare const TriggerFunction: z.ZodEnum<["triggerAndWait", "trigger", "batchTriggerAndWait", "batchTrigger"]>;
export type TriggerFunction = z.infer<typeof TriggerFunction>;
export declare const RelatedRunDetails: z.ZodObject<{
    depth: z.ZodNumber;
    triggerFunction: z.ZodEnum<["triggerAndWait", "trigger", "batchTriggerAndWait", "batchTrigger"]>;
    batchId: z.ZodOptional<z.ZodString>;
    id: z.ZodString;
    status: z.ZodEnum<["PENDING_VERSION", "QUEUED", "DEQUEUED", "EXECUTING", "WAITING", "COMPLETED", "CANCELED", "FAILED", "CRASHED", "SYSTEM_FAILURE", "DELAYED", "EXPIRED", "TIMED_OUT"]>;
    taskIdentifier: z.ZodString;
    idempotencyKey: z.ZodOptional<z.ZodString>;
    version: z.ZodOptional<z.ZodString>;
    isQueued: z.ZodBoolean;
    isExecuting: z.ZodBoolean;
    isWaiting: z.ZodBoolean;
    isCompleted: z.ZodBoolean;
    isSuccess: z.ZodBoolean;
    isFailed: z.ZodBoolean;
    isCancelled: z.ZodBoolean;
    isTest: z.ZodBoolean;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
    startedAt: z.ZodOptional<z.ZodDate>;
    finishedAt: z.ZodOptional<z.ZodDate>;
    delayedUntil: z.ZodOptional<z.ZodDate>;
    ttl: z.ZodOptional<z.ZodString>;
    expiredAt: z.ZodOptional<z.ZodDate>;
    tags: z.ZodArray<z.ZodString, "many">;
    costInCents: z.ZodNumber;
    baseCostInCents: z.ZodNumber;
    durationMs: z.ZodNumber;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
    id: string;
    tags: string[];
    isTest: boolean;
    createdAt: Date;
    baseCostInCents: number;
    durationMs: number;
    costInCents: number;
    taskIdentifier: string;
    depth: number;
    triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
    isQueued: boolean;
    isExecuting: boolean;
    isWaiting: boolean;
    isCompleted: boolean;
    isSuccess: boolean;
    isFailed: boolean;
    isCancelled: boolean;
    updatedAt: Date;
    metadata?: Record<string, any> | undefined;
    startedAt?: Date | undefined;
    idempotencyKey?: string | undefined;
    version?: string | undefined;
    ttl?: string | undefined;
    batchId?: string | undefined;
    finishedAt?: Date | undefined;
    delayedUntil?: Date | undefined;
    expiredAt?: Date | undefined;
}, {
    status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
    id: string;
    tags: string[];
    isTest: boolean;
    createdAt: Date;
    baseCostInCents: number;
    durationMs: number;
    costInCents: number;
    taskIdentifier: string;
    depth: number;
    triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
    isQueued: boolean;
    isExecuting: boolean;
    isWaiting: boolean;
    isCompleted: boolean;
    isSuccess: boolean;
    isFailed: boolean;
    isCancelled: boolean;
    updatedAt: Date;
    metadata?: Record<string, any> | undefined;
    startedAt?: Date | undefined;
    idempotencyKey?: string | undefined;
    version?: string | undefined;
    ttl?: string | undefined;
    batchId?: string | undefined;
    finishedAt?: Date | undefined;
    delayedUntil?: Date | undefined;
    expiredAt?: Date | undefined;
}>;
export declare const RetrieveRunResponse: z.ZodObject<{
    payload: z.ZodOptional<z.ZodAny>;
    payloadPresignedUrl: z.ZodOptional<z.ZodString>;
    output: z.ZodOptional<z.ZodAny>;
    outputPresignedUrl: z.ZodOptional<z.ZodString>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        name: z.ZodOptional<z.ZodString>;
        stackTrace: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        name?: string | undefined;
        stackTrace?: string | undefined;
    }, {
        message: string;
        name?: string | undefined;
        stackTrace?: string | undefined;
    }>>;
    schedule: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        externalId: z.ZodOptional<z.ZodString>;
        deduplicationKey: z.ZodOptional<z.ZodString>;
        generator: z.ZodObject<{
            type: z.ZodLiteral<"CRON">;
            expression: z.ZodString;
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "CRON";
            description: string;
            expression: string;
        }, {
            type: "CRON";
            description: string;
            expression: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        generator: {
            type: "CRON";
            description: string;
            expression: string;
        };
        externalId?: string | undefined;
        deduplicationKey?: string | undefined;
    }, {
        id: string;
        generator: {
            type: "CRON";
            description: string;
            expression: string;
        };
        externalId?: string | undefined;
        deduplicationKey?: string | undefined;
    }>>;
    relatedRuns: z.ZodObject<{
        root: z.ZodOptional<z.ZodObject<{
            depth: z.ZodNumber;
            triggerFunction: z.ZodEnum<["triggerAndWait", "trigger", "batchTriggerAndWait", "batchTrigger"]>;
            batchId: z.ZodOptional<z.ZodString>;
            id: z.ZodString;
            status: z.ZodEnum<["PENDING_VERSION", "QUEUED", "DEQUEUED", "EXECUTING", "WAITING", "COMPLETED", "CANCELED", "FAILED", "CRASHED", "SYSTEM_FAILURE", "DELAYED", "EXPIRED", "TIMED_OUT"]>;
            taskIdentifier: z.ZodString;
            idempotencyKey: z.ZodOptional<z.ZodString>;
            version: z.ZodOptional<z.ZodString>;
            isQueued: z.ZodBoolean;
            isExecuting: z.ZodBoolean;
            isWaiting: z.ZodBoolean;
            isCompleted: z.ZodBoolean;
            isSuccess: z.ZodBoolean;
            isFailed: z.ZodBoolean;
            isCancelled: z.ZodBoolean;
            isTest: z.ZodBoolean;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
            startedAt: z.ZodOptional<z.ZodDate>;
            finishedAt: z.ZodOptional<z.ZodDate>;
            delayedUntil: z.ZodOptional<z.ZodDate>;
            ttl: z.ZodOptional<z.ZodString>;
            expiredAt: z.ZodOptional<z.ZodDate>;
            tags: z.ZodArray<z.ZodString, "many">;
            costInCents: z.ZodNumber;
            baseCostInCents: z.ZodNumber;
            durationMs: z.ZodNumber;
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        }, "strip", z.ZodTypeAny, {
            status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
            id: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            taskIdentifier: string;
            depth: number;
            triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
            isQueued: boolean;
            isExecuting: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            updatedAt: Date;
            metadata?: Record<string, any> | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            ttl?: string | undefined;
            batchId?: string | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            expiredAt?: Date | undefined;
        }, {
            status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
            id: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            taskIdentifier: string;
            depth: number;
            triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
            isQueued: boolean;
            isExecuting: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            updatedAt: Date;
            metadata?: Record<string, any> | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            ttl?: string | undefined;
            batchId?: string | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            expiredAt?: Date | undefined;
        }>>;
        parent: z.ZodOptional<z.ZodObject<{
            depth: z.ZodNumber;
            triggerFunction: z.ZodEnum<["triggerAndWait", "trigger", "batchTriggerAndWait", "batchTrigger"]>;
            batchId: z.ZodOptional<z.ZodString>;
            id: z.ZodString;
            status: z.ZodEnum<["PENDING_VERSION", "QUEUED", "DEQUEUED", "EXECUTING", "WAITING", "COMPLETED", "CANCELED", "FAILED", "CRASHED", "SYSTEM_FAILURE", "DELAYED", "EXPIRED", "TIMED_OUT"]>;
            taskIdentifier: z.ZodString;
            idempotencyKey: z.ZodOptional<z.ZodString>;
            version: z.ZodOptional<z.ZodString>;
            isQueued: z.ZodBoolean;
            isExecuting: z.ZodBoolean;
            isWaiting: z.ZodBoolean;
            isCompleted: z.ZodBoolean;
            isSuccess: z.ZodBoolean;
            isFailed: z.ZodBoolean;
            isCancelled: z.ZodBoolean;
            isTest: z.ZodBoolean;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
            startedAt: z.ZodOptional<z.ZodDate>;
            finishedAt: z.ZodOptional<z.ZodDate>;
            delayedUntil: z.ZodOptional<z.ZodDate>;
            ttl: z.ZodOptional<z.ZodString>;
            expiredAt: z.ZodOptional<z.ZodDate>;
            tags: z.ZodArray<z.ZodString, "many">;
            costInCents: z.ZodNumber;
            baseCostInCents: z.ZodNumber;
            durationMs: z.ZodNumber;
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        }, "strip", z.ZodTypeAny, {
            status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
            id: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            taskIdentifier: string;
            depth: number;
            triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
            isQueued: boolean;
            isExecuting: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            updatedAt: Date;
            metadata?: Record<string, any> | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            ttl?: string | undefined;
            batchId?: string | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            expiredAt?: Date | undefined;
        }, {
            status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
            id: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            taskIdentifier: string;
            depth: number;
            triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
            isQueued: boolean;
            isExecuting: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            updatedAt: Date;
            metadata?: Record<string, any> | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            ttl?: string | undefined;
            batchId?: string | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            expiredAt?: Date | undefined;
        }>>;
        children: z.ZodOptional<z.ZodArray<z.ZodObject<{
            depth: z.ZodNumber;
            triggerFunction: z.ZodEnum<["triggerAndWait", "trigger", "batchTriggerAndWait", "batchTrigger"]>;
            batchId: z.ZodOptional<z.ZodString>;
            id: z.ZodString;
            status: z.ZodEnum<["PENDING_VERSION", "QUEUED", "DEQUEUED", "EXECUTING", "WAITING", "COMPLETED", "CANCELED", "FAILED", "CRASHED", "SYSTEM_FAILURE", "DELAYED", "EXPIRED", "TIMED_OUT"]>;
            taskIdentifier: z.ZodString;
            idempotencyKey: z.ZodOptional<z.ZodString>;
            version: z.ZodOptional<z.ZodString>;
            isQueued: z.ZodBoolean;
            isExecuting: z.ZodBoolean;
            isWaiting: z.ZodBoolean;
            isCompleted: z.ZodBoolean;
            isSuccess: z.ZodBoolean;
            isFailed: z.ZodBoolean;
            isCancelled: z.ZodBoolean;
            isTest: z.ZodBoolean;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
            startedAt: z.ZodOptional<z.ZodDate>;
            finishedAt: z.ZodOptional<z.ZodDate>;
            delayedUntil: z.ZodOptional<z.ZodDate>;
            ttl: z.ZodOptional<z.ZodString>;
            expiredAt: z.ZodOptional<z.ZodDate>;
            tags: z.ZodArray<z.ZodString, "many">;
            costInCents: z.ZodNumber;
            baseCostInCents: z.ZodNumber;
            durationMs: z.ZodNumber;
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        }, "strip", z.ZodTypeAny, {
            status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
            id: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            taskIdentifier: string;
            depth: number;
            triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
            isQueued: boolean;
            isExecuting: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            updatedAt: Date;
            metadata?: Record<string, any> | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            ttl?: string | undefined;
            batchId?: string | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            expiredAt?: Date | undefined;
        }, {
            status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
            id: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            taskIdentifier: string;
            depth: number;
            triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
            isQueued: boolean;
            isExecuting: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            updatedAt: Date;
            metadata?: Record<string, any> | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            ttl?: string | undefined;
            batchId?: string | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            expiredAt?: Date | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        root?: {
            status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
            id: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            taskIdentifier: string;
            depth: number;
            triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
            isQueued: boolean;
            isExecuting: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            updatedAt: Date;
            metadata?: Record<string, any> | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            ttl?: string | undefined;
            batchId?: string | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        parent?: {
            status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
            id: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            taskIdentifier: string;
            depth: number;
            triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
            isQueued: boolean;
            isExecuting: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            updatedAt: Date;
            metadata?: Record<string, any> | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            ttl?: string | undefined;
            batchId?: string | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        children?: {
            status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
            id: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            taskIdentifier: string;
            depth: number;
            triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
            isQueued: boolean;
            isExecuting: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            updatedAt: Date;
            metadata?: Record<string, any> | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            ttl?: string | undefined;
            batchId?: string | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            expiredAt?: Date | undefined;
        }[] | undefined;
    }, {
        root?: {
            status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
            id: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            taskIdentifier: string;
            depth: number;
            triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
            isQueued: boolean;
            isExecuting: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            updatedAt: Date;
            metadata?: Record<string, any> | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            ttl?: string | undefined;
            batchId?: string | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        parent?: {
            status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
            id: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            taskIdentifier: string;
            depth: number;
            triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
            isQueued: boolean;
            isExecuting: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            updatedAt: Date;
            metadata?: Record<string, any> | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            ttl?: string | undefined;
            batchId?: string | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        children?: {
            status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
            id: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            taskIdentifier: string;
            depth: number;
            triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
            isQueued: boolean;
            isExecuting: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            updatedAt: Date;
            metadata?: Record<string, any> | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            ttl?: string | undefined;
            batchId?: string | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            expiredAt?: Date | undefined;
        }[] | undefined;
    }>;
    attemptCount: z.ZodDefault<z.ZodNumber>;
    depth: z.ZodNumber;
    triggerFunction: z.ZodEnum<["triggerAndWait", "trigger", "batchTriggerAndWait", "batchTrigger"]>;
    batchId: z.ZodOptional<z.ZodString>;
    id: z.ZodString;
    status: z.ZodEnum<["PENDING_VERSION", "QUEUED", "DEQUEUED", "EXECUTING", "WAITING", "COMPLETED", "CANCELED", "FAILED", "CRASHED", "SYSTEM_FAILURE", "DELAYED", "EXPIRED", "TIMED_OUT"]>;
    taskIdentifier: z.ZodString;
    idempotencyKey: z.ZodOptional<z.ZodString>;
    version: z.ZodOptional<z.ZodString>;
    isQueued: z.ZodBoolean;
    isExecuting: z.ZodBoolean;
    isWaiting: z.ZodBoolean;
    isCompleted: z.ZodBoolean;
    isSuccess: z.ZodBoolean;
    isFailed: z.ZodBoolean;
    isCancelled: z.ZodBoolean;
    isTest: z.ZodBoolean;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
    startedAt: z.ZodOptional<z.ZodDate>;
    finishedAt: z.ZodOptional<z.ZodDate>;
    delayedUntil: z.ZodOptional<z.ZodDate>;
    ttl: z.ZodOptional<z.ZodString>;
    expiredAt: z.ZodOptional<z.ZodDate>;
    tags: z.ZodArray<z.ZodString, "many">;
    costInCents: z.ZodNumber;
    baseCostInCents: z.ZodNumber;
    durationMs: z.ZodNumber;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
    id: string;
    tags: string[];
    isTest: boolean;
    createdAt: Date;
    baseCostInCents: number;
    durationMs: number;
    costInCents: number;
    taskIdentifier: string;
    relatedRuns: {
        root?: {
            status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
            id: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            taskIdentifier: string;
            depth: number;
            triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
            isQueued: boolean;
            isExecuting: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            updatedAt: Date;
            metadata?: Record<string, any> | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            ttl?: string | undefined;
            batchId?: string | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        parent?: {
            status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
            id: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            taskIdentifier: string;
            depth: number;
            triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
            isQueued: boolean;
            isExecuting: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            updatedAt: Date;
            metadata?: Record<string, any> | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            ttl?: string | undefined;
            batchId?: string | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        children?: {
            status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
            id: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            taskIdentifier: string;
            depth: number;
            triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
            isQueued: boolean;
            isExecuting: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            updatedAt: Date;
            metadata?: Record<string, any> | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            ttl?: string | undefined;
            batchId?: string | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            expiredAt?: Date | undefined;
        }[] | undefined;
    };
    depth: number;
    triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
    isQueued: boolean;
    isExecuting: boolean;
    isWaiting: boolean;
    isCompleted: boolean;
    isSuccess: boolean;
    isFailed: boolean;
    isCancelled: boolean;
    updatedAt: Date;
    attemptCount: number;
    payload?: any;
    error?: {
        message: string;
        name?: string | undefined;
        stackTrace?: string | undefined;
    } | undefined;
    metadata?: Record<string, any> | undefined;
    startedAt?: Date | undefined;
    idempotencyKey?: string | undefined;
    version?: string | undefined;
    output?: any;
    ttl?: string | undefined;
    schedule?: {
        id: string;
        generator: {
            type: "CRON";
            description: string;
            expression: string;
        };
        externalId?: string | undefined;
        deduplicationKey?: string | undefined;
    } | undefined;
    payloadPresignedUrl?: string | undefined;
    outputPresignedUrl?: string | undefined;
    batchId?: string | undefined;
    finishedAt?: Date | undefined;
    delayedUntil?: Date | undefined;
    expiredAt?: Date | undefined;
}, {
    status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
    id: string;
    tags: string[];
    isTest: boolean;
    createdAt: Date;
    baseCostInCents: number;
    durationMs: number;
    costInCents: number;
    taskIdentifier: string;
    relatedRuns: {
        root?: {
            status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
            id: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            taskIdentifier: string;
            depth: number;
            triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
            isQueued: boolean;
            isExecuting: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            updatedAt: Date;
            metadata?: Record<string, any> | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            ttl?: string | undefined;
            batchId?: string | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        parent?: {
            status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
            id: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            taskIdentifier: string;
            depth: number;
            triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
            isQueued: boolean;
            isExecuting: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            updatedAt: Date;
            metadata?: Record<string, any> | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            ttl?: string | undefined;
            batchId?: string | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            expiredAt?: Date | undefined;
        } | undefined;
        children?: {
            status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
            id: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            taskIdentifier: string;
            depth: number;
            triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
            isQueued: boolean;
            isExecuting: boolean;
            isWaiting: boolean;
            isCompleted: boolean;
            isSuccess: boolean;
            isFailed: boolean;
            isCancelled: boolean;
            updatedAt: Date;
            metadata?: Record<string, any> | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            version?: string | undefined;
            ttl?: string | undefined;
            batchId?: string | undefined;
            finishedAt?: Date | undefined;
            delayedUntil?: Date | undefined;
            expiredAt?: Date | undefined;
        }[] | undefined;
    };
    depth: number;
    triggerFunction: "trigger" | "batchTrigger" | "triggerAndWait" | "batchTriggerAndWait";
    isQueued: boolean;
    isExecuting: boolean;
    isWaiting: boolean;
    isCompleted: boolean;
    isSuccess: boolean;
    isFailed: boolean;
    isCancelled: boolean;
    updatedAt: Date;
    payload?: any;
    error?: {
        message: string;
        name?: string | undefined;
        stackTrace?: string | undefined;
    } | undefined;
    metadata?: Record<string, any> | undefined;
    startedAt?: Date | undefined;
    idempotencyKey?: string | undefined;
    version?: string | undefined;
    output?: any;
    ttl?: string | undefined;
    schedule?: {
        id: string;
        generator: {
            type: "CRON";
            description: string;
            expression: string;
        };
        externalId?: string | undefined;
        deduplicationKey?: string | undefined;
    } | undefined;
    payloadPresignedUrl?: string | undefined;
    outputPresignedUrl?: string | undefined;
    batchId?: string | undefined;
    finishedAt?: Date | undefined;
    delayedUntil?: Date | undefined;
    expiredAt?: Date | undefined;
    attemptCount?: number | undefined;
}>;
export type RetrieveRunResponse = z.infer<typeof RetrieveRunResponse>;
export declare const ListRunResponseItem: z.ZodObject<{
    env: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        user: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        user?: string | undefined;
    }, {
        name: string;
        id: string;
        user?: string | undefined;
    }>;
    id: z.ZodString;
    status: z.ZodEnum<["PENDING_VERSION", "QUEUED", "DEQUEUED", "EXECUTING", "WAITING", "COMPLETED", "CANCELED", "FAILED", "CRASHED", "SYSTEM_FAILURE", "DELAYED", "EXPIRED", "TIMED_OUT"]>;
    taskIdentifier: z.ZodString;
    idempotencyKey: z.ZodOptional<z.ZodString>;
    version: z.ZodOptional<z.ZodString>;
    isQueued: z.ZodBoolean;
    isExecuting: z.ZodBoolean;
    isWaiting: z.ZodBoolean;
    isCompleted: z.ZodBoolean;
    isSuccess: z.ZodBoolean;
    isFailed: z.ZodBoolean;
    isCancelled: z.ZodBoolean;
    isTest: z.ZodBoolean;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
    startedAt: z.ZodOptional<z.ZodDate>;
    finishedAt: z.ZodOptional<z.ZodDate>;
    delayedUntil: z.ZodOptional<z.ZodDate>;
    ttl: z.ZodOptional<z.ZodString>;
    expiredAt: z.ZodOptional<z.ZodDate>;
    tags: z.ZodArray<z.ZodString, "many">;
    costInCents: z.ZodNumber;
    baseCostInCents: z.ZodNumber;
    durationMs: z.ZodNumber;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
    id: string;
    tags: string[];
    isTest: boolean;
    createdAt: Date;
    baseCostInCents: number;
    durationMs: number;
    costInCents: number;
    taskIdentifier: string;
    isQueued: boolean;
    isExecuting: boolean;
    isWaiting: boolean;
    isCompleted: boolean;
    isSuccess: boolean;
    isFailed: boolean;
    isCancelled: boolean;
    updatedAt: Date;
    env: {
        name: string;
        id: string;
        user?: string | undefined;
    };
    metadata?: Record<string, any> | undefined;
    startedAt?: Date | undefined;
    idempotencyKey?: string | undefined;
    version?: string | undefined;
    ttl?: string | undefined;
    finishedAt?: Date | undefined;
    delayedUntil?: Date | undefined;
    expiredAt?: Date | undefined;
}, {
    status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
    id: string;
    tags: string[];
    isTest: boolean;
    createdAt: Date;
    baseCostInCents: number;
    durationMs: number;
    costInCents: number;
    taskIdentifier: string;
    isQueued: boolean;
    isExecuting: boolean;
    isWaiting: boolean;
    isCompleted: boolean;
    isSuccess: boolean;
    isFailed: boolean;
    isCancelled: boolean;
    updatedAt: Date;
    env: {
        name: string;
        id: string;
        user?: string | undefined;
    };
    metadata?: Record<string, any> | undefined;
    startedAt?: Date | undefined;
    idempotencyKey?: string | undefined;
    version?: string | undefined;
    ttl?: string | undefined;
    finishedAt?: Date | undefined;
    delayedUntil?: Date | undefined;
    expiredAt?: Date | undefined;
}>;
export type ListRunResponseItem = z.infer<typeof ListRunResponseItem>;
export declare const ListRunResponse: z.ZodObject<{
    data: z.ZodArray<z.ZodObject<{
        env: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            user: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            user?: string | undefined;
        }, {
            name: string;
            id: string;
            user?: string | undefined;
        }>;
        id: z.ZodString;
        status: z.ZodEnum<["PENDING_VERSION", "QUEUED", "DEQUEUED", "EXECUTING", "WAITING", "COMPLETED", "CANCELED", "FAILED", "CRASHED", "SYSTEM_FAILURE", "DELAYED", "EXPIRED", "TIMED_OUT"]>;
        taskIdentifier: z.ZodString;
        idempotencyKey: z.ZodOptional<z.ZodString>;
        version: z.ZodOptional<z.ZodString>;
        isQueued: z.ZodBoolean;
        isExecuting: z.ZodBoolean;
        isWaiting: z.ZodBoolean;
        isCompleted: z.ZodBoolean;
        isSuccess: z.ZodBoolean;
        isFailed: z.ZodBoolean;
        isCancelled: z.ZodBoolean;
        isTest: z.ZodBoolean;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
        startedAt: z.ZodOptional<z.ZodDate>;
        finishedAt: z.ZodOptional<z.ZodDate>;
        delayedUntil: z.ZodOptional<z.ZodDate>;
        ttl: z.ZodOptional<z.ZodString>;
        expiredAt: z.ZodOptional<z.ZodDate>;
        tags: z.ZodArray<z.ZodString, "many">;
        costInCents: z.ZodNumber;
        baseCostInCents: z.ZodNumber;
        durationMs: z.ZodNumber;
        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    }, "strip", z.ZodTypeAny, {
        status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
        id: string;
        tags: string[];
        isTest: boolean;
        createdAt: Date;
        baseCostInCents: number;
        durationMs: number;
        costInCents: number;
        taskIdentifier: string;
        isQueued: boolean;
        isExecuting: boolean;
        isWaiting: boolean;
        isCompleted: boolean;
        isSuccess: boolean;
        isFailed: boolean;
        isCancelled: boolean;
        updatedAt: Date;
        env: {
            name: string;
            id: string;
            user?: string | undefined;
        };
        metadata?: Record<string, any> | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        version?: string | undefined;
        ttl?: string | undefined;
        finishedAt?: Date | undefined;
        delayedUntil?: Date | undefined;
        expiredAt?: Date | undefined;
    }, {
        status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
        id: string;
        tags: string[];
        isTest: boolean;
        createdAt: Date;
        baseCostInCents: number;
        durationMs: number;
        costInCents: number;
        taskIdentifier: string;
        isQueued: boolean;
        isExecuting: boolean;
        isWaiting: boolean;
        isCompleted: boolean;
        isSuccess: boolean;
        isFailed: boolean;
        isCancelled: boolean;
        updatedAt: Date;
        env: {
            name: string;
            id: string;
            user?: string | undefined;
        };
        metadata?: Record<string, any> | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        version?: string | undefined;
        ttl?: string | undefined;
        finishedAt?: Date | undefined;
        delayedUntil?: Date | undefined;
        expiredAt?: Date | undefined;
    }>, "many">;
    pagination: z.ZodObject<{
        next: z.ZodOptional<z.ZodString>;
        previous: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        next?: string | undefined;
        previous?: string | undefined;
    }, {
        next?: string | undefined;
        previous?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
        id: string;
        tags: string[];
        isTest: boolean;
        createdAt: Date;
        baseCostInCents: number;
        durationMs: number;
        costInCents: number;
        taskIdentifier: string;
        isQueued: boolean;
        isExecuting: boolean;
        isWaiting: boolean;
        isCompleted: boolean;
        isSuccess: boolean;
        isFailed: boolean;
        isCancelled: boolean;
        updatedAt: Date;
        env: {
            name: string;
            id: string;
            user?: string | undefined;
        };
        metadata?: Record<string, any> | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        version?: string | undefined;
        ttl?: string | undefined;
        finishedAt?: Date | undefined;
        delayedUntil?: Date | undefined;
        expiredAt?: Date | undefined;
    }[];
    pagination: {
        next?: string | undefined;
        previous?: string | undefined;
    };
}, {
    data: {
        status: "PENDING_VERSION" | "QUEUED" | "DEQUEUED" | "EXECUTING" | "WAITING" | "COMPLETED" | "CANCELED" | "FAILED" | "CRASHED" | "SYSTEM_FAILURE" | "DELAYED" | "EXPIRED" | "TIMED_OUT";
        id: string;
        tags: string[];
        isTest: boolean;
        createdAt: Date;
        baseCostInCents: number;
        durationMs: number;
        costInCents: number;
        taskIdentifier: string;
        isQueued: boolean;
        isExecuting: boolean;
        isWaiting: boolean;
        isCompleted: boolean;
        isSuccess: boolean;
        isFailed: boolean;
        isCancelled: boolean;
        updatedAt: Date;
        env: {
            name: string;
            id: string;
            user?: string | undefined;
        };
        metadata?: Record<string, any> | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        version?: string | undefined;
        ttl?: string | undefined;
        finishedAt?: Date | undefined;
        delayedUntil?: Date | undefined;
        expiredAt?: Date | undefined;
    }[];
    pagination: {
        next?: string | undefined;
        previous?: string | undefined;
    };
}>;
export type ListRunResponse = z.infer<typeof ListRunResponse>;
export declare const CreateEnvironmentVariableRequestBody: z.ZodObject<{
    name: z.ZodString;
    value: z.ZodString;
}, "strip", z.ZodTypeAny, {
    value: string;
    name: string;
}, {
    value: string;
    name: string;
}>;
export type CreateEnvironmentVariableRequestBody = z.infer<typeof CreateEnvironmentVariableRequestBody>;
export declare const UpdateEnvironmentVariableRequestBody: z.ZodObject<{
    value: z.ZodString;
}, "strip", z.ZodTypeAny, {
    value: string;
}, {
    value: string;
}>;
export type UpdateEnvironmentVariableRequestBody = z.infer<typeof UpdateEnvironmentVariableRequestBody>;
export declare const ImportEnvironmentVariablesRequestBody: z.ZodObject<{
    variables: z.ZodRecord<z.ZodString, z.ZodString>;
    parentVariables: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    override: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    variables: Record<string, string>;
    parentVariables?: Record<string, string> | undefined;
    override?: boolean | undefined;
}, {
    variables: Record<string, string>;
    parentVariables?: Record<string, string> | undefined;
    override?: boolean | undefined;
}>;
export type ImportEnvironmentVariablesRequestBody = z.infer<typeof ImportEnvironmentVariablesRequestBody>;
export declare const EnvironmentVariableResponseBody: z.ZodObject<{
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    success: boolean;
}, {
    success: boolean;
}>;
export type EnvironmentVariableResponseBody = z.infer<typeof EnvironmentVariableResponseBody>;
export declare const EnvironmentVariableValue: z.ZodObject<{
    value: z.ZodString;
}, "strip", z.ZodTypeAny, {
    value: string;
}, {
    value: string;
}>;
export type EnvironmentVariableValue = z.infer<typeof EnvironmentVariableValue>;
export declare const EnvironmentVariable: z.ZodObject<{
    name: z.ZodString;
    value: z.ZodString;
}, "strip", z.ZodTypeAny, {
    value: string;
    name: string;
}, {
    value: string;
    name: string;
}>;
export declare const EnvironmentVariables: z.ZodArray<z.ZodObject<{
    name: z.ZodString;
    value: z.ZodString;
}, "strip", z.ZodTypeAny, {
    value: string;
    name: string;
}, {
    value: string;
    name: string;
}>, "many">;
export type EnvironmentVariables = z.infer<typeof EnvironmentVariables>;
export declare const EnvironmentVariableWithSecret: z.ZodObject<{
    /** The name of the env var, e.g. `DATABASE_URL` */
    name: z.ZodString;
    /** The value of the env var. If it's a secret, this will be a redacted value, not the real value.  */
    value: z.ZodString;
    /**
     * Whether the env var is a secret or not.
     * When you create env vars you can mark them as secrets.
     *
     * You can't view the value of a secret env var after setting it initially.
     * For a secret env var, the value will be redacted.
     */
    isSecret: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    value: string;
    name: string;
    isSecret: boolean;
}, {
    value: string;
    name: string;
    isSecret: boolean;
}>;
export type EnvironmentVariableWithSecret = z.infer<typeof EnvironmentVariableWithSecret>;
export declare const UpdateMetadataRequestBody: z.ZodObject<{
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>>>;
    operations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"update">;
        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        value: Record<string, unknown>;
        type: "update";
    }, {
        value: Record<string, unknown>;
        type: "update";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"set">;
        key: z.ZodString;
        value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
    }, "strip", z.ZodTypeAny, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    }, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"delete">;
        key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "delete";
        key: string;
    }, {
        type: "delete";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"append">;
        key: z.ZodString;
        value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
    }, "strip", z.ZodTypeAny, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    }, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"remove">;
        key: z.ZodString;
        value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
    }, "strip", z.ZodTypeAny, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    }, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"increment">;
        key: z.ZodString;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "increment";
        key: string;
    }, {
        value: number;
        type: "increment";
        key: string;
    }>]>, "many">>;
    parentOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"update">;
        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        value: Record<string, unknown>;
        type: "update";
    }, {
        value: Record<string, unknown>;
        type: "update";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"set">;
        key: z.ZodString;
        value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
    }, "strip", z.ZodTypeAny, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    }, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"delete">;
        key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "delete";
        key: string;
    }, {
        type: "delete";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"append">;
        key: z.ZodString;
        value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
    }, "strip", z.ZodTypeAny, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    }, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"remove">;
        key: z.ZodString;
        value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
    }, "strip", z.ZodTypeAny, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    }, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"increment">;
        key: z.ZodString;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "increment";
        key: string;
    }, {
        value: number;
        type: "increment";
        key: string;
    }>]>, "many">>;
    rootOperations: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"update">;
        value: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        value: Record<string, unknown>;
        type: "update";
    }, {
        value: Record<string, unknown>;
        type: "update";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"set">;
        key: z.ZodString;
        value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
    }, "strip", z.ZodTypeAny, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    }, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"delete">;
        key: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "delete";
        key: string;
    }, {
        type: "delete";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"append">;
        key: z.ZodString;
        value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
    }, "strip", z.ZodTypeAny, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    }, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"remove">;
        key: z.ZodString;
        value: z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>;
    }, "strip", z.ZodTypeAny, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    }, {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"increment">;
        key: z.ZodString;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "increment";
        key: string;
    }, {
        value: number;
        type: "increment";
        key: string;
    }>]>, "many">>;
}, "strip", z.ZodTypeAny, {
    metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
    operations?: ({
        value: Record<string, unknown>;
        type: "update";
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    } | {
        type: "delete";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    } | {
        value: number;
        type: "increment";
        key: string;
    })[] | undefined;
    parentOperations?: ({
        value: Record<string, unknown>;
        type: "update";
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    } | {
        type: "delete";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    } | {
        value: number;
        type: "increment";
        key: string;
    })[] | undefined;
    rootOperations?: ({
        value: Record<string, unknown>;
        type: "update";
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    } | {
        type: "delete";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    } | {
        value: number;
        type: "increment";
        key: string;
    })[] | undefined;
}, {
    metadata?: Record<string, import("../../schemas/json.js").DeserializedJson> | undefined;
    operations?: ({
        value: Record<string, unknown>;
        type: "update";
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    } | {
        type: "delete";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    } | {
        value: number;
        type: "increment";
        key: string;
    })[] | undefined;
    parentOperations?: ({
        value: Record<string, unknown>;
        type: "update";
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    } | {
        type: "delete";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    } | {
        value: number;
        type: "increment";
        key: string;
    })[] | undefined;
    rootOperations?: ({
        value: Record<string, unknown>;
        type: "update";
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "set";
        key: string;
    } | {
        type: "delete";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "append";
        key: string;
    } | {
        value: import("../../schemas/json.js").DeserializedJson;
        type: "remove";
        key: string;
    } | {
        value: number;
        type: "increment";
        key: string;
    })[] | undefined;
}>;
export type UpdateMetadataRequestBody = z.infer<typeof UpdateMetadataRequestBody>;
export declare const UpdateMetadataResponseBody: z.ZodObject<{
    metadata: z.ZodRecord<z.ZodString, z.ZodType<import("../../schemas/json.js").DeserializedJson, z.ZodTypeDef, import("../../schemas/json.js").DeserializedJson>>;
}, "strip", z.ZodTypeAny, {
    metadata: Record<string, import("../../schemas/json.js").DeserializedJson>;
}, {
    metadata: Record<string, import("../../schemas/json.js").DeserializedJson>;
}>;
export type UpdateMetadataResponseBody = z.infer<typeof UpdateMetadataResponseBody>;
export declare const SubscribeRunRawShape: z.ZodObject<{
    id: z.ZodString;
    taskIdentifier: z.ZodString;
    friendlyId: z.ZodString;
    status: z.ZodString;
    createdAt: z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodDate>;
    updatedAt: z.ZodPipeline<z.ZodEffects<z.ZodString, string, string>, z.ZodDate>;
    startedAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | Date | null | undefined, string | null | undefined>;
    delayUntil: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | Date | null | undefined, string | null | undefined>;
    queuedAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | Date | null | undefined, string | null | undefined>;
    expiredAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | Date | null | undefined, string | null | undefined>;
    completedAt: z.ZodEffects<z.ZodOptional<z.ZodNullable<z.ZodString>>, string | Date | null | undefined, string | null | undefined>;
    idempotencyKey: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    number: z.ZodDefault<z.ZodNumber>;
    isTest: z.ZodDefault<z.ZodBoolean>;
    usageDurationMs: z.ZodDefault<z.ZodNumber>;
    costInCents: z.ZodDefault<z.ZodNumber>;
    baseCostInCents: z.ZodDefault<z.ZodNumber>;
    ttl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    payload: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    payloadType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    metadata: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    metadataType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    output: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    outputType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    runTags: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>>;
    error: z.ZodOptional<z.ZodNullable<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"BUILT_IN_ERROR">;
        name: z.ZodString;
        message: z.ZodString;
        stackTrace: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    }, {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"CUSTOM_ERROR">;
        raw: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "CUSTOM_ERROR";
        raw: string;
    }, {
        type: "CUSTOM_ERROR";
        raw: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"STRING_ERROR">;
        raw: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "STRING_ERROR";
        raw: string;
    }, {
        type: "STRING_ERROR";
        raw: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"INTERNAL_ERROR">;
        code: z.ZodEnum<["COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "COULD_NOT_IMPORT_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_PROCESS_SIGSEGV", "TASK_PROCESS_SIGTERM", "TASK_PROCESS_OOM_KILLED", "TASK_PROCESS_MAYBE_OOM_KILLED", "TASK_RUN_CANCELLED", "TASK_INPUT_ERROR", "TASK_OUTPUT_ERROR", "TASK_MIDDLEWARE_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_HEARTBEAT_TIMEOUT", "TASK_RUN_CRASHED", "MAX_DURATION_EXCEEDED", "DISK_SPACE_EXCEEDED", "POD_EVICTED", "POD_UNKNOWN_ERROR", "TASK_HAS_N0_EXECUTION_SNAPSHOT", "TASK_DEQUEUED_INVALID_STATE", "TASK_DEQUEUED_QUEUE_NOT_FOUND", "TASK_RUN_DEQUEUED_MAX_RETRIES", "TASK_RUN_STALLED_EXECUTING", "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS", "OUTDATED_SDK_VERSION", "TASK_DID_CONCURRENT_WAIT", "RECURSIVE_WAIT_DEADLOCK"]>;
        message: z.ZodOptional<z.ZodString>;
        stackTrace: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    }, {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    }>]>>>;
}, "strip", z.ZodTypeAny, {
    number: number;
    status: string;
    id: string;
    isTest: boolean;
    createdAt: Date;
    baseCostInCents: number;
    costInCents: number;
    taskIdentifier: string;
    updatedAt: Date;
    friendlyId: string;
    usageDurationMs: number;
    runTags: string[] | null;
    payload?: string | null | undefined;
    error?: {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    } | {
        type: "CUSTOM_ERROR";
        raw: string;
    } | {
        type: "STRING_ERROR";
        raw: string;
    } | {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    } | null | undefined;
    metadata?: string | null | undefined;
    payloadType?: string | null | undefined;
    startedAt?: string | Date | null | undefined;
    idempotencyKey?: string | null | undefined;
    output?: string | null | undefined;
    outputType?: string | null | undefined;
    ttl?: string | null | undefined;
    expiredAt?: string | Date | null | undefined;
    completedAt?: string | Date | null | undefined;
    metadataType?: string | null | undefined;
    delayUntil?: string | Date | null | undefined;
    queuedAt?: string | Date | null | undefined;
}, {
    status: string;
    id: string;
    createdAt: string;
    taskIdentifier: string;
    updatedAt: string;
    friendlyId: string;
    number?: number | undefined;
    payload?: string | null | undefined;
    error?: {
        message: string;
        type: "BUILT_IN_ERROR";
        name: string;
        stackTrace: string;
    } | {
        type: "CUSTOM_ERROR";
        raw: string;
    } | {
        type: "STRING_ERROR";
        raw: string;
    } | {
        code: "COULD_NOT_FIND_EXECUTOR" | "COULD_NOT_FIND_TASK" | "COULD_NOT_IMPORT_TASK" | "CONFIGURED_INCORRECTLY" | "TASK_ALREADY_RUNNING" | "TASK_EXECUTION_FAILED" | "TASK_EXECUTION_ABORTED" | "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE" | "TASK_PROCESS_SIGKILL_TIMEOUT" | "TASK_PROCESS_SIGSEGV" | "TASK_PROCESS_SIGTERM" | "TASK_PROCESS_OOM_KILLED" | "TASK_PROCESS_MAYBE_OOM_KILLED" | "TASK_RUN_CANCELLED" | "TASK_INPUT_ERROR" | "TASK_OUTPUT_ERROR" | "TASK_MIDDLEWARE_ERROR" | "HANDLE_ERROR_ERROR" | "GRACEFUL_EXIT_TIMEOUT" | "TASK_RUN_HEARTBEAT_TIMEOUT" | "TASK_RUN_CRASHED" | "MAX_DURATION_EXCEEDED" | "DISK_SPACE_EXCEEDED" | "POD_EVICTED" | "POD_UNKNOWN_ERROR" | "TASK_HAS_N0_EXECUTION_SNAPSHOT" | "TASK_DEQUEUED_INVALID_STATE" | "TASK_DEQUEUED_QUEUE_NOT_FOUND" | "TASK_RUN_DEQUEUED_MAX_RETRIES" | "TASK_RUN_STALLED_EXECUTING" | "TASK_RUN_STALLED_EXECUTING_WITH_WAITPOINTS" | "OUTDATED_SDK_VERSION" | "TASK_DID_CONCURRENT_WAIT" | "RECURSIVE_WAIT_DEADLOCK";
        type: "INTERNAL_ERROR";
        message?: string | undefined;
        stackTrace?: string | undefined;
    } | null | undefined;
    metadata?: string | null | undefined;
    payloadType?: string | null | undefined;
    isTest?: boolean | undefined;
    startedAt?: string | null | undefined;
    idempotencyKey?: string | null | undefined;
    baseCostInCents?: number | undefined;
    costInCents?: number | undefined;
    output?: string | null | undefined;
    outputType?: string | null | undefined;
    ttl?: string | null | undefined;
    expiredAt?: string | null | undefined;
    completedAt?: string | null | undefined;
    metadataType?: string | null | undefined;
    delayUntil?: string | null | undefined;
    queuedAt?: string | null | undefined;
    usageDurationMs?: number | undefined;
    runTags?: string[] | null | undefined;
}>;
export type SubscribeRunRawShape = z.infer<typeof SubscribeRunRawShape>;
export declare const BatchStatus: z.ZodEnum<["PENDING", "COMPLETED"]>;
export type BatchStatus = z.infer<typeof BatchStatus>;
export declare const RetrieveBatchResponse: z.ZodObject<{
    id: z.ZodString;
    status: z.ZodEnum<["PENDING", "COMPLETED"]>;
    idempotencyKey: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
    runCount: z.ZodNumber;
    runs: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    status: "COMPLETED" | "PENDING";
    id: string;
    createdAt: Date;
    updatedAt: Date;
    runs: string[];
    runCount: number;
    idempotencyKey?: string | undefined;
}, {
    status: "COMPLETED" | "PENDING";
    id: string;
    createdAt: Date;
    updatedAt: Date;
    runs: string[];
    runCount: number;
    idempotencyKey?: string | undefined;
}>;
export type RetrieveBatchResponse = z.infer<typeof RetrieveBatchResponse>;
export declare const RetrieveBatchV2Response: z.ZodObject<{
    id: z.ZodString;
    status: z.ZodEnum<["PENDING", "COMPLETED"]>;
    idempotencyKey: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
    runCount: z.ZodNumber;
    runs: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    status: "COMPLETED" | "PENDING";
    id: string;
    createdAt: Date;
    updatedAt: Date;
    runs: string[];
    runCount: number;
    idempotencyKey?: string | undefined;
}, {
    status: "COMPLETED" | "PENDING";
    id: string;
    createdAt: Date;
    updatedAt: Date;
    runs: string[];
    runCount: number;
    idempotencyKey?: string | undefined;
}>;
export type RetrieveBatchV2Response = z.infer<typeof RetrieveBatchV2Response>;
export declare const SubscribeRealtimeStreamChunkRawShape: z.ZodObject<{
    id: z.ZodString;
    runId: z.ZodString;
    sequence: z.ZodNumber;
    key: z.ZodString;
    value: z.ZodString;
    createdAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    value: string;
    key: string;
    id: string;
    createdAt: Date;
    runId: string;
    sequence: number;
}, {
    value: string;
    key: string;
    id: string;
    createdAt: Date;
    runId: string;
    sequence: number;
}>;
export type SubscribeRealtimeStreamChunkRawShape = z.infer<typeof SubscribeRealtimeStreamChunkRawShape>;
export declare const TimePeriod: z.ZodUnion<[z.ZodString, z.ZodDate]>;
export type TimePeriod = z.infer<typeof TimePeriod>;
export declare const CreateWaitpointTokenRequestBody: z.ZodObject<{
    /**
     * An optional idempotency key for the waitpoint.
     * If you use the same key twice (and the key hasn't expired), you will get the original waitpoint back.
     *
     * Note: This waitpoint may already be complete, in which case when you wait for it, it will immediately continue.
     */
    idempotencyKey: z.ZodOptional<z.ZodString>;
    /**
     * When set, this means the passed in idempotency key will expire after this time.
     * This means after that time if you pass the same idempotency key again, you will get a new waitpoint.
     */
    idempotencyKeyTTL: z.ZodOptional<z.ZodString>;
    /** The resume token will timeout after this time.
     * If you are waiting for the token in a run, the token will return a result where `ok` is false.
     *
     * You can pass a `Date` object, or a string in this format: "30s", "1m", "2h", "3d", "4w".
     */
    timeout: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodDate]>>;
    /**
     * Tags to attach to the waitpoint. Tags can be used to filter waitpoints in the dashboard.
     *
     * You can set up to 10 tags per waitpoint, they must be less than 128 characters each.
     *
     * We recommend prefixing tags with a namespace using an underscore or colon, like `user_1234567` or `org:9876543`.
     *
     * @example
     *
     * ```ts
     * await wait.createToken({ tags: ["user:1234567", "org:9876543"] });
     * ```
     */
    tags: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
}, "strip", z.ZodTypeAny, {
    tags?: string | string[] | undefined;
    idempotencyKey?: string | undefined;
    idempotencyKeyTTL?: string | undefined;
    timeout?: string | Date | undefined;
}, {
    tags?: string | string[] | undefined;
    idempotencyKey?: string | undefined;
    idempotencyKeyTTL?: string | undefined;
    timeout?: string | Date | undefined;
}>;
export type CreateWaitpointTokenRequestBody = z.infer<typeof CreateWaitpointTokenRequestBody>;
export declare const CreateWaitpointTokenResponseBody: z.ZodObject<{
    id: z.ZodString;
    isCached: z.ZodBoolean;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    url: string;
    id: string;
    isCached: boolean;
}, {
    url: string;
    id: string;
    isCached: boolean;
}>;
export type CreateWaitpointTokenResponseBody = z.infer<typeof CreateWaitpointTokenResponseBody>;
export declare const waitpointTokenStatuses: readonly ["WAITING", "COMPLETED", "TIMED_OUT"];
export declare const WaitpointTokenStatus: z.ZodEnum<["WAITING", "COMPLETED", "TIMED_OUT"]>;
export type WaitpointTokenStatus = z.infer<typeof WaitpointTokenStatus>;
export declare const WaitpointTokenItem: z.ZodObject<{
    id: z.ZodString;
    /** If you make a POST request to this URL, it will complete the waitpoint. */
    url: z.ZodString;
    status: z.ZodEnum<["WAITING", "COMPLETED", "TIMED_OUT"]>;
    completedAt: z.ZodOptional<z.ZodDate>;
    completedAfter: z.ZodOptional<z.ZodDate>;
    timeoutAt: z.ZodOptional<z.ZodDate>;
    idempotencyKey: z.ZodOptional<z.ZodString>;
    idempotencyKeyExpiresAt: z.ZodOptional<z.ZodDate>;
    tags: z.ZodArray<z.ZodString, "many">;
    createdAt: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    status: "WAITING" | "COMPLETED" | "TIMED_OUT";
    url: string;
    id: string;
    tags: string[];
    createdAt: Date;
    idempotencyKey?: string | undefined;
    completedAt?: Date | undefined;
    completedAfter?: Date | undefined;
    timeoutAt?: Date | undefined;
    idempotencyKeyExpiresAt?: Date | undefined;
}, {
    status: "WAITING" | "COMPLETED" | "TIMED_OUT";
    url: string;
    id: string;
    tags: string[];
    createdAt: Date;
    idempotencyKey?: string | undefined;
    completedAt?: Date | undefined;
    completedAfter?: Date | undefined;
    timeoutAt?: Date | undefined;
    idempotencyKeyExpiresAt?: Date | undefined;
}>;
export type WaitpointTokenItem = z.infer<typeof WaitpointTokenItem>;
export declare const WaitpointListTokenItem: z.ZodObject<Omit<{
    id: z.ZodString;
    /** If you make a POST request to this URL, it will complete the waitpoint. */
    url: z.ZodString;
    status: z.ZodEnum<["WAITING", "COMPLETED", "TIMED_OUT"]>;
    completedAt: z.ZodOptional<z.ZodDate>;
    completedAfter: z.ZodOptional<z.ZodDate>;
    timeoutAt: z.ZodOptional<z.ZodDate>;
    idempotencyKey: z.ZodOptional<z.ZodString>;
    idempotencyKeyExpiresAt: z.ZodOptional<z.ZodDate>;
    tags: z.ZodArray<z.ZodString, "many">;
    createdAt: z.ZodDate;
}, "completedAfter">, "strip", z.ZodTypeAny, {
    status: "WAITING" | "COMPLETED" | "TIMED_OUT";
    url: string;
    id: string;
    tags: string[];
    createdAt: Date;
    idempotencyKey?: string | undefined;
    completedAt?: Date | undefined;
    timeoutAt?: Date | undefined;
    idempotencyKeyExpiresAt?: Date | undefined;
}, {
    status: "WAITING" | "COMPLETED" | "TIMED_OUT";
    url: string;
    id: string;
    tags: string[];
    createdAt: Date;
    idempotencyKey?: string | undefined;
    completedAt?: Date | undefined;
    timeoutAt?: Date | undefined;
    idempotencyKeyExpiresAt?: Date | undefined;
}>;
export type WaitpointListTokenItem = z.infer<typeof WaitpointListTokenItem>;
export declare const WaitpointRetrieveTokenResponse: z.ZodIntersection<z.ZodObject<Omit<{
    id: z.ZodString;
    /** If you make a POST request to this URL, it will complete the waitpoint. */
    url: z.ZodString;
    status: z.ZodEnum<["WAITING", "COMPLETED", "TIMED_OUT"]>;
    completedAt: z.ZodOptional<z.ZodDate>;
    completedAfter: z.ZodOptional<z.ZodDate>;
    timeoutAt: z.ZodOptional<z.ZodDate>;
    idempotencyKey: z.ZodOptional<z.ZodString>;
    idempotencyKeyExpiresAt: z.ZodOptional<z.ZodDate>;
    tags: z.ZodArray<z.ZodString, "many">;
    createdAt: z.ZodDate;
}, "completedAfter">, "strip", z.ZodTypeAny, {
    status: "WAITING" | "COMPLETED" | "TIMED_OUT";
    url: string;
    id: string;
    tags: string[];
    createdAt: Date;
    idempotencyKey?: string | undefined;
    completedAt?: Date | undefined;
    timeoutAt?: Date | undefined;
    idempotencyKeyExpiresAt?: Date | undefined;
}, {
    status: "WAITING" | "COMPLETED" | "TIMED_OUT";
    url: string;
    id: string;
    tags: string[];
    createdAt: Date;
    idempotencyKey?: string | undefined;
    completedAt?: Date | undefined;
    timeoutAt?: Date | undefined;
    idempotencyKeyExpiresAt?: Date | undefined;
}>, z.ZodObject<{
    output: z.ZodOptional<z.ZodString>;
    outputType: z.ZodOptional<z.ZodString>;
    outputIsError: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    output?: string | undefined;
    outputType?: string | undefined;
    outputIsError?: boolean | undefined;
}, {
    output?: string | undefined;
    outputType?: string | undefined;
    outputIsError?: boolean | undefined;
}>>;
export type WaitpointRetrieveTokenResponse = z.infer<typeof WaitpointRetrieveTokenResponse>;
export declare const CompleteWaitpointTokenRequestBody: z.ZodObject<{
    data: z.ZodOptional<z.ZodNullable<z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    data?: any;
}, {
    data?: any;
}>;
export type CompleteWaitpointTokenRequestBody = z.infer<typeof CompleteWaitpointTokenRequestBody>;
export declare const CompleteWaitpointTokenResponseBody: z.ZodObject<{
    success: z.ZodLiteral<true>;
}, "strip", z.ZodTypeAny, {
    success: true;
}, {
    success: true;
}>;
export type CompleteWaitpointTokenResponseBody = z.infer<typeof CompleteWaitpointTokenResponseBody>;
export declare const WaitForWaitpointTokenResponseBody: z.ZodObject<{
    success: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    success: boolean;
}, {
    success: boolean;
}>;
export type WaitForWaitpointTokenResponseBody = z.infer<typeof WaitForWaitpointTokenResponseBody>;
export declare const WaitForDurationRequestBody: z.ZodObject<{
    /**
     * An optional idempotency key for the waitpoint.
     * If you use the same key twice (and the key hasn't expired), you will get the original waitpoint back.
     *
     * Note: This waitpoint may already be complete, in which case when you wait for it, it will immediately continue.
     */
    idempotencyKey: z.ZodOptional<z.ZodString>;
    /**
     * When set, this means the passed in idempotency key will expire after this time.
     * This means after that time if you pass the same idempotency key again, you will get a new waitpoint.
     */
    idempotencyKeyTTL: z.ZodOptional<z.ZodString>;
    /**
     * The date that the waitpoint will complete.
     */
    date: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    date: Date;
    idempotencyKey?: string | undefined;
    idempotencyKeyTTL?: string | undefined;
}, {
    date: Date;
    idempotencyKey?: string | undefined;
    idempotencyKeyTTL?: string | undefined;
}>;
export type WaitForDurationRequestBody = z.infer<typeof WaitForDurationRequestBody>;
export declare const WaitForDurationResponseBody: z.ZodObject<{
    /**
        If you pass an idempotencyKey, you may actually not need to wait.
        Use this date to determine when to continue.
    */
    waitUntil: z.ZodDate;
    waitpoint: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    waitUntil: Date;
    waitpoint: {
        id: string;
    };
}, {
    waitUntil: Date;
    waitpoint: {
        id: string;
    };
}>;
export type WaitForDurationResponseBody = z.infer<typeof WaitForDurationResponseBody>;
export declare function isWaitpointOutputTimeout(output: string): boolean;
export declare function timeoutError(timeout: Date): {
    code: string;
    message: string;
};
