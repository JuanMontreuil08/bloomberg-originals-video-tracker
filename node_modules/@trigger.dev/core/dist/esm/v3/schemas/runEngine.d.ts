import { z } from "zod";
import { RuntimeEnvironmentType } from "./common.js";
import type * as DB_TYPES from "@trigger.dev/database";
export declare const TaskRunExecutionStatus: {
    RUN_CREATED: "RUN_CREATED";
    QUEUED: "QUEUED";
    QUEUED_EXECUTING: "QUEUED_EXECUTING";
    PENDING_EXECUTING: "PENDING_EXECUTING";
    EXECUTING: "EXECUTING";
    EXECUTING_WITH_WAITPOINTS: "EXECUTING_WITH_WAITPOINTS";
    SUSPENDED: "SUSPENDED";
    PENDING_CANCEL: "PENDING_CANCEL";
    FINISHED: "FINISHED";
};
export type TaskRunExecutionStatus = (typeof TaskRunExecutionStatus)[keyof typeof TaskRunExecutionStatus];
export declare const TaskRunStatus: {
    DELAYED: "DELAYED";
    PENDING: "PENDING";
    PENDING_VERSION: "PENDING_VERSION";
    WAITING_FOR_DEPLOY: "WAITING_FOR_DEPLOY";
    DEQUEUED: "DEQUEUED";
    EXECUTING: "EXECUTING";
    WAITING_TO_RESUME: "WAITING_TO_RESUME";
    RETRYING_AFTER_FAILURE: "RETRYING_AFTER_FAILURE";
    PAUSED: "PAUSED";
    CANCELED: "CANCELED";
    INTERRUPTED: "INTERRUPTED";
    COMPLETED_SUCCESSFULLY: "COMPLETED_SUCCESSFULLY";
    COMPLETED_WITH_ERRORS: "COMPLETED_WITH_ERRORS";
    SYSTEM_FAILURE: "SYSTEM_FAILURE";
    CRASHED: "CRASHED";
    EXPIRED: "EXPIRED";
    TIMED_OUT: "TIMED_OUT";
};
export type TaskRunStatus = (typeof TaskRunStatus)[keyof typeof TaskRunStatus];
export declare const WaitpointType: {
    RUN: "RUN";
    DATETIME: "DATETIME";
    MANUAL: "MANUAL";
    BATCH: "BATCH";
};
export type WaitpointType = (typeof WaitpointType)[keyof typeof WaitpointType];
export declare const WaitpointStatus: z.ZodEnum<[DB_TYPES.$Enums.WaitpointStatus]>;
export type WaitpointStatus = z.infer<typeof WaitpointStatus>;
export type TaskEventEnvironment = {
    id: string;
    type: RuntimeEnvironmentType;
    organizationId: string;
    projectId: string;
    project: {
        externalRef: string;
    };
};
export declare const CompletedWaitpoint: z.ZodObject<{
    id: z.ZodString;
    index: z.ZodOptional<z.ZodNumber>;
    friendlyId: z.ZodString;
    type: z.ZodEnum<[WaitpointType]>;
    completedAt: z.ZodDate;
    idempotencyKey: z.ZodOptional<z.ZodString>;
    /** For type === "RUN" */
    completedByTaskRun: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        /** If the run has an associated batch */
        batch: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            friendlyId: string;
        }, {
            id: string;
            friendlyId: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        friendlyId: string;
        batch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    }, {
        id: string;
        friendlyId: string;
        batch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    }>>;
    /** For type === "DATETIME" */
    completedAfter: z.ZodOptional<z.ZodDate>;
    /** For type === "BATCH" */
    completedByBatch: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        friendlyId: string;
    }, {
        id: string;
        friendlyId: string;
    }>>;
    output: z.ZodOptional<z.ZodString>;
    outputType: z.ZodOptional<z.ZodString>;
    outputIsError: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    type: WaitpointType;
    id: string;
    friendlyId: string;
    completedAt: Date;
    outputIsError: boolean;
    idempotencyKey?: string | undefined;
    output?: string | undefined;
    outputType?: string | undefined;
    index?: number | undefined;
    completedByTaskRun?: {
        id: string;
        friendlyId: string;
        batch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    } | undefined;
    completedAfter?: Date | undefined;
    completedByBatch?: {
        id: string;
        friendlyId: string;
    } | undefined;
}, {
    type: WaitpointType;
    id: string;
    friendlyId: string;
    completedAt: Date;
    outputIsError: boolean;
    idempotencyKey?: string | undefined;
    output?: string | undefined;
    outputType?: string | undefined;
    index?: number | undefined;
    completedByTaskRun?: {
        id: string;
        friendlyId: string;
        batch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    } | undefined;
    completedAfter?: Date | undefined;
    completedByBatch?: {
        id: string;
        friendlyId: string;
    } | undefined;
}>;
export type CompletedWaitpoint = z.infer<typeof CompletedWaitpoint>;
export declare const ExecutionResult: z.ZodObject<{
    snapshot: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        executionStatus: z.ZodEnum<[TaskRunExecutionStatus]>;
        description: z.ZodString;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    }, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    }>;
    run: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        status: z.ZodEnum<[TaskRunStatus]>;
        attemptNumber: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    }, {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    run: {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    };
}, {
    run: {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    };
}>;
export type ExecutionResult = z.infer<typeof ExecutionResult>;
/** The response to the Worker when starting an attempt */
export declare const StartRunAttemptResult: z.ZodIntersection<z.ZodObject<{
    snapshot: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        executionStatus: z.ZodEnum<[TaskRunExecutionStatus]>;
        description: z.ZodString;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    }, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    }>;
    run: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        status: z.ZodEnum<[TaskRunStatus]>;
        attemptNumber: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    }, {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    run: {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    };
}, {
    run: {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    };
}>, z.ZodObject<{
    execution: z.ZodObject<{
        task: z.ZodObject<{
            id: z.ZodString;
            filePath: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            id: z.ZodString;
            filePath: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            id: z.ZodString;
            filePath: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
        queue: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
        }, {
            name: string;
            id: string;
        }>;
        environment: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
            branchName: z.ZodOptional<z.ZodString>;
            git: z.ZodOptional<z.ZodObject<{
                provider: z.ZodOptional<z.ZodString>;
                source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                ghUsername: z.ZodOptional<z.ZodString>;
                ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                commitAuthorName: z.ZodOptional<z.ZodString>;
                commitMessage: z.ZodOptional<z.ZodString>;
                commitRef: z.ZodOptional<z.ZodString>;
                commitSha: z.ZodOptional<z.ZodString>;
                dirty: z.ZodOptional<z.ZodBoolean>;
                remoteUrl: z.ZodOptional<z.ZodString>;
                pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                pullRequestTitle: z.ZodOptional<z.ZodString>;
                pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
            }, "strip", z.ZodTypeAny, {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            }, {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        }, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        }>;
        organization: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
        }, {
            name: string;
            id: string;
            slug: string;
        }>;
        project: z.ZodObject<{
            id: z.ZodString;
            ref: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }>;
        machine: z.ZodObject<{
            name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
            cpu: z.ZodNumber;
            memory: z.ZodNumber;
            centsPerMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        }, {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        }>;
        batch: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>>;
        deployment: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            shortCode: z.ZodString;
            version: z.ZodString;
            runtime: z.ZodString;
            runtimeVersion: z.ZodString;
            git: z.ZodOptional<z.ZodObject<{
                provider: z.ZodOptional<z.ZodString>;
                source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                ghUsername: z.ZodOptional<z.ZodString>;
                ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                commitAuthorName: z.ZodOptional<z.ZodString>;
                commitMessage: z.ZodOptional<z.ZodString>;
                commitRef: z.ZodOptional<z.ZodString>;
                commitSha: z.ZodOptional<z.ZodString>;
                dirty: z.ZodOptional<z.ZodBoolean>;
                remoteUrl: z.ZodOptional<z.ZodString>;
                pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                pullRequestTitle: z.ZodOptional<z.ZodString>;
                pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
            }, "strip", z.ZodTypeAny, {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            }, {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            version: string;
            shortCode: string;
            runtime: string;
            runtimeVersion: string;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        }, {
            id: string;
            version: string;
            shortCode: string;
            runtime: string;
            runtimeVersion: string;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        }>>;
        attempt: z.ZodObject<{
            number: z.ZodNumber;
            startedAt: z.ZodDate;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            number: z.ZodNumber;
            startedAt: z.ZodDate;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            number: z.ZodNumber;
            startedAt: z.ZodDate;
        }, z.ZodTypeAny, "passthrough">>;
        run: z.ZodIntersection<z.ZodObject<{
            id: z.ZodString;
            payload: z.ZodString;
            payloadType: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
            isTest: z.ZodDefault<z.ZodBoolean>;
            createdAt: z.ZodDate;
            startedAt: z.ZodDefault<z.ZodDate>;
            idempotencyKey: z.ZodOptional<z.ZodString>;
            maxAttempts: z.ZodOptional<z.ZodNumber>;
            version: z.ZodOptional<z.ZodString>;
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
            maxDuration: z.ZodOptional<z.ZodNumber>;
            priority: z.ZodOptional<z.ZodNumber>;
            baseCostInCents: z.ZodOptional<z.ZodNumber>;
            parentTaskRunId: z.ZodOptional<z.ZodString>;
            rootTaskRunId: z.ZodOptional<z.ZodString>;
            durationMs: z.ZodOptional<z.ZodNumber>;
            costInCents: z.ZodOptional<z.ZodNumber>;
            region: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            startedAt: Date;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            baseCostInCents?: number | undefined;
            parentTaskRunId?: string | undefined;
            rootTaskRunId?: string | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            region?: string | undefined;
        }, {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            createdAt: Date;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            baseCostInCents?: number | undefined;
            parentTaskRunId?: string | undefined;
            rootTaskRunId?: string | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            region?: string | undefined;
        }>, z.ZodObject<{
            traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
        }, "strip", z.ZodTypeAny, {
            traceContext?: Record<string, unknown> | undefined;
        }, {
            traceContext?: Record<string, unknown> | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        task: {
            id: string;
            filePath: string;
        } & {
            [k: string]: unknown;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        attempt: {
            number: number;
            startedAt: Date;
        } & {
            [k: string]: unknown;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            startedAt: Date;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            baseCostInCents?: number | undefined;
            parentTaskRunId?: string | undefined;
            rootTaskRunId?: string | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            region?: string | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        batch?: {
            id: string;
        } | undefined;
        deployment?: {
            id: string;
            version: string;
            shortCode: string;
            runtime: string;
            runtimeVersion: string;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        } | undefined;
    }, {
        task: {
            id: string;
            filePath: string;
        } & {
            [k: string]: unknown;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        attempt: {
            number: number;
            startedAt: Date;
        } & {
            [k: string]: unknown;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            createdAt: Date;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            baseCostInCents?: number | undefined;
            parentTaskRunId?: string | undefined;
            rootTaskRunId?: string | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            region?: string | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        batch?: {
            id: string;
        } | undefined;
        deployment?: {
            id: string;
            version: string;
            shortCode: string;
            runtime: string;
            runtimeVersion: string;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    execution: {
        task: {
            id: string;
            filePath: string;
        } & {
            [k: string]: unknown;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        attempt: {
            number: number;
            startedAt: Date;
        } & {
            [k: string]: unknown;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            startedAt: Date;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            baseCostInCents?: number | undefined;
            parentTaskRunId?: string | undefined;
            rootTaskRunId?: string | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            region?: string | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        batch?: {
            id: string;
        } | undefined;
        deployment?: {
            id: string;
            version: string;
            shortCode: string;
            runtime: string;
            runtimeVersion: string;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        } | undefined;
    };
}, {
    execution: {
        task: {
            id: string;
            filePath: string;
        } & {
            [k: string]: unknown;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        attempt: {
            number: number;
            startedAt: Date;
        } & {
            [k: string]: unknown;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            createdAt: Date;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            baseCostInCents?: number | undefined;
            parentTaskRunId?: string | undefined;
            rootTaskRunId?: string | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            region?: string | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        batch?: {
            id: string;
        } | undefined;
        deployment?: {
            id: string;
            version: string;
            shortCode: string;
            runtime: string;
            runtimeVersion: string;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        } | undefined;
    };
}>>;
export type StartRunAttemptResult = z.infer<typeof StartRunAttemptResult>;
/** The response to the Worker when completing an attempt */
declare const CompleteAttemptStatus: z.ZodEnum<["RUN_FINISHED", "RUN_PENDING_CANCEL", "RETRY_QUEUED", "RETRY_IMMEDIATELY"]>;
export type CompleteAttemptStatus = z.infer<typeof CompleteAttemptStatus>;
export declare const CompleteRunAttemptResult: z.ZodIntersection<z.ZodObject<{
    attemptStatus: z.ZodEnum<["RUN_FINISHED", "RUN_PENDING_CANCEL", "RETRY_QUEUED", "RETRY_IMMEDIATELY"]>;
}, "strip", z.ZodTypeAny, {
    attemptStatus: "RUN_FINISHED" | "RUN_PENDING_CANCEL" | "RETRY_QUEUED" | "RETRY_IMMEDIATELY";
}, {
    attemptStatus: "RUN_FINISHED" | "RUN_PENDING_CANCEL" | "RETRY_QUEUED" | "RETRY_IMMEDIATELY";
}>, z.ZodObject<{
    snapshot: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        executionStatus: z.ZodEnum<[TaskRunExecutionStatus]>;
        description: z.ZodString;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    }, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    }>;
    run: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        status: z.ZodEnum<[TaskRunStatus]>;
        attemptNumber: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    }, {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    run: {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    };
}, {
    run: {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    };
}>>;
export type CompleteRunAttemptResult = z.infer<typeof CompleteRunAttemptResult>;
export declare const CheckpointTypeEnum: {
    DOCKER: "DOCKER";
    KUBERNETES: "KUBERNETES";
};
export type CheckpointTypeEnum = (typeof CheckpointTypeEnum)[keyof typeof CheckpointTypeEnum];
export declare const CheckpointType: z.ZodEnum<[CheckpointTypeEnum]>;
export type CheckpointType = z.infer<typeof CheckpointType>;
export declare const CheckpointInput: z.ZodObject<{
    type: z.ZodEnum<[CheckpointTypeEnum]>;
    location: z.ZodString;
    imageRef: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    type: CheckpointTypeEnum;
    location: string;
    imageRef?: string | null | undefined;
    reason?: string | null | undefined;
}, {
    type: CheckpointTypeEnum;
    location: string;
    imageRef?: string | null | undefined;
    reason?: string | null | undefined;
}>;
export type CheckpointInput = z.infer<typeof CheckpointInput>;
export declare const TaskRunCheckpoint: z.ZodObject<{
    type: z.ZodEnum<[CheckpointTypeEnum]>;
    location: z.ZodString;
    imageRef: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
} & {
    id: z.ZodString;
    friendlyId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: CheckpointTypeEnum;
    id: string;
    friendlyId: string;
    location: string;
    imageRef?: string | null | undefined;
    reason?: string | null | undefined;
}, {
    type: CheckpointTypeEnum;
    id: string;
    friendlyId: string;
    location: string;
    imageRef?: string | null | undefined;
    reason?: string | null | undefined;
}>;
export type TaskRunCheckpoint = z.infer<typeof TaskRunCheckpoint>;
/** The response when a Worker asks for the latest execution state */
export declare const RunExecutionData: z.ZodObject<{
    version: z.ZodLiteral<"1">;
    snapshot: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        executionStatus: z.ZodEnum<[TaskRunExecutionStatus]>;
        description: z.ZodString;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    }, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    }>;
    run: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        status: z.ZodEnum<[TaskRunStatus]>;
        attemptNumber: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    }, {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    }>;
    batch: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        friendlyId: string;
    }, {
        id: string;
        friendlyId: string;
    }>>;
    checkpoint: z.ZodOptional<z.ZodObject<{
        type: z.ZodEnum<[CheckpointTypeEnum]>;
        location: z.ZodString;
        imageRef: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    } & {
        id: z.ZodString;
        friendlyId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: CheckpointTypeEnum;
        id: string;
        friendlyId: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    }, {
        type: CheckpointTypeEnum;
        id: string;
        friendlyId: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    }>>;
    completedWaitpoints: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        index: z.ZodOptional<z.ZodNumber>;
        friendlyId: z.ZodString;
        type: z.ZodEnum<[WaitpointType]>;
        completedAt: z.ZodDate;
        idempotencyKey: z.ZodOptional<z.ZodString>;
        /** For type === "RUN" */
        completedByTaskRun: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
            /** If the run has an associated batch */
            batch: z.ZodOptional<z.ZodObject<{
                id: z.ZodString;
                friendlyId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                friendlyId: string;
            }, {
                id: string;
                friendlyId: string;
            }>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }, {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }>>;
        /** For type === "DATETIME" */
        completedAfter: z.ZodOptional<z.ZodDate>;
        /** For type === "BATCH" */
        completedByBatch: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            friendlyId: string;
        }, {
            id: string;
            friendlyId: string;
        }>>;
        output: z.ZodOptional<z.ZodString>;
        outputType: z.ZodOptional<z.ZodString>;
        outputIsError: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        type: WaitpointType;
        id: string;
        friendlyId: string;
        completedAt: Date;
        outputIsError: boolean;
        idempotencyKey?: string | undefined;
        output?: string | undefined;
        outputType?: string | undefined;
        index?: number | undefined;
        completedByTaskRun?: {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        } | undefined;
        completedAfter?: Date | undefined;
        completedByBatch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    }, {
        type: WaitpointType;
        id: string;
        friendlyId: string;
        completedAt: Date;
        outputIsError: boolean;
        idempotencyKey?: string | undefined;
        output?: string | undefined;
        outputType?: string | undefined;
        index?: number | undefined;
        completedByTaskRun?: {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        } | undefined;
        completedAfter?: Date | undefined;
        completedByBatch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    version: "1";
    run: {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    };
    completedWaitpoints: {
        type: WaitpointType;
        id: string;
        friendlyId: string;
        completedAt: Date;
        outputIsError: boolean;
        idempotencyKey?: string | undefined;
        output?: string | undefined;
        outputType?: string | undefined;
        index?: number | undefined;
        completedByTaskRun?: {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        } | undefined;
        completedAfter?: Date | undefined;
        completedByBatch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    }[];
    batch?: {
        id: string;
        friendlyId: string;
    } | undefined;
    checkpoint?: {
        type: CheckpointTypeEnum;
        id: string;
        friendlyId: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    } | undefined;
}, {
    version: "1";
    run: {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    };
    completedWaitpoints: {
        type: WaitpointType;
        id: string;
        friendlyId: string;
        completedAt: Date;
        outputIsError: boolean;
        idempotencyKey?: string | undefined;
        output?: string | undefined;
        outputType?: string | undefined;
        index?: number | undefined;
        completedByTaskRun?: {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        } | undefined;
        completedAfter?: Date | undefined;
        completedByBatch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    }[];
    batch?: {
        id: string;
        friendlyId: string;
    } | undefined;
    checkpoint?: {
        type: CheckpointTypeEnum;
        id: string;
        friendlyId: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    } | undefined;
}>;
export type RunExecutionData = z.infer<typeof RunExecutionData>;
export declare const CreateCheckpointResult: z.ZodDiscriminatedUnion<"ok", [z.ZodObject<{
    ok: z.ZodLiteral<true>;
    checkpoint: z.ZodObject<{
        type: z.ZodEnum<[CheckpointTypeEnum]>;
        location: z.ZodString;
        imageRef: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    } & {
        id: z.ZodString;
        friendlyId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: CheckpointTypeEnum;
        id: string;
        friendlyId: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    }, {
        type: CheckpointTypeEnum;
        id: string;
        friendlyId: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    }>;
} & {
    snapshot: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        executionStatus: z.ZodEnum<[TaskRunExecutionStatus]>;
        description: z.ZodString;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    }, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    }>;
    run: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        status: z.ZodEnum<[TaskRunStatus]>;
        attemptNumber: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    }, {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    ok: true;
    run: {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    };
    checkpoint: {
        type: CheckpointTypeEnum;
        id: string;
        friendlyId: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    };
}, {
    ok: true;
    run: {
        status: TaskRunStatus;
        id: string;
        friendlyId: string;
        attemptNumber?: number | null | undefined;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    };
    checkpoint: {
        type: CheckpointTypeEnum;
        id: string;
        friendlyId: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    };
}>, z.ZodObject<{
    ok: z.ZodLiteral<false>;
    error: z.ZodString;
}, "strip", z.ZodTypeAny, {
    error: string;
    ok: false;
}, {
    error: string;
    ok: false;
}>]>;
export type CreateCheckpointResult = z.infer<typeof CreateCheckpointResult>;
export declare const MachineResources: z.ZodObject<{
    cpu: z.ZodNumber;
    memory: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    cpu: number;
    memory: number;
}, {
    cpu: number;
    memory: number;
}>;
export type MachineResources = z.infer<typeof MachineResources>;
export declare const DequeueMessageCheckpoint: z.ZodObject<{
    id: z.ZodString;
    type: z.ZodEnum<[CheckpointTypeEnum]>;
    location: z.ZodString;
    imageRef: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    type: CheckpointTypeEnum;
    id: string;
    location: string;
    imageRef?: string | null | undefined;
    reason?: string | null | undefined;
}, {
    type: CheckpointTypeEnum;
    id: string;
    location: string;
    imageRef?: string | null | undefined;
    reason?: string | null | undefined;
}>;
export type DequeueMessageCheckpoint = z.infer<typeof DequeueMessageCheckpoint>;
export declare const PlacementTag: z.ZodObject<{
    key: z.ZodString;
    values: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    key: string;
    values?: string[] | undefined;
}, {
    key: string;
    values?: string[] | undefined;
}>;
export type PlacementTag = z.infer<typeof PlacementTag>;
/** This is sent to a Worker when a run is dequeued (a new run or continuing run) */
export declare const DequeuedMessage: z.ZodObject<{
    version: z.ZodLiteral<"1">;
    snapshot: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        executionStatus: z.ZodEnum<[TaskRunExecutionStatus]>;
        description: z.ZodString;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    }, {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    }>;
    dequeuedAt: z.ZodDate;
    image: z.ZodOptional<z.ZodString>;
    checkpoint: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
        type: z.ZodEnum<[CheckpointTypeEnum]>;
        location: z.ZodString;
        imageRef: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        reason: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        type: CheckpointTypeEnum;
        id: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    }, {
        type: CheckpointTypeEnum;
        id: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    }>>;
    completedWaitpoints: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        index: z.ZodOptional<z.ZodNumber>;
        friendlyId: z.ZodString;
        type: z.ZodEnum<[WaitpointType]>;
        completedAt: z.ZodDate;
        idempotencyKey: z.ZodOptional<z.ZodString>;
        /** For type === "RUN" */
        completedByTaskRun: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
            /** If the run has an associated batch */
            batch: z.ZodOptional<z.ZodObject<{
                id: z.ZodString;
                friendlyId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                friendlyId: string;
            }, {
                id: string;
                friendlyId: string;
            }>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }, {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        }>>;
        /** For type === "DATETIME" */
        completedAfter: z.ZodOptional<z.ZodDate>;
        /** For type === "BATCH" */
        completedByBatch: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            friendlyId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            friendlyId: string;
        }, {
            id: string;
            friendlyId: string;
        }>>;
        output: z.ZodOptional<z.ZodString>;
        outputType: z.ZodOptional<z.ZodString>;
        outputIsError: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        type: WaitpointType;
        id: string;
        friendlyId: string;
        completedAt: Date;
        outputIsError: boolean;
        idempotencyKey?: string | undefined;
        output?: string | undefined;
        outputType?: string | undefined;
        index?: number | undefined;
        completedByTaskRun?: {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        } | undefined;
        completedAfter?: Date | undefined;
        completedByBatch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    }, {
        type: WaitpointType;
        id: string;
        friendlyId: string;
        completedAt: Date;
        outputIsError: boolean;
        idempotencyKey?: string | undefined;
        output?: string | undefined;
        outputType?: string | undefined;
        index?: number | undefined;
        completedByTaskRun?: {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        } | undefined;
        completedAfter?: Date | undefined;
        completedByBatch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    }>, "many">;
    backgroundWorker: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        version: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        version: string;
        friendlyId: string;
    }, {
        id: string;
        version: string;
        friendlyId: string;
    }>;
    deployment: z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        friendlyId: z.ZodOptional<z.ZodString>;
        imagePlatform: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id?: string | undefined;
        friendlyId?: string | undefined;
        imagePlatform?: string | undefined;
    }, {
        id?: string | undefined;
        friendlyId?: string | undefined;
        imagePlatform?: string | undefined;
    }>;
    run: z.ZodObject<{
        id: z.ZodString;
        friendlyId: z.ZodString;
        isTest: z.ZodBoolean;
        machine: z.ZodObject<{
            name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
            cpu: z.ZodNumber;
            memory: z.ZodNumber;
            centsPerMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        }, {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        }>;
        attemptNumber: z.ZodNumber;
        masterQueue: z.ZodString;
        traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        isTest: boolean;
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        traceContext: Record<string, unknown>;
        friendlyId: string;
        attemptNumber: number;
        masterQueue: string;
    }, {
        id: string;
        isTest: boolean;
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        traceContext: Record<string, unknown>;
        friendlyId: string;
        attemptNumber: number;
        masterQueue: string;
    }>;
    environment: z.ZodObject<{
        id: z.ZodString;
        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
    }, "strip", z.ZodTypeAny, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
    }, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
    }>;
    organization: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
    project: z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>;
    placementTags: z.ZodOptional<z.ZodArray<z.ZodObject<{
        key: z.ZodString;
        values: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        key: string;
        values?: string[] | undefined;
    }, {
        key: string;
        values?: string[] | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    version: "1";
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
    };
    organization: {
        id: string;
    };
    project: {
        id: string;
    };
    deployment: {
        id?: string | undefined;
        friendlyId?: string | undefined;
        imagePlatform?: string | undefined;
    };
    run: {
        id: string;
        isTest: boolean;
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        traceContext: Record<string, unknown>;
        friendlyId: string;
        attemptNumber: number;
        masterQueue: string;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    };
    completedWaitpoints: {
        type: WaitpointType;
        id: string;
        friendlyId: string;
        completedAt: Date;
        outputIsError: boolean;
        idempotencyKey?: string | undefined;
        output?: string | undefined;
        outputType?: string | undefined;
        index?: number | undefined;
        completedByTaskRun?: {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        } | undefined;
        completedAfter?: Date | undefined;
        completedByBatch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    }[];
    dequeuedAt: Date;
    backgroundWorker: {
        id: string;
        version: string;
        friendlyId: string;
    };
    checkpoint?: {
        type: CheckpointTypeEnum;
        id: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    } | undefined;
    image?: string | undefined;
    placementTags?: {
        key: string;
        values?: string[] | undefined;
    }[] | undefined;
}, {
    version: "1";
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
    };
    organization: {
        id: string;
    };
    project: {
        id: string;
    };
    deployment: {
        id?: string | undefined;
        friendlyId?: string | undefined;
        imagePlatform?: string | undefined;
    };
    run: {
        id: string;
        isTest: boolean;
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        traceContext: Record<string, unknown>;
        friendlyId: string;
        attemptNumber: number;
        masterQueue: string;
    };
    snapshot: {
        id: string;
        createdAt: Date;
        description: string;
        friendlyId: string;
        executionStatus: TaskRunExecutionStatus;
    };
    completedWaitpoints: {
        type: WaitpointType;
        id: string;
        friendlyId: string;
        completedAt: Date;
        outputIsError: boolean;
        idempotencyKey?: string | undefined;
        output?: string | undefined;
        outputType?: string | undefined;
        index?: number | undefined;
        completedByTaskRun?: {
            id: string;
            friendlyId: string;
            batch?: {
                id: string;
                friendlyId: string;
            } | undefined;
        } | undefined;
        completedAfter?: Date | undefined;
        completedByBatch?: {
            id: string;
            friendlyId: string;
        } | undefined;
    }[];
    dequeuedAt: Date;
    backgroundWorker: {
        id: string;
        version: string;
        friendlyId: string;
    };
    checkpoint?: {
        type: CheckpointTypeEnum;
        id: string;
        location: string;
        imageRef?: string | null | undefined;
        reason?: string | null | undefined;
    } | undefined;
    image?: string | undefined;
    placementTags?: {
        key: string;
        values?: string[] | undefined;
    }[] | undefined;
}>;
export type DequeuedMessage = z.infer<typeof DequeuedMessage>;
export {};
