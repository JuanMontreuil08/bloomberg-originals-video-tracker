import { z } from "zod";
import { RequireKeys } from "../types/index.js";
export declare const EnvironmentType: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
export type EnvironmentType = z.infer<typeof EnvironmentType>;
export declare const RunEngineVersionSchema: z.ZodEnum<["V1", "V2"]>;
export declare const TaskRunExecutionMetric: z.ZodObject<{
    name: z.ZodString;
    event: z.ZodString;
    timestamp: z.ZodNumber;
    duration: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    event: string;
    name: string;
    timestamp: number;
    duration: number;
}, {
    event: string;
    name: string;
    timestamp: number;
    duration: number;
}>;
export type TaskRunExecutionMetric = z.infer<typeof TaskRunExecutionMetric>;
export declare const TaskRunExecutionMetrics: z.ZodArray<z.ZodObject<{
    name: z.ZodString;
    event: z.ZodString;
    timestamp: z.ZodNumber;
    duration: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    event: string;
    name: string;
    timestamp: number;
    duration: number;
}, {
    event: string;
    name: string;
    timestamp: number;
    duration: number;
}>, "many">;
export type TaskRunExecutionMetrics = z.infer<typeof TaskRunExecutionMetrics>;
export declare const TaskRunExecutionPayload: z.ZodObject<{
    execution: z.ZodObject<{
        task: z.ZodObject<{
            id: z.ZodString;
            filePath: z.ZodString;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            id: z.ZodString;
            filePath: z.ZodString;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            id: z.ZodString;
            filePath: z.ZodString;
        }, z.ZodTypeAny, "passthrough">>;
        queue: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
        }, {
            name: string;
            id: string;
        }>;
        environment: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
            branchName: z.ZodOptional<z.ZodString>;
            git: z.ZodOptional<z.ZodObject<{
                provider: z.ZodOptional<z.ZodString>;
                source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                ghUsername: z.ZodOptional<z.ZodString>;
                ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                commitAuthorName: z.ZodOptional<z.ZodString>;
                commitMessage: z.ZodOptional<z.ZodString>;
                commitRef: z.ZodOptional<z.ZodString>;
                commitSha: z.ZodOptional<z.ZodString>;
                dirty: z.ZodOptional<z.ZodBoolean>;
                remoteUrl: z.ZodOptional<z.ZodString>;
                pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                pullRequestTitle: z.ZodOptional<z.ZodString>;
                pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
            }, "strip", z.ZodTypeAny, {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            }, {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        }, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        }>;
        organization: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
        }, {
            name: string;
            id: string;
            slug: string;
        }>;
        project: z.ZodObject<{
            id: z.ZodString;
            ref: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }>;
        machine: z.ZodObject<{
            name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
            cpu: z.ZodNumber;
            memory: z.ZodNumber;
            centsPerMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        }, {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        }>;
        batch: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>>;
        deployment: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            shortCode: z.ZodString;
            version: z.ZodString;
            runtime: z.ZodString;
            runtimeVersion: z.ZodString;
            git: z.ZodOptional<z.ZodObject<{
                provider: z.ZodOptional<z.ZodString>;
                source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                ghUsername: z.ZodOptional<z.ZodString>;
                ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                commitAuthorName: z.ZodOptional<z.ZodString>;
                commitMessage: z.ZodOptional<z.ZodString>;
                commitRef: z.ZodOptional<z.ZodString>;
                commitSha: z.ZodOptional<z.ZodString>;
                dirty: z.ZodOptional<z.ZodBoolean>;
                remoteUrl: z.ZodOptional<z.ZodString>;
                pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                pullRequestTitle: z.ZodOptional<z.ZodString>;
                pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
            }, "strip", z.ZodTypeAny, {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            }, {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            version: string;
            shortCode: string;
            runtime: string;
            runtimeVersion: string;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        }, {
            id: string;
            version: string;
            shortCode: string;
            runtime: string;
            runtimeVersion: string;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        }>>;
        attempt: z.ZodObject<{
            number: z.ZodNumber;
            startedAt: z.ZodDate;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            number: z.ZodNumber;
            startedAt: z.ZodDate;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            number: z.ZodNumber;
            startedAt: z.ZodDate;
        }, z.ZodTypeAny, "passthrough">>;
        run: z.ZodIntersection<z.ZodObject<{
            id: z.ZodString;
            payload: z.ZodString;
            payloadType: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
            isTest: z.ZodDefault<z.ZodBoolean>;
            createdAt: z.ZodDate;
            startedAt: z.ZodDefault<z.ZodDate>;
            idempotencyKey: z.ZodOptional<z.ZodString>;
            maxAttempts: z.ZodOptional<z.ZodNumber>;
            version: z.ZodOptional<z.ZodString>;
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
            maxDuration: z.ZodOptional<z.ZodNumber>;
            priority: z.ZodOptional<z.ZodNumber>;
            baseCostInCents: z.ZodOptional<z.ZodNumber>;
            parentTaskRunId: z.ZodOptional<z.ZodString>;
            rootTaskRunId: z.ZodOptional<z.ZodString>;
            durationMs: z.ZodOptional<z.ZodNumber>;
            costInCents: z.ZodOptional<z.ZodNumber>;
            region: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            startedAt: Date;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            baseCostInCents?: number | undefined;
            parentTaskRunId?: string | undefined;
            rootTaskRunId?: string | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            region?: string | undefined;
        }, {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            createdAt: Date;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            baseCostInCents?: number | undefined;
            parentTaskRunId?: string | undefined;
            rootTaskRunId?: string | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            region?: string | undefined;
        }>, z.ZodObject<{
            traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
        }, "strip", z.ZodTypeAny, {
            traceContext?: Record<string, unknown> | undefined;
        }, {
            traceContext?: Record<string, unknown> | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        task: {
            id: string;
            filePath: string;
        } & {
            [k: string]: unknown;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        attempt: {
            number: number;
            startedAt: Date;
        } & {
            [k: string]: unknown;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            startedAt: Date;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            baseCostInCents?: number | undefined;
            parentTaskRunId?: string | undefined;
            rootTaskRunId?: string | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            region?: string | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        batch?: {
            id: string;
        } | undefined;
        deployment?: {
            id: string;
            version: string;
            shortCode: string;
            runtime: string;
            runtimeVersion: string;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        } | undefined;
    }, {
        task: {
            id: string;
            filePath: string;
        } & {
            [k: string]: unknown;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        attempt: {
            number: number;
            startedAt: Date;
        } & {
            [k: string]: unknown;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            createdAt: Date;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            baseCostInCents?: number | undefined;
            parentTaskRunId?: string | undefined;
            rootTaskRunId?: string | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            region?: string | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        batch?: {
            id: string;
        } | undefined;
        deployment?: {
            id: string;
            version: string;
            shortCode: string;
            runtime: string;
            runtimeVersion: string;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        } | undefined;
    }>;
    traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    metrics: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        event: z.ZodString;
        timestamp: z.ZodNumber;
        duration: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        event: string;
        name: string;
        timestamp: number;
        duration: number;
    }, {
        event: string;
        name: string;
        timestamp: number;
        duration: number;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    traceContext: Record<string, unknown>;
    execution: {
        task: {
            id: string;
            filePath: string;
        } & {
            [k: string]: unknown;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        attempt: {
            number: number;
            startedAt: Date;
        } & {
            [k: string]: unknown;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            startedAt: Date;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            baseCostInCents?: number | undefined;
            parentTaskRunId?: string | undefined;
            rootTaskRunId?: string | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            region?: string | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        batch?: {
            id: string;
        } | undefined;
        deployment?: {
            id: string;
            version: string;
            shortCode: string;
            runtime: string;
            runtimeVersion: string;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        } | undefined;
    };
    environment?: Record<string, string> | undefined;
    metrics?: {
        event: string;
        name: string;
        timestamp: number;
        duration: number;
    }[] | undefined;
}, {
    traceContext: Record<string, unknown>;
    execution: {
        task: {
            id: string;
            filePath: string;
        } & {
            [k: string]: unknown;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        attempt: {
            number: number;
            startedAt: Date;
        } & {
            [k: string]: unknown;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            createdAt: Date;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
            priority?: number | undefined;
            baseCostInCents?: number | undefined;
            parentTaskRunId?: string | undefined;
            rootTaskRunId?: string | undefined;
            durationMs?: number | undefined;
            costInCents?: number | undefined;
            region?: string | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        batch?: {
            id: string;
        } | undefined;
        deployment?: {
            id: string;
            version: string;
            shortCode: string;
            runtime: string;
            runtimeVersion: string;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        } | undefined;
    };
    environment?: Record<string, string> | undefined;
    metrics?: {
        event: string;
        name: string;
        timestamp: number;
        duration: number;
    }[] | undefined;
}>;
export type TaskRunExecutionPayload = z.infer<typeof TaskRunExecutionPayload>;
export declare const V3ProdTaskRunExecution: z.ZodObject<{
    task: z.ZodObject<{
        id: z.ZodString;
        filePath: z.ZodString;
        exportName: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        filePath: string;
        exportName?: string | undefined;
    }, {
        id: string;
        filePath: string;
        exportName?: string | undefined;
    }>;
    attempt: z.ZodObject<{
        number: z.ZodNumber;
        startedAt: z.ZodDate;
        id: z.ZodString;
        backgroundWorkerId: z.ZodString;
        backgroundWorkerTaskId: z.ZodString;
        status: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
        backgroundWorkerId: string;
        backgroundWorkerTaskId: string;
    }, {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
        backgroundWorkerId: string;
        backgroundWorkerTaskId: string;
    }>;
    run: z.ZodIntersection<z.ZodObject<{
        id: z.ZodString;
        payload: z.ZodString;
        payloadType: z.ZodString;
        tags: z.ZodArray<z.ZodString, "many">;
        isTest: z.ZodDefault<z.ZodBoolean>;
        createdAt: z.ZodDate;
        startedAt: z.ZodDefault<z.ZodDate>;
        idempotencyKey: z.ZodOptional<z.ZodString>;
        maxAttempts: z.ZodOptional<z.ZodNumber>;
        version: z.ZodOptional<z.ZodString>;
        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
        maxDuration: z.ZodOptional<z.ZodNumber>;
        context: z.ZodUnknown;
        durationMs: z.ZodNumber;
        costInCents: z.ZodNumber;
        baseCostInCents: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        payload: string;
        id: string;
        payloadType: string;
        tags: string[];
        isTest: boolean;
        createdAt: Date;
        startedAt: Date;
        baseCostInCents: number;
        durationMs: number;
        costInCents: number;
        context?: unknown;
        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
    }, {
        payload: string;
        id: string;
        payloadType: string;
        tags: string[];
        createdAt: Date;
        baseCostInCents: number;
        durationMs: number;
        costInCents: number;
        context?: unknown;
        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
        isTest?: boolean | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
    }>, z.ZodObject<{
        traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }, "strip", z.ZodTypeAny, {
        traceContext?: Record<string, unknown> | undefined;
    }, {
        traceContext?: Record<string, unknown> | undefined;
    }>>;
    queue: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
    }, {
        name: string;
        id: string;
    }>;
    environment: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
        branchName: z.ZodOptional<z.ZodString>;
        git: z.ZodOptional<z.ZodObject<{
            provider: z.ZodOptional<z.ZodString>;
            source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
            ghUsername: z.ZodOptional<z.ZodString>;
            ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
            commitAuthorName: z.ZodOptional<z.ZodString>;
            commitMessage: z.ZodOptional<z.ZodString>;
            commitRef: z.ZodOptional<z.ZodString>;
            commitSha: z.ZodOptional<z.ZodString>;
            dirty: z.ZodOptional<z.ZodBoolean>;
            remoteUrl: z.ZodOptional<z.ZodString>;
            pullRequestNumber: z.ZodOptional<z.ZodNumber>;
            pullRequestTitle: z.ZodOptional<z.ZodString>;
            pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
        }, "strip", z.ZodTypeAny, {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        }, {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    }, {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    }>;
    organization: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
    }, {
        name: string;
        id: string;
        slug: string;
    }>;
    project: z.ZodObject<{
        id: z.ZodString;
        ref: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }, {
        name: string;
        id: string;
        slug: string;
        ref: string;
    }>;
    batch: z.ZodOptional<z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>>;
} & {
    worker: z.ZodObject<{
        id: z.ZodString;
        contentHash: z.ZodString;
        version: z.ZodString;
        type: z.ZodOptional<z.ZodEnum<["V1", "V2"]>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        version: string;
        contentHash: string;
        type?: "V1" | "V2" | undefined;
    }, {
        id: string;
        version: string;
        contentHash: string;
        type?: "V1" | "V2" | undefined;
    }>;
    machine: z.ZodDefault<z.ZodObject<{
        name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
        cpu: z.ZodNumber;
        memory: z.ZodNumber;
        centsPerMs: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    }, {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    }>>;
}, "strip", z.ZodTypeAny, {
    task: {
        id: string;
        filePath: string;
        exportName?: string | undefined;
    };
    queue: {
        name: string;
        id: string;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    machine: {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    };
    attempt: {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
        backgroundWorkerId: string;
        backgroundWorkerTaskId: string;
    };
    run: {
        payload: string;
        id: string;
        payloadType: string;
        tags: string[];
        isTest: boolean;
        createdAt: Date;
        startedAt: Date;
        baseCostInCents: number;
        durationMs: number;
        costInCents: number;
        context?: unknown;
        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
    } & {
        traceContext?: Record<string, unknown> | undefined;
    };
    worker: {
        id: string;
        version: string;
        contentHash: string;
        type?: "V1" | "V2" | undefined;
    };
    batch?: {
        id: string;
    } | undefined;
}, {
    task: {
        id: string;
        filePath: string;
        exportName?: string | undefined;
    };
    queue: {
        name: string;
        id: string;
    };
    environment: {
        type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
        id: string;
        slug: string;
        branchName?: string | undefined;
        git?: {
            dirty?: boolean | undefined;
            source?: "trigger_github_app" | "github_actions" | "local" | undefined;
            provider?: string | undefined;
            ghUsername?: string | undefined;
            ghUserAvatarUrl?: string | undefined;
            commitAuthorName?: string | undefined;
            commitMessage?: string | undefined;
            commitRef?: string | undefined;
            commitSha?: string | undefined;
            remoteUrl?: string | undefined;
            pullRequestNumber?: number | undefined;
            pullRequestTitle?: string | undefined;
            pullRequestState?: "open" | "closed" | "merged" | undefined;
        } | undefined;
    };
    organization: {
        name: string;
        id: string;
        slug: string;
    };
    project: {
        name: string;
        id: string;
        slug: string;
        ref: string;
    };
    attempt: {
        number: number;
        status: string;
        id: string;
        startedAt: Date;
        backgroundWorkerId: string;
        backgroundWorkerTaskId: string;
    };
    run: {
        payload: string;
        id: string;
        payloadType: string;
        tags: string[];
        createdAt: Date;
        baseCostInCents: number;
        durationMs: number;
        costInCents: number;
        context?: unknown;
        metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
        isTest?: boolean | undefined;
        startedAt?: Date | undefined;
        idempotencyKey?: string | undefined;
        maxAttempts?: number | undefined;
        version?: string | undefined;
        maxDuration?: number | undefined;
    } & {
        traceContext?: Record<string, unknown> | undefined;
    };
    worker: {
        id: string;
        version: string;
        contentHash: string;
        type?: "V1" | "V2" | undefined;
    };
    machine?: {
        cpu: number;
        memory: number;
        name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
        centsPerMs: number;
    } | undefined;
    batch?: {
        id: string;
    } | undefined;
}>;
export type V3ProdTaskRunExecution = z.infer<typeof V3ProdTaskRunExecution>;
export declare const V3ProdTaskRunExecutionPayload: z.ZodObject<{
    execution: z.ZodObject<{
        task: z.ZodObject<{
            id: z.ZodString;
            filePath: z.ZodString;
            exportName: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            filePath: string;
            exportName?: string | undefined;
        }, {
            id: string;
            filePath: string;
            exportName?: string | undefined;
        }>;
        attempt: z.ZodObject<{
            number: z.ZodNumber;
            startedAt: z.ZodDate;
            id: z.ZodString;
            backgroundWorkerId: z.ZodString;
            backgroundWorkerTaskId: z.ZodString;
            status: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        }, {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        }>;
        run: z.ZodIntersection<z.ZodObject<{
            id: z.ZodString;
            payload: z.ZodString;
            payloadType: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
            isTest: z.ZodDefault<z.ZodBoolean>;
            createdAt: z.ZodDate;
            startedAt: z.ZodDefault<z.ZodDate>;
            idempotencyKey: z.ZodOptional<z.ZodString>;
            maxAttempts: z.ZodOptional<z.ZodNumber>;
            version: z.ZodOptional<z.ZodString>;
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<import("../../index.js").DeserializedJson, z.ZodTypeDef, import("../../index.js").DeserializedJson>>>;
            maxDuration: z.ZodOptional<z.ZodNumber>;
            context: z.ZodUnknown;
            durationMs: z.ZodNumber;
            costInCents: z.ZodNumber;
            baseCostInCents: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            startedAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            context?: unknown;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
        }, {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            context?: unknown;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
        }>, z.ZodObject<{
            traceContext: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
        }, "strip", z.ZodTypeAny, {
            traceContext?: Record<string, unknown> | undefined;
        }, {
            traceContext?: Record<string, unknown> | undefined;
        }>>;
        queue: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
        }, {
            name: string;
            id: string;
        }>;
        environment: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            type: z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>;
            branchName: z.ZodOptional<z.ZodString>;
            git: z.ZodOptional<z.ZodObject<{
                provider: z.ZodOptional<z.ZodString>;
                source: z.ZodOptional<z.ZodEnum<["trigger_github_app", "github_actions", "local"]>>;
                ghUsername: z.ZodOptional<z.ZodString>;
                ghUserAvatarUrl: z.ZodOptional<z.ZodString>;
                commitAuthorName: z.ZodOptional<z.ZodString>;
                commitMessage: z.ZodOptional<z.ZodString>;
                commitRef: z.ZodOptional<z.ZodString>;
                commitSha: z.ZodOptional<z.ZodString>;
                dirty: z.ZodOptional<z.ZodBoolean>;
                remoteUrl: z.ZodOptional<z.ZodString>;
                pullRequestNumber: z.ZodOptional<z.ZodNumber>;
                pullRequestTitle: z.ZodOptional<z.ZodString>;
                pullRequestState: z.ZodOptional<z.ZodEnum<["open", "closed", "merged"]>>;
            }, "strip", z.ZodTypeAny, {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            }, {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        }, {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        }>;
        organization: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
        }, {
            name: string;
            id: string;
            slug: string;
        }>;
        project: z.ZodObject<{
            id: z.ZodString;
            ref: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }, {
            name: string;
            id: string;
            slug: string;
            ref: string;
        }>;
        batch: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
        }, {
            id: string;
        }>>;
    } & {
        worker: z.ZodObject<{
            id: z.ZodString;
            contentHash: z.ZodString;
            version: z.ZodString;
            type: z.ZodOptional<z.ZodEnum<["V1", "V2"]>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            version: string;
            contentHash: string;
            type?: "V1" | "V2" | undefined;
        }, {
            id: string;
            version: string;
            contentHash: string;
            type?: "V1" | "V2" | undefined;
        }>;
        machine: z.ZodDefault<z.ZodObject<{
            name: z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>;
            cpu: z.ZodNumber;
            memory: z.ZodNumber;
            centsPerMs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        }, {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        task: {
            id: string;
            filePath: string;
            exportName?: string | undefined;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            startedAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            context?: unknown;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        worker: {
            id: string;
            version: string;
            contentHash: string;
            type?: "V1" | "V2" | undefined;
        };
        batch?: {
            id: string;
        } | undefined;
    }, {
        task: {
            id: string;
            filePath: string;
            exportName?: string | undefined;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            context?: unknown;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        worker: {
            id: string;
            version: string;
            contentHash: string;
            type?: "V1" | "V2" | undefined;
        };
        machine?: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        } | undefined;
        batch?: {
            id: string;
        } | undefined;
    }>;
    traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    metrics: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        event: z.ZodString;
        timestamp: z.ZodNumber;
        duration: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        event: string;
        name: string;
        timestamp: number;
        duration: number;
    }, {
        event: string;
        name: string;
        timestamp: number;
        duration: number;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    traceContext: Record<string, unknown>;
    execution: {
        task: {
            id: string;
            filePath: string;
            exportName?: string | undefined;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        machine: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            isTest: boolean;
            createdAt: Date;
            startedAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            context?: unknown;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        worker: {
            id: string;
            version: string;
            contentHash: string;
            type?: "V1" | "V2" | undefined;
        };
        batch?: {
            id: string;
        } | undefined;
    };
    environment?: Record<string, string> | undefined;
    metrics?: {
        event: string;
        name: string;
        timestamp: number;
        duration: number;
    }[] | undefined;
}, {
    traceContext: Record<string, unknown>;
    execution: {
        task: {
            id: string;
            filePath: string;
            exportName?: string | undefined;
        };
        queue: {
            name: string;
            id: string;
        };
        environment: {
            type: "PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW";
            id: string;
            slug: string;
            branchName?: string | undefined;
            git?: {
                dirty?: boolean | undefined;
                source?: "trigger_github_app" | "github_actions" | "local" | undefined;
                provider?: string | undefined;
                ghUsername?: string | undefined;
                ghUserAvatarUrl?: string | undefined;
                commitAuthorName?: string | undefined;
                commitMessage?: string | undefined;
                commitRef?: string | undefined;
                commitSha?: string | undefined;
                remoteUrl?: string | undefined;
                pullRequestNumber?: number | undefined;
                pullRequestTitle?: string | undefined;
                pullRequestState?: "open" | "closed" | "merged" | undefined;
            } | undefined;
        };
        organization: {
            name: string;
            id: string;
            slug: string;
        };
        project: {
            name: string;
            id: string;
            slug: string;
            ref: string;
        };
        attempt: {
            number: number;
            status: string;
            id: string;
            startedAt: Date;
            backgroundWorkerId: string;
            backgroundWorkerTaskId: string;
        };
        run: {
            payload: string;
            id: string;
            payloadType: string;
            tags: string[];
            createdAt: Date;
            baseCostInCents: number;
            durationMs: number;
            costInCents: number;
            context?: unknown;
            metadata?: Record<string, import("../../index.js").DeserializedJson> | undefined;
            isTest?: boolean | undefined;
            startedAt?: Date | undefined;
            idempotencyKey?: string | undefined;
            maxAttempts?: number | undefined;
            version?: string | undefined;
            maxDuration?: number | undefined;
        } & {
            traceContext?: Record<string, unknown> | undefined;
        };
        worker: {
            id: string;
            version: string;
            contentHash: string;
            type?: "V1" | "V2" | undefined;
        };
        machine?: {
            cpu: number;
            memory: number;
            name: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x";
            centsPerMs: number;
        } | undefined;
        batch?: {
            id: string;
        } | undefined;
    };
    environment?: Record<string, string> | undefined;
    metrics?: {
        event: string;
        name: string;
        timestamp: number;
        duration: number;
    }[] | undefined;
}>;
export type V3ProdTaskRunExecutionPayload = z.infer<typeof V3ProdTaskRunExecutionPayload>;
export declare const FixedWindowRateLimit: z.ZodObject<{
    type: z.ZodLiteral<"fixed-window">;
    limit: z.ZodNumber;
    window: z.ZodUnion<[z.ZodObject<{
        seconds: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        seconds: number;
    }, {
        seconds: number;
    }>, z.ZodObject<{
        minutes: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minutes: number;
    }, {
        minutes: number;
    }>, z.ZodObject<{
        hours: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        hours: number;
    }, {
        hours: number;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "fixed-window";
    limit: number;
    window: {
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    };
}, {
    type: "fixed-window";
    limit: number;
    window: {
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    };
}>;
export declare const SlidingWindowRateLimit: z.ZodObject<{
    type: z.ZodLiteral<"sliding-window">;
    limit: z.ZodNumber;
    window: z.ZodUnion<[z.ZodObject<{
        seconds: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        seconds: number;
    }, {
        seconds: number;
    }>, z.ZodObject<{
        minutes: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minutes: number;
    }, {
        minutes: number;
    }>, z.ZodObject<{
        hours: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        hours: number;
    }, {
        hours: number;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "sliding-window";
    limit: number;
    window: {
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    };
}, {
    type: "sliding-window";
    limit: number;
    window: {
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    };
}>;
export declare const RateLimitOptions: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"fixed-window">;
    limit: z.ZodNumber;
    window: z.ZodUnion<[z.ZodObject<{
        seconds: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        seconds: number;
    }, {
        seconds: number;
    }>, z.ZodObject<{
        minutes: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minutes: number;
    }, {
        minutes: number;
    }>, z.ZodObject<{
        hours: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        hours: number;
    }, {
        hours: number;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "fixed-window";
    limit: number;
    window: {
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    };
}, {
    type: "fixed-window";
    limit: number;
    window: {
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"sliding-window">;
    limit: z.ZodNumber;
    window: z.ZodUnion<[z.ZodObject<{
        seconds: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        seconds: number;
    }, {
        seconds: number;
    }>, z.ZodObject<{
        minutes: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        minutes: number;
    }, {
        minutes: number;
    }>, z.ZodObject<{
        hours: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        hours: number;
    }, {
        hours: number;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "sliding-window";
    limit: number;
    window: {
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    };
}, {
    type: "sliding-window";
    limit: number;
    window: {
        seconds: number;
    } | {
        minutes: number;
    } | {
        hours: number;
    };
}>]>;
export type RateLimitOptions = z.infer<typeof RateLimitOptions>;
export declare const RetryOptions: z.ZodObject<{
    /** The number of attempts before giving up */
    maxAttempts: z.ZodOptional<z.ZodNumber>;
    /** The exponential factor to use when calculating the next retry time.
     *
     * Each subsequent retry will be calculated as `previousTimeout * factor`
     */
    factor: z.ZodOptional<z.ZodNumber>;
    /** The minimum time to wait before retrying */
    minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
    /** The maximum time to wait before retrying */
    maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
    /** Randomize the timeout between retries.
     *
     * This can be useful to prevent the thundering herd problem where all retries happen at the same time.
     */
    randomize: z.ZodOptional<z.ZodBoolean>;
    /** If a run fails with an Out Of Memory (OOM) error and you have this set, it will retry with the machine you specify.
     * Note: it will not default to this [machine](https://trigger.dev/docs/machines) for new runs, only for failures caused by OOM errors.
     * So if you frequently have attempts failing with OOM errors, you should set the [default machine](https://trigger.dev/docs/machines) to be higher.
     */
    outOfMemory: z.ZodOptional<z.ZodObject<{
        machine: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
    }, "strip", z.ZodTypeAny, {
        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    }, {
        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    maxAttempts?: number | undefined;
    factor?: number | undefined;
    minTimeoutInMs?: number | undefined;
    maxTimeoutInMs?: number | undefined;
    randomize?: boolean | undefined;
    outOfMemory?: {
        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    } | undefined;
}, {
    maxAttempts?: number | undefined;
    factor?: number | undefined;
    minTimeoutInMs?: number | undefined;
    maxTimeoutInMs?: number | undefined;
    randomize?: boolean | undefined;
    outOfMemory?: {
        machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    } | undefined;
}>;
export type RetryOptions = z.infer<typeof RetryOptions>;
export declare const QueueManifest: z.ZodObject<{
    /** You can define a shared queue and then pass the name in to your task.
     *
     * @example
     *
     * ```ts
     * const myQueue = queue({
        name: "my-queue",
        concurrencyLimit: 1,
      });
  
      export const task1 = task({
        id: "task-1",
        queue: {
          name: "my-queue",
        },
        run: async (payload: { message: string }) => {
          // ...
        },
      });
  
      export const task2 = task({
        id: "task-2",
        queue: {
          name: "my-queue",
        },
        run: async (payload: { message: string }) => {
          // ...
        },
      });
     * ```
     */
    name: z.ZodString;
    /** An optional property that specifies the maximum number of concurrent run executions.
     *
     * If this property is omitted, the task can potentially use up the full concurrency of an environment */
    concurrencyLimit: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    concurrencyLimit?: number | null | undefined;
}, {
    name: string;
    concurrencyLimit?: number | null | undefined;
}>;
export type QueueManifest = z.infer<typeof QueueManifest>;
export declare const ScheduleMetadata: z.ZodObject<{
    cron: z.ZodString;
    timezone: z.ZodString;
    environments: z.ZodOptional<z.ZodArray<z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>, "many">>;
}, "strip", z.ZodTypeAny, {
    cron: string;
    timezone: string;
    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
}, {
    cron: string;
    timezone: string;
    environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
}>;
export declare const TaskMetadata: z.ZodObject<{
    id: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    queue: z.ZodOptional<z.ZodObject<{
        concurrencyLimit: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
    } & {
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        concurrencyLimit?: number | null | undefined;
    }, {
        name?: string | undefined;
        concurrencyLimit?: number | null | undefined;
    }>>;
    retry: z.ZodOptional<z.ZodObject<{
        /** The number of attempts before giving up */
        maxAttempts: z.ZodOptional<z.ZodNumber>;
        /** The exponential factor to use when calculating the next retry time.
         *
         * Each subsequent retry will be calculated as `previousTimeout * factor`
         */
        factor: z.ZodOptional<z.ZodNumber>;
        /** The minimum time to wait before retrying */
        minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
        /** The maximum time to wait before retrying */
        maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
        /** Randomize the timeout between retries.
         *
         * This can be useful to prevent the thundering herd problem where all retries happen at the same time.
         */
        randomize: z.ZodOptional<z.ZodBoolean>;
        /** If a run fails with an Out Of Memory (OOM) error and you have this set, it will retry with the machine you specify.
         * Note: it will not default to this [machine](https://trigger.dev/docs/machines) for new runs, only for failures caused by OOM errors.
         * So if you frequently have attempts failing with OOM errors, you should set the [default machine](https://trigger.dev/docs/machines) to be higher.
         */
        outOfMemory: z.ZodOptional<z.ZodObject<{
            machine: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
        }, "strip", z.ZodTypeAny, {
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        }, {
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
        outOfMemory?: {
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
    }, {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
        outOfMemory?: {
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
    }>>;
    machine: z.ZodOptional<z.ZodObject<{
        cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
        memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
        preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
    }, "strip", z.ZodTypeAny, {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    }, {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    }>>;
    triggerSource: z.ZodOptional<z.ZodString>;
    schedule: z.ZodOptional<z.ZodObject<{
        cron: z.ZodString;
        timezone: z.ZodString;
        environments: z.ZodOptional<z.ZodArray<z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        cron: string;
        timezone: string;
        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
    }, {
        cron: string;
        timezone: string;
        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
    }>>;
    maxDuration: z.ZodOptional<z.ZodNumber>;
    payloadSchema: z.ZodOptional<z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    id: string;
    maxDuration?: number | undefined;
    queue?: {
        name?: string | undefined;
        concurrencyLimit?: number | null | undefined;
    } | undefined;
    machine?: {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    } | undefined;
    retry?: {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
        outOfMemory?: {
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
    } | undefined;
    description?: string | undefined;
    triggerSource?: string | undefined;
    schedule?: {
        cron: string;
        timezone: string;
        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
    } | undefined;
    payloadSchema?: unknown;
}, {
    id: string;
    maxDuration?: number | undefined;
    queue?: {
        name?: string | undefined;
        concurrencyLimit?: number | null | undefined;
    } | undefined;
    machine?: {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    } | undefined;
    retry?: {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
        outOfMemory?: {
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
    } | undefined;
    description?: string | undefined;
    triggerSource?: string | undefined;
    schedule?: {
        cron: string;
        timezone: string;
        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
    } | undefined;
    payloadSchema?: unknown;
}>;
export type TaskMetadata = z.infer<typeof TaskMetadata>;
export declare const TaskFile: z.ZodObject<{
    entry: z.ZodString;
    out: z.ZodString;
}, "strip", z.ZodTypeAny, {
    out: string;
    entry: string;
}, {
    out: string;
    entry: string;
}>;
export type TaskFile = z.infer<typeof TaskFile>;
export declare const TaskFileMetadata: z.ZodObject<{
    filePath: z.ZodString;
    exportName: z.ZodOptional<z.ZodString>;
    entryPoint: z.ZodString;
}, "strip", z.ZodTypeAny, {
    filePath: string;
    entryPoint: string;
    exportName?: string | undefined;
}, {
    filePath: string;
    entryPoint: string;
    exportName?: string | undefined;
}>;
export type TaskFileMetadata = z.infer<typeof TaskFileMetadata>;
export declare const TaskManifest: z.ZodObject<{
    filePath: z.ZodString;
    exportName: z.ZodOptional<z.ZodString>;
    entryPoint: z.ZodString;
    id: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    queue: z.ZodOptional<z.ZodObject<{
        concurrencyLimit: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
    } & {
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        concurrencyLimit?: number | null | undefined;
    }, {
        name?: string | undefined;
        concurrencyLimit?: number | null | undefined;
    }>>;
    retry: z.ZodOptional<z.ZodObject<{
        /** The number of attempts before giving up */
        maxAttempts: z.ZodOptional<z.ZodNumber>;
        /** The exponential factor to use when calculating the next retry time.
         *
         * Each subsequent retry will be calculated as `previousTimeout * factor`
         */
        factor: z.ZodOptional<z.ZodNumber>;
        /** The minimum time to wait before retrying */
        minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
        /** The maximum time to wait before retrying */
        maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
        /** Randomize the timeout between retries.
         *
         * This can be useful to prevent the thundering herd problem where all retries happen at the same time.
         */
        randomize: z.ZodOptional<z.ZodBoolean>;
        /** If a run fails with an Out Of Memory (OOM) error and you have this set, it will retry with the machine you specify.
         * Note: it will not default to this [machine](https://trigger.dev/docs/machines) for new runs, only for failures caused by OOM errors.
         * So if you frequently have attempts failing with OOM errors, you should set the [default machine](https://trigger.dev/docs/machines) to be higher.
         */
        outOfMemory: z.ZodOptional<z.ZodObject<{
            machine: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
        }, "strip", z.ZodTypeAny, {
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        }, {
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
        outOfMemory?: {
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
    }, {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
        outOfMemory?: {
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
    }>>;
    machine: z.ZodOptional<z.ZodObject<{
        cpu: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
        memory: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<0.25>, z.ZodLiteral<0.5>, z.ZodLiteral<1>, z.ZodLiteral<2>, z.ZodLiteral<4>, z.ZodLiteral<8>]>>;
        preset: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
    }, "strip", z.ZodTypeAny, {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    }, {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    }>>;
    triggerSource: z.ZodOptional<z.ZodString>;
    schedule: z.ZodOptional<z.ZodObject<{
        cron: z.ZodString;
        timezone: z.ZodString;
        environments: z.ZodOptional<z.ZodArray<z.ZodEnum<["PRODUCTION", "STAGING", "DEVELOPMENT", "PREVIEW"]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        cron: string;
        timezone: string;
        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
    }, {
        cron: string;
        timezone: string;
        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
    }>>;
    maxDuration: z.ZodOptional<z.ZodNumber>;
    payloadSchema: z.ZodOptional<z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    id: string;
    filePath: string;
    entryPoint: string;
    maxDuration?: number | undefined;
    queue?: {
        name?: string | undefined;
        concurrencyLimit?: number | null | undefined;
    } | undefined;
    machine?: {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    } | undefined;
    exportName?: string | undefined;
    retry?: {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
        outOfMemory?: {
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
    } | undefined;
    description?: string | undefined;
    triggerSource?: string | undefined;
    schedule?: {
        cron: string;
        timezone: string;
        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
    } | undefined;
    payloadSchema?: unknown;
}, {
    id: string;
    filePath: string;
    entryPoint: string;
    maxDuration?: number | undefined;
    queue?: {
        name?: string | undefined;
        concurrencyLimit?: number | null | undefined;
    } | undefined;
    machine?: {
        cpu?: 1 | 2 | 4 | 0.25 | 0.5 | undefined;
        memory?: 1 | 2 | 4 | 0.25 | 0.5 | 8 | undefined;
        preset?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
    } | undefined;
    exportName?: string | undefined;
    retry?: {
        maxAttempts?: number | undefined;
        factor?: number | undefined;
        minTimeoutInMs?: number | undefined;
        maxTimeoutInMs?: number | undefined;
        randomize?: boolean | undefined;
        outOfMemory?: {
            machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
        } | undefined;
    } | undefined;
    description?: string | undefined;
    triggerSource?: string | undefined;
    schedule?: {
        cron: string;
        timezone: string;
        environments?: ("PRODUCTION" | "STAGING" | "DEVELOPMENT" | "PREVIEW")[] | undefined;
    } | undefined;
    payloadSchema?: unknown;
}>;
export type TaskManifest = z.infer<typeof TaskManifest>;
export declare const PostStartCauses: z.ZodEnum<["index", "create", "restore"]>;
export type PostStartCauses = z.infer<typeof PostStartCauses>;
export declare const PreStopCauses: z.ZodEnum<["terminate"]>;
export type PreStopCauses = z.infer<typeof PreStopCauses>;
export declare const Config: z.ZodObject<{
    project: z.ZodString;
    triggerDirectories: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    triggerUrl: z.ZodOptional<z.ZodString>;
    projectDir: z.ZodOptional<z.ZodString>;
    tsconfigPath: z.ZodOptional<z.ZodString>;
    retries: z.ZodOptional<z.ZodObject<{
        enabledInDev: z.ZodDefault<z.ZodBoolean>;
        default: z.ZodOptional<z.ZodObject<{
            /** The number of attempts before giving up */
            maxAttempts: z.ZodOptional<z.ZodNumber>;
            /** The exponential factor to use when calculating the next retry time.
             *
             * Each subsequent retry will be calculated as `previousTimeout * factor`
             */
            factor: z.ZodOptional<z.ZodNumber>;
            /** The minimum time to wait before retrying */
            minTimeoutInMs: z.ZodOptional<z.ZodNumber>;
            /** The maximum time to wait before retrying */
            maxTimeoutInMs: z.ZodOptional<z.ZodNumber>;
            /** Randomize the timeout between retries.
             *
             * This can be useful to prevent the thundering herd problem where all retries happen at the same time.
             */
            randomize: z.ZodOptional<z.ZodBoolean>;
            /** If a run fails with an Out Of Memory (OOM) error and you have this set, it will retry with the machine you specify.
             * Note: it will not default to this [machine](https://trigger.dev/docs/machines) for new runs, only for failures caused by OOM errors.
             * So if you frequently have attempts failing with OOM errors, you should set the [default machine](https://trigger.dev/docs/machines) to be higher.
             */
            outOfMemory: z.ZodOptional<z.ZodObject<{
                machine: z.ZodOptional<z.ZodEnum<["micro", "small-1x", "small-2x", "medium-1x", "medium-2x", "large-1x", "large-2x"]>>;
            }, "strip", z.ZodTypeAny, {
                machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            }, {
                machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
            outOfMemory?: {
                machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            } | undefined;
        }, {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
            outOfMemory?: {
                machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        enabledInDev: boolean;
        default?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
            outOfMemory?: {
                machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            } | undefined;
        } | undefined;
    }, {
        default?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
            outOfMemory?: {
                machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            } | undefined;
        } | undefined;
        enabledInDev?: boolean | undefined;
    }>>;
    additionalPackages: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    additionalFiles: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    dependenciesToBundle: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, "many">>;
    logLevel: z.ZodOptional<z.ZodString>;
    enableConsoleLogging: z.ZodOptional<z.ZodBoolean>;
    postInstall: z.ZodOptional<z.ZodString>;
    extraCACerts: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    project: string;
    triggerDirectories?: string[] | undefined;
    triggerUrl?: string | undefined;
    projectDir?: string | undefined;
    tsconfigPath?: string | undefined;
    retries?: {
        enabledInDev: boolean;
        default?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
            outOfMemory?: {
                machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            } | undefined;
        } | undefined;
    } | undefined;
    additionalPackages?: string[] | undefined;
    additionalFiles?: string[] | undefined;
    dependenciesToBundle?: (string | RegExp)[] | undefined;
    logLevel?: string | undefined;
    enableConsoleLogging?: boolean | undefined;
    postInstall?: string | undefined;
    extraCACerts?: string | undefined;
}, {
    project: string;
    triggerDirectories?: string[] | undefined;
    triggerUrl?: string | undefined;
    projectDir?: string | undefined;
    tsconfigPath?: string | undefined;
    retries?: {
        default?: {
            maxAttempts?: number | undefined;
            factor?: number | undefined;
            minTimeoutInMs?: number | undefined;
            maxTimeoutInMs?: number | undefined;
            randomize?: boolean | undefined;
            outOfMemory?: {
                machine?: "micro" | "small-1x" | "small-2x" | "medium-1x" | "medium-2x" | "large-1x" | "large-2x" | undefined;
            } | undefined;
        } | undefined;
        enabledInDev?: boolean | undefined;
    } | undefined;
    additionalPackages?: string[] | undefined;
    additionalFiles?: string[] | undefined;
    dependenciesToBundle?: (string | RegExp)[] | undefined;
    logLevel?: string | undefined;
    enableConsoleLogging?: boolean | undefined;
    postInstall?: string | undefined;
    extraCACerts?: string | undefined;
}>;
export type Config = z.infer<typeof Config>;
export type ResolvedConfig = RequireKeys<Config, "triggerDirectories" | "triggerUrl" | "projectDir" | "tsconfigPath">;
export declare const WaitReason: z.ZodEnum<["WAIT_FOR_DURATION", "WAIT_FOR_TASK", "WAIT_FOR_BATCH"]>;
export type WaitReason = z.infer<typeof WaitReason>;
export declare const TaskRunExecutionLazyAttemptPayload: z.ZodObject<{
    runId: z.ZodString;
    attemptCount: z.ZodOptional<z.ZodNumber>;
    messageId: z.ZodString;
    isTest: z.ZodBoolean;
    traceContext: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    environment: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    metrics: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        event: z.ZodString;
        timestamp: z.ZodNumber;
        duration: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        event: string;
        name: string;
        timestamp: number;
        duration: number;
    }, {
        event: string;
        name: string;
        timestamp: number;
        duration: number;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    isTest: boolean;
    traceContext: Record<string, unknown>;
    runId: string;
    messageId: string;
    environment?: Record<string, string> | undefined;
    attemptCount?: number | undefined;
    metrics?: {
        event: string;
        name: string;
        timestamp: number;
        duration: number;
    }[] | undefined;
}, {
    isTest: boolean;
    traceContext: Record<string, unknown>;
    runId: string;
    messageId: string;
    environment?: Record<string, string> | undefined;
    attemptCount?: number | undefined;
    metrics?: {
        event: string;
        name: string;
        timestamp: number;
        duration: number;
    }[] | undefined;
}>;
export type TaskRunExecutionLazyAttemptPayload = z.infer<typeof TaskRunExecutionLazyAttemptPayload>;
export declare const ManualCheckpointMetadata: z.ZodObject<{
    /** NOT a friendly ID */
    attemptId: z.ZodString;
    previousRunStatus: z.ZodString;
    previousAttemptStatus: z.ZodString;
}, "strip", z.ZodTypeAny, {
    attemptId: string;
    previousRunStatus: string;
    previousAttemptStatus: string;
}, {
    attemptId: string;
    previousRunStatus: string;
    previousAttemptStatus: string;
}>;
export type ManualCheckpointMetadata = z.infer<typeof ManualCheckpointMetadata>;
export declare const RunChainState: z.ZodObject<{
    concurrency: z.ZodOptional<z.ZodObject<{
        queues: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            holding: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: string;
            holding: number;
        }, {
            name: string;
            id: string;
            holding: number;
        }>, "many">;
        environment: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        queues: {
            name: string;
            id: string;
            holding: number;
        }[];
        environment?: number | undefined;
    }, {
        queues: {
            name: string;
            id: string;
            holding: number;
        }[];
        environment?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    concurrency?: {
        queues: {
            name: string;
            id: string;
            holding: number;
        }[];
        environment?: number | undefined;
    } | undefined;
}, {
    concurrency?: {
        queues: {
            name: string;
            id: string;
            holding: number;
        }[];
        environment?: number | undefined;
    } | undefined;
}>;
export type RunChainState = z.infer<typeof RunChainState>;
export declare const TriggerTraceContext: z.ZodObject<{
    traceparent: z.ZodOptional<z.ZodString>;
    tracestate: z.ZodOptional<z.ZodString>;
    external: z.ZodOptional<z.ZodObject<{
        traceparent: z.ZodOptional<z.ZodString>;
        tracestate: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        traceparent?: string | undefined;
        tracestate?: string | undefined;
    }, {
        traceparent?: string | undefined;
        tracestate?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    traceparent?: string | undefined;
    tracestate?: string | undefined;
    external?: {
        traceparent?: string | undefined;
        tracestate?: string | undefined;
    } | undefined;
}, {
    traceparent?: string | undefined;
    tracestate?: string | undefined;
    external?: {
        traceparent?: string | undefined;
        tracestate?: string | undefined;
    } | undefined;
}>;
export type TriggerTraceContext = z.infer<typeof TriggerTraceContext>;
