"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ai = void 0;
const v3_1 = require("@trigger.dev/core/v3");
const ai_1 = require("ai");
const metadata_js_1 = require("./metadata.js");
const METADATA_KEY = "tool.execute.options";
function toolFromTask(task, options) {
    if (("schema" in task && !task.schema) || ("jsonSchema" in task && !task.jsonSchema)) {
        throw new Error("Cannot convert this task to to a tool because the task has no schema. Make sure to either use schemaTask or a task with an input jsonSchema.");
    }
    const toolDefinition = (0, ai_1.dynamicTool)({
        description: task.description,
        inputSchema: convertTaskSchemaToToolParameters(task),
        execute: async (input, options) => {
            const serializedOptions = options ? JSON.parse(JSON.stringify(options)) : undefined;
            return await task
                .triggerAndWait(input, {
                metadata: {
                    [METADATA_KEY]: serializedOptions,
                },
            })
                .unwrap();
        },
        ...options,
    });
    return toolDefinition;
}
function getToolOptionsFromMetadata() {
    const tool = metadata_js_1.metadata.get(METADATA_KEY);
    if (!tool) {
        return undefined;
    }
    return tool;
}
function convertTaskSchemaToToolParameters(task) {
    if ("schema" in task) {
        // If TaskSchema is ArkTypeEsque, use ai.jsonSchema to convert it to a Schema
        if ("toJsonSchema" in task.schema && typeof task.schema.toJsonSchema === "function") {
            return (0, ai_1.jsonSchema)(task.schema.toJsonSchema());
        }
        // If TaskSchema is ZodEsque, use ai.zodSchema to convert it to a Schema
        if ((0, v3_1.isSchemaZodEsque)(task.schema)) {
            return (0, ai_1.zodSchema)(task.schema);
        }
    }
    if ("jsonSchema" in task) {
        return (0, ai_1.jsonSchema)(task.jsonSchema);
    }
    throw new Error("Cannot convert task to a tool. Make sure to use a task with a schema or jsonSchema.");
}
exports.ai = {
    tool: toolFromTask,
    currentToolOptions: getToolOptionsFromMetadata,
};
//# sourceMappingURL=ai.js.map