"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tasks = exports.toolTask = exports.schemaTask = exports.task = exports.SubtaskUnwrapError = void 0;
const hooks_js_1 = require("./hooks.js");
const shared_js_1 = require("./shared.js");
Object.defineProperty(exports, "SubtaskUnwrapError", { enumerable: true, get: function () { return shared_js_1.SubtaskUnwrapError; } });
/** Creates a task that can be triggered
 * @param options - Task options
 * @example
 *
 * ```ts
 * import { task } from "@trigger.dev/sdk/v3";
 *
 * export const helloWorld = task({
    id: "hello-world",
 *    run: async (payload: { url: string }) => {
 *    return { hello: "world" };
 *  },
 * });
 *
 * ```
 *
 * @returns A task that can be triggered
 */
exports.task = shared_js_1.createTask;
exports.schemaTask = shared_js_1.createSchemaTask;
exports.toolTask = shared_js_1.createToolTask;
exports.tasks = {
    trigger: shared_js_1.trigger,
    batchTrigger: shared_js_1.batchTrigger,
    triggerAndWait: shared_js_1.triggerAndWait,
    batchTriggerAndWait: shared_js_1.batchTriggerAndWait,
    onStart: hooks_js_1.onStart,
    onFailure: hooks_js_1.onFailure,
    onSuccess: hooks_js_1.onSuccess,
    onComplete: hooks_js_1.onComplete,
    onWait: hooks_js_1.onWait,
    onResume: hooks_js_1.onResume,
    onCancel: hooks_js_1.onCancel,
    /** @deprecated Use catchError instead */
    handleError: hooks_js_1.onHandleError,
    catchError: hooks_js_1.onCatchError,
    middleware: hooks_js_1.middleware,
};
//# sourceMappingURL=tasks.js.map