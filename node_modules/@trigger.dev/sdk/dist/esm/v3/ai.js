import { isSchemaZodEsque, } from "@trigger.dev/core/v3";
import { dynamicTool, jsonSchema, zodSchema } from "ai";
import { metadata } from "./metadata.js";
const METADATA_KEY = "tool.execute.options";
function toolFromTask(task, options) {
    if (("schema" in task && !task.schema) || ("jsonSchema" in task && !task.jsonSchema)) {
        throw new Error("Cannot convert this task to to a tool because the task has no schema. Make sure to either use schemaTask or a task with an input jsonSchema.");
    }
    const toolDefinition = dynamicTool({
        description: task.description,
        inputSchema: convertTaskSchemaToToolParameters(task),
        execute: async (input, options) => {
            const serializedOptions = options ? JSON.parse(JSON.stringify(options)) : undefined;
            return await task
                .triggerAndWait(input, {
                metadata: {
                    [METADATA_KEY]: serializedOptions,
                },
            })
                .unwrap();
        },
        ...options,
    });
    return toolDefinition;
}
function getToolOptionsFromMetadata() {
    const tool = metadata.get(METADATA_KEY);
    if (!tool) {
        return undefined;
    }
    return tool;
}
function convertTaskSchemaToToolParameters(task) {
    if ("schema" in task) {
        // If TaskSchema is ArkTypeEsque, use ai.jsonSchema to convert it to a Schema
        if ("toJsonSchema" in task.schema && typeof task.schema.toJsonSchema === "function") {
            return jsonSchema(task.schema.toJsonSchema());
        }
        // If TaskSchema is ZodEsque, use ai.zodSchema to convert it to a Schema
        if (isSchemaZodEsque(task.schema)) {
            return zodSchema(task.schema);
        }
    }
    if ("jsonSchema" in task) {
        return jsonSchema(task.jsonSchema);
    }
    throw new Error("Cannot convert task to a tool. Make sure to use a task with a schema or jsonSchema.");
}
export const ai = {
    tool: toolFromTask,
    currentToolOptions: getToolOptionsFromMetadata,
};
//# sourceMappingURL=ai.js.map