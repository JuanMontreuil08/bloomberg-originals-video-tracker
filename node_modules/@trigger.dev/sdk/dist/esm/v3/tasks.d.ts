import { onStart, onFailure, onSuccess, onComplete, onWait, onResume, onHandleError, onCatchError, middleware, onCancel } from "./hooks.js";
import { batchTrigger, batchTriggerAndWait, createTask, createSchemaTask, createToolTask, SubtaskUnwrapError, trigger, triggerAndWait } from "./shared.js";
export { SubtaskUnwrapError };
import type { AnyTask, BatchItem, BatchResult, BatchRunHandle, Queue, RunHandle, Task, TaskIdentifier, TaskOptions, TaskOutput, TaskPayload, TriggerOptions, TaskRunResult, TaskFromIdentifier } from "./shared.js";
export type { AnyTask, BatchItem, BatchResult, BatchRunHandle, Queue, RunHandle, Task, TaskIdentifier, TaskOptions, TaskOutput, TaskPayload, TriggerOptions, TaskRunResult, TaskFromIdentifier, };
export type * from "./hooks.js";
/** Creates a task that can be triggered
 * @param options - Task options
 * @example
 *
 * ```ts
 * import { task } from "@trigger.dev/sdk/v3";
 *
 * export const helloWorld = task({
    id: "hello-world",
 *    run: async (payload: { url: string }) => {
 *    return { hello: "world" };
 *  },
 * });
 *
 * ```
 *
 * @returns A task that can be triggered
 */
export declare const task: typeof createTask;
export declare const schemaTask: typeof createSchemaTask;
export declare const toolTask: typeof createToolTask;
export declare const tasks: {
    trigger: typeof trigger;
    batchTrigger: typeof batchTrigger;
    triggerAndWait: typeof triggerAndWait;
    batchTriggerAndWait: typeof batchTriggerAndWait;
    onStart: typeof onStart;
    onFailure: typeof onFailure;
    onSuccess: typeof onSuccess;
    onComplete: typeof onComplete;
    onWait: typeof onWait;
    onResume: typeof onResume;
    onCancel: typeof onCancel;
    /** @deprecated Use catchError instead */
    handleError: typeof onHandleError;
    catchError: typeof onCatchError;
    middleware: typeof middleware;
};
